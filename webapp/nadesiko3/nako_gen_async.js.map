{"version":3,"file":"nako_gen_async.js","mappings":"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","sources":["webpack://nadesiko3/./core/src/nako_core_version.mjs","webpack://nadesiko3/./core/src/nako_errors.mjs","webpack://nadesiko3/./core/src/nako_gen.mjs","webpack://nadesiko3/webpack/bootstrap","webpack://nadesiko3/webpack/runtime/define property getters","webpack://nadesiko3/webpack/runtime/hasOwnProperty shorthand","webpack://nadesiko3/./core/src/nako_gen_async.mjs"],"sourcesContent":["// 実際のバージョン定義 (自動生成されるので以下を編集しない)\r\nconst coreVersion = {\r\n    version: '3.4.12',\r\n    major: 3,\r\n    minor: 4,\r\n    patch: 12\r\n};\r\nexport default coreVersion;\r\n","/**\r\n * なでしこ言語が投げる全てのエラーが継承するクラス\r\n */\r\nexport class NakoError extends Error {\r\n    constructor(tag, msg, file = undefined, line = undefined) {\r\n        // エラー位置を分かりやすく日本語に変換\r\n        const positionJa = `${file || ''}${line === undefined ? '' : `(${line + 1}行目): `}`;\r\n        // #1223 エラーメッセージに「main__関数名」と表示されるので、main__は省略して表示\r\n        msg = msg.replace(/『main__(.+?)』/g, '『$1』');\r\n        // 親のErrorを呼ぶ\r\n        super(`[${tag}]${positionJa}${msg}`);\r\n        // エラーの種類を設定\r\n        this.name = 'NakoError';\r\n        this.type = 'NakoError';\r\n        this.tag = '[' + tag + ']';\r\n        this.positionJa = positionJa;\r\n        this.msg = msg;\r\n    }\r\n}\r\nexport class NakoIndentError extends NakoError {\r\n    /**\r\n     * @param {string} msg\r\n     * @param {number} line\r\n     * @param {string} file\r\n     */\r\n    constructor(msg, line, file) {\r\n        super('インデントエラー', msg, file, line);\r\n        this.type = 'NakoIndentError';\r\n        this.line = line;\r\n        this.file = file;\r\n    }\r\n}\r\n// コンパイラの内部でのみ使うエラー。投げられたらtryでキャッチしてLexerErrorへ変更する。\r\nexport class InternalLexerError extends NakoError {\r\n    /**\r\n     * @param {string} msg\r\n     * @param {number} preprocessedCodeStartOffset\r\n     * @param {number} preprocessedCodeEndOffset\r\n     * @param {number | undefined} [line]\r\n     * @param {string | undefined} [file]\r\n     */\r\n    constructor(msg, preprocessedCodeStartOffset, preprocessedCodeEndOffset, line, file) {\r\n        super('字句解析エラー（内部エラー）', msg, file, line);\r\n        this.type = 'InternalLexerError';\r\n        this.preprocessedCodeStartOffset = preprocessedCodeStartOffset;\r\n        this.preprocessedCodeEndOffset = preprocessedCodeEndOffset;\r\n        this.line = line;\r\n        this.file = file;\r\n    }\r\n}\r\nexport class NakoLexerError extends NakoError {\r\n    /**\r\n     * @param {string} msg\r\n     * @param {number | null} startOffset\r\n     * @param {number | null} endOffset,\r\n     * @param {number | undefined} line\r\n     * @param {string | undefined} file\r\n     */\r\n    constructor(msg, startOffset, endOffset, line, file) {\r\n        super('字句解析エラー', msg, file, line);\r\n        this.type = 'NakoLexerError';\r\n        this.startOffset = startOffset;\r\n        this.endOffset = endOffset;\r\n        this.line = line;\r\n        this.file = file;\r\n    }\r\n}\r\nexport class NakoSyntaxError extends NakoError {\r\n    /**\r\n     * @param {string} msg\r\n     * @param {number | undefined} line\r\n     * @param {number | undefined} startOffset\r\n     * @param {number | undefined} endOffset\r\n     * @param {string | undefined} file\r\n     */\r\n    constructor(msg, line, startOffset, endOffset, file) {\r\n        super('文法エラー', msg, file, line);\r\n        this.type = 'NakoSyntaxError';\r\n        this.file = file;\r\n        this.line = line;\r\n        this.startOffset = startOffset;\r\n        this.endOffset = endOffset;\r\n    }\r\n    /**\r\n     * @param {string} msg\r\n     * @param {Ast} first\r\n     * @param {Ast} [last]\r\n     */\r\n    static fromNode(msg, first, last = undefined) {\r\n        if (!first) {\r\n            return new NakoSyntaxError(msg, undefined, undefined, undefined, undefined);\r\n        }\r\n        const startOffset = typeof first.startOffset === 'number' ? first.startOffset : undefined;\r\n        const endOffset = (last && typeof last.endOffset === 'number')\r\n            ? last.endOffset\r\n            : (typeof first.endOffset === 'number' ? first.endOffset : undefined);\r\n        return new NakoSyntaxError(msg, first.line, startOffset, endOffset, first.file);\r\n    }\r\n}\r\nexport class NakoRuntimeError extends NakoError {\r\n    /**\r\n     * @param error エラー\r\n     * @param lineNo 発生行\r\n     */\r\n    constructor(error, lineNo) {\r\n        let msg = 'unknown';\r\n        if (typeof error === 'string') {\r\n            msg = error;\r\n        }\r\n        else {\r\n            if (error instanceof NakoRuntimeError) {\r\n                msg = error.msg;\r\n            }\r\n            else if (error instanceof NakoError) {\r\n                msg = error.msg;\r\n            }\r\n            else if (error instanceof Error) {\r\n                if (error.name === 'Error') {\r\n                    msg = error.message;\r\n                }\r\n                else {\r\n                    msg = `${error.name}: ${error.message}`;\r\n                }\r\n            }\r\n        }\r\n        // 行番号を表す文字列をパースする。\r\n        let line;\r\n        let file;\r\n        let matches;\r\n        if (lineNo === undefined) {\r\n            line = undefined;\r\n            file = undefined;\r\n            // eslint-disable-next-line no-cond-assign\r\n        }\r\n        else if (matches = /^l(-?\\d+):(.*)$/.exec(lineNo)) {\r\n            line = parseInt(matches[1]);\r\n            file = matches[2];\r\n            // eslint-disable-next-line no-cond-assign\r\n        }\r\n        else if (matches = /^l(-?\\d+)$/.exec(lineNo)) {\r\n            line = parseInt(matches[1]);\r\n            file = 'main.nako3';\r\n        }\r\n        else {\r\n            line = 0;\r\n            file = lineNo;\r\n        }\r\n        super('実行時エラー', msg, file, line);\r\n        this.type = 'NakoRuntimeError';\r\n        this.lineNo = lineNo;\r\n        this.line = line;\r\n        this.file = file;\r\n    }\r\n}\r\nexport class NakoImportError extends NakoError {\r\n    /**\r\n     * @param {string} msg\r\n     * @param {string} file\r\n     * @param {number} line\r\n     */\r\n    constructor(msg, file, line) {\r\n        super('取り込みエラー', msg, file, line);\r\n        this.file = file;\r\n        this.line = line;\r\n    }\r\n}\r\n","/**\r\n * パーサーが生成した中間オブジェクトを実際のJavaScriptのコードに変換する。\r\n * なお速度優先で忠実にJavaScriptのコードを生成する。\r\n */\r\nimport { NakoSyntaxError } from './nako_errors.mjs';\r\n// なでしこで定義した関数の開始コードと終了コード\r\nconst topOfFunction = '(function(){\\n';\r\nconst endOfFunction = '})';\r\nconst topOfFunctionAsync = '(async function(){\\n';\r\n/** コード生成オプション */\r\nexport class NakoGenOptions {\r\n    constructor(isTest = false, importFiles = [], codeStandalone = '', convEnv = '') {\r\n        this.isTest = isTest;\r\n        this.codeStandalone = codeStandalone;\r\n        this.codeEnv = convEnv;\r\n        this.importFiles = ['plugin_system.mjs', 'plugin_math.mjs', 'plugin_csv.mjs', 'plugin_promise.mjs', 'plugin_test.mjs'];\r\n        for (const fname of importFiles) {\r\n            this.importFiles.push(fname);\r\n        }\r\n    }\r\n}\r\n/**\r\n * 構文木からJSのコードを生成するクラス\r\n */\r\nexport class NakoGen {\r\n    /** constructor\r\n     * @param com コンパイラのインスタンス\r\n     */\r\n    constructor(com) {\r\n        /**\r\n         * 出力するJavaScriptコードのヘッダー部分で定義する必要のある関数。fnはjsのコード。\r\n         * プラグイン関数は含まれない。\r\n         */\r\n        this.nakoFuncList = { ...com.getNakoFuncList() };\r\n        /**\r\n         * なでしこで定義したテストの一覧\r\n         */\r\n        this.nakoTestFuncs = {};\r\n        /**\r\n         * プログラム内で参照された関数のリスト。プラグインの命令を含む。\r\n         * JavaScript単体で実行するとき、このリストにある関数の定義をJavaScriptコードの先頭に付け足す。\r\n         */\r\n        this.usedFuncSet = new Set();\r\n        /**\r\n         * ループ時の一時変数が被らないようにIDで管理\r\n         */\r\n        this.loopId = 1;\r\n        /**\r\n         * 非同関数を何回使ったか\r\n         */\r\n        this.numAsyncFn = 0;\r\n        /**\r\n         * 関数定義の際、関数の中でasyncFn=trueの関数を呼び出したかどうかを調べる @see convDefFuncCommon\r\n         */\r\n        this.usedAsyncFn = false;\r\n        /** 変換中の処理が、ループの中かどうかを判定する */\r\n        this.flagLoop = false;\r\n        this.__self = com;\r\n        /** コードジェネレータの種類 */\r\n        this.genMode = 'sync';\r\n        /** 行番号とファイル名が分かるときは `l123:main.nako3`、行番号だけ分かるときは `l123`、そうでなければ任意の文字列。 */\r\n        this.lastLineNo = null;\r\n        /** スタック */\r\n        this.varslistSet = com.__varslist.map((v) => ({ isFunction: false, names: new Set(Object.keys(v)), readonly: new Set() }));\r\n        /** スタックトップ */\r\n        this.varsSet = { isFunction: false, names: new Set(), readonly: new Set() };\r\n        this.varslistSet[2] = this.varsSet;\r\n        // 1以上のとき高速化する。\r\n        // 実行速度優先ブロック内で1増える。\r\n        this.speedMode = {\r\n            lineNumbers: 0,\r\n            implicitTypeCasting: 0,\r\n            invalidSore: 0,\r\n            forcePure: 0 // 全てのシステム命令をpureとして扱う。命令からローカル変数への参照が出来なくなる。\r\n        };\r\n        // 1以上のとき測定をinjectする。\r\n        // パフォーマンスモニタのブロック内で1増える。\r\n        this.performanceMonitor = {\r\n            userFunction: 0,\r\n            systemFunction: 0,\r\n            systemFunctionBody: 0,\r\n            mumeiId: 0\r\n        };\r\n        /**\r\n         * 未定義の変数の警告を行う\r\n         */\r\n        this.warnUndefinedVar = true;\r\n        this.constPools = [];\r\n        // 暫定変数\r\n        this.warnUndefinedReturnUserFunc = 1;\r\n        this.warnUndefinedCallingUserFunc = 1;\r\n        this.warnUndefinedCallingSystemFunc = 1;\r\n        this.warnUndefinedCalledUserFuncArgs = 1;\r\n        this.debugOption = com.debugOption;\r\n    }\r\n    static isValidIdentifier(name) {\r\n        // TODO: いらなそうな部分は削る\r\n        // https://stackoverflow.com/a/9337047\r\n        // eslint-disable-next-line no-misleading-character-class\r\n        return /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/.test(name);\r\n    }\r\n    /**\r\n     * 改行を埋め込む\r\n     */\r\n    convLineno(node, forceUpdate = false, incLine = 0) {\r\n        // スピードモードでは行番号を埋め込まない\r\n        if (this.speedMode.lineNumbers > 0) {\r\n            return '';\r\n        }\r\n        const lineNo = node.line + incLine;\r\n        let lineNoStr;\r\n        if (typeof node.line !== 'number') {\r\n            lineNoStr = 'unknown';\r\n        }\r\n        else if (typeof node.file !== 'string') {\r\n            lineNoStr = `l${lineNo}`;\r\n        }\r\n        else {\r\n            lineNoStr = `l${lineNo}:${node.file}`;\r\n        }\r\n        // 強制的に行番号をアップデートするか\r\n        if (!forceUpdate) {\r\n            if (lineNoStr === this.lastLineNo) {\r\n                return '';\r\n            }\r\n            this.lastLineNo = lineNoStr;\r\n        }\r\n        // 実行行のデータ\r\n        const lineDataJSON = JSON.stringify(lineNoStr);\r\n        // デバッグ実行か\r\n        let debugCode = '';\r\n        if (this.debugOption.useDebug) {\r\n            // messageAction\r\n            if (this.debugOption.messageAction) {\r\n                debugCode += `window.postMessage({action:'${this.debugOption.messageAction}',` +\r\n                    `line: ${lineDataJSON}});`;\r\n            }\r\n            // waitTime\r\n            if (lineNo >= 1) {\r\n                if (this.debugOption.waitTime > 0) {\r\n                    debugCode += `await __v0['秒待'](${this.debugOption.waitTime},__self);`;\r\n                }\r\n                // breakpoints\r\n                this.numAsyncFn += 1;\r\n                this.usedAsyncFn = true;\r\n                debugCode += `await __v0['__DEBUG_BP_WAIT'](${lineNo}, __self);`;\r\n            }\r\n            // end\r\n            debugCode += 'if(__v0.forceClose){return-1};';\r\n        }\r\n        // 例: __v0.line='l1:main.nako3'\r\n        return `__v0.line=${lineDataJSON};` + debugCode;\r\n    }\r\n    /**\r\n     * ローカル変数のJavaScriptコードを生成する。\r\n     * @param {string} name\r\n     */\r\n    varname(name) {\r\n        if (this.varslistSet.length === 3) {\r\n            // グローバル\r\n            return `__varslist[${2}][${JSON.stringify(name)}]`;\r\n        }\r\n        else {\r\n            // 関数内\r\n            if (NakoGen.isValidIdentifier(name)) {\r\n                return name;\r\n            }\r\n            else {\r\n                return `__vars[${JSON.stringify(name)}]`;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {string} name\r\n     * @returns {string}\r\n    */\r\n    static getFuncName(name) {\r\n        if (name.indexOf('__') >= 0) { // スコープがある場合\r\n            const a = name.split('__');\r\n            const scope = a[0];\r\n            const name3 = NakoGen.getFuncName(a[1]);\r\n            return `${scope}__${name3}`;\r\n        }\r\n        let name2 = name.replace(/[ぁ-ん]+$/, '');\r\n        if (name2 === '') {\r\n            name2 = name;\r\n        }\r\n        return name2;\r\n    }\r\n    /** @param {Ast} node */\r\n    static convPrint(node) {\r\n        return `__print(${node});`;\r\n    }\r\n    /** @param {Ast} node */\r\n    convRequire(node) {\r\n        const moduleName = node.value;\r\n        return this.convLineno(node, false) +\r\n            `__module['${moduleName}'] = require('${moduleName}');\\n`;\r\n    }\r\n    /**\r\n     * プログラムの実行に必要な関数定義を書き出す(グローバル領域)\r\n     * convGenの結果を利用するため、convGenの後に呼び出すこと。\r\n     * @param com\r\n     * @param opt\r\n     */\r\n    getDefFuncCode(com, opt) {\r\n        let code = '';\r\n        // よく使う変数のショートカット\r\n        code += `const nakoVersion = { version: ${JSON.stringify(com.version)} }\\n`;\r\n        code += 'const __self = self;\\n';\r\n        code += 'self.__self = self;\\n';\r\n        code += 'const __varslist = self.__varslist;\\n';\r\n        code += 'const __module = self.__module;\\n';\r\n        code += 'const __v0 = self.__v0 = self.__varslist[0];\\n';\r\n        code += 'const __v1 = self.__v1 = self.__varslist[1];\\n';\r\n        code += 'const __vars = self.__vars = self.__varslist[2];\\n';\r\n        code += `const __modList = self.__modList = ${JSON.stringify(com.getModList())}\\n`;\r\n        code += '__v0.line = 0;\\n';\r\n        code += '__v0.forceClose = false;\\n';\r\n        code += `__v0.useDebug = ${this.debugOption.useDebug};\\n`;\r\n        // 定数を埋め込む\r\n        code += 'self.constPools = ' + JSON.stringify(this.constPools) + ';\\n';\r\n        // なでしこの関数定義を行う\r\n        let nakoFuncCode = '';\r\n        for (const key in this.nakoFuncList) {\r\n            const f = this.nakoFuncList[key].fn;\r\n            const isAsync = this.nakoFuncList[key].asyncFn ? 'true' : 'false';\r\n            nakoFuncCode += '' +\r\n                `//[DEF_FUNC name='${key}' asyncFn=${isAsync}]\\n` +\r\n                `self.__varslist[1][\"${key}\"]=${f};\\n;` +\r\n                `//[/DEF_FUNC name='${key}']\\n`;\r\n        }\r\n        if (nakoFuncCode !== '') {\r\n            code += '__v0.line=\\'関数の定義\\';\\n' + nakoFuncCode;\r\n        }\r\n        // テストの定義を行う\r\n        if (opt.isTest) {\r\n            let testCode = 'const __tests = [];\\n';\r\n            for (const key in this.nakoTestFuncs) {\r\n                const f = this.nakoTestFuncs[key].fn;\r\n                testCode += `${f};\\n;`;\r\n            }\r\n            if (testCode !== '') {\r\n                code += '__v0.line=\\'テストの定義\\';\\n';\r\n                code += testCode + '\\n';\r\n            }\r\n        }\r\n        return code;\r\n    }\r\n    /**\r\n     * プラグイン・オブジェクトを追加\r\n     * @param po プラグイン・オブジェクト\r\n     */\r\n    addPlugin(po) {\r\n        return this.__self.addPlugin(po);\r\n    }\r\n    /**\r\n     * プラグイン・オブジェクトを追加(ブラウザ向け)\r\n     * @param name オブジェクト名\r\n     * @param po 関数リスト\r\n     */\r\n    addPluginObject(name, po) {\r\n        this.__self.addPluginObject(name, po);\r\n    }\r\n    /**\r\n     * プラグイン・ファイルを追加(Node.js向け)\r\n     * @param objName オブジェクト名\r\n     * @param path ファイルパス\r\n     * @param po 登録するオブジェクト\r\n     */\r\n    addPluginFile(objName, path, po) {\r\n        this.__self.addPluginFile(objName, path, po);\r\n    }\r\n    /**\r\n     * 関数を追加する\r\n     * @param key 関数名\r\n     * @param josi 助詞\r\n     * @param fn 関数\r\n     */\r\n    addFunc(key, josi, fn) {\r\n        this.__self.addFunc(key, josi, fn);\r\n    }\r\n    /**\r\n     * プラグイン関数を参照する\r\n     * @param key プラグイン関数の関数名\r\n     * @returns プラグイン・オブジェクト\r\n     */\r\n    getFunc(key) {\r\n        return this.__self.getFunc(key);\r\n    }\r\n    /**\r\n     * 関数を先に登録してしまう\r\n     */\r\n    registerFunction(ast) {\r\n        if (ast.type !== 'block') {\r\n            throw NakoSyntaxError.fromNode('構文解析に失敗しています。構文は必ずblockが先頭になります', ast);\r\n        }\r\n        /** 関数一覧 */\r\n        const funcList = [];\r\n        // なでしこ関数を定義して this.nako_func[name] に定義する\r\n        const registFunc = (node) => {\r\n            if (!node.block) {\r\n                return;\r\n            }\r\n            const blockList = (node.block instanceof Array) ? node.block : [node.block];\r\n            for (let i = 0; i < blockList.length; i++) {\r\n                const t = blockList[i];\r\n                if (t.type === 'def_func') {\r\n                    if (!t.name) {\r\n                        throw new Error('[System Error] 関数の定義で関数名が指定されていない');\r\n                    }\r\n                    const name = t.name.value;\r\n                    this.usedFuncSet.add(name);\r\n                    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                    this.__self.__varslist[1][name] = function () { }; // 事前に適当な値を設定\r\n                    this.varslistSet[1].names.add(name); // global\r\n                    const meta = (t.name).meta; // todo: 強制変換したが正しいかチェック\r\n                    this.nakoFuncList[name] = {\r\n                        josi: meta.josi,\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        fn: () => { },\r\n                        type: 'func',\r\n                        asyncFn: t.asyncFn\r\n                    };\r\n                    funcList.push({ name, node: t });\r\n                    // eslint-disable-next-line brace-style\r\n                }\r\n                // 実行速度優先 などのオプションが付いている場合の処理\r\n                else if (t.type === 'speed_mode') {\r\n                    if (!t.block) {\r\n                        continue;\r\n                    }\r\n                    if (t.block.type === 'block') {\r\n                        registFunc(t.block);\r\n                    }\r\n                    else {\r\n                        registFunc(t);\r\n                    }\r\n                }\r\n                else if (t.type === 'performance_monitor') {\r\n                    if (!t.block) {\r\n                        continue;\r\n                    }\r\n                    if (t.block.type === 'block') {\r\n                        registFunc(t.block);\r\n                    }\r\n                    else {\r\n                        registFunc(t);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        // 関数の登録\r\n        registFunc(ast);\r\n        // __self.__varslistの変更を反映\r\n        const initialNames = new Set();\r\n        if (this.speedMode.invalidSore === 0) {\r\n            initialNames.add('それ');\r\n        }\r\n        this.varsSet = { isFunction: false, names: initialNames, readonly: new Set() };\r\n        this.varslistSet = this.__self.__varslist.map((v) => ({ isFunction: false, names: new Set(Object.keys(v)), readonly: new Set() }));\r\n        this.varslistSet[2] = this.varsSet;\r\n    }\r\n    /**\r\n     * @param node\r\n     * @param opt\r\n     */\r\n    convGen(node, opt) {\r\n        const result = this.convLineno(node, false) + this._convGen(node, true);\r\n        if (opt.isTest) {\r\n            return '';\r\n        }\r\n        else {\r\n            return result;\r\n        }\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     */\r\n    _convGen(node, isExpression) {\r\n        if (!node) {\r\n            return '';\r\n        }\r\n        let code = '';\r\n        if (node instanceof Array) {\r\n            for (let i = 0; i < node.length; i++) {\r\n                const n = node[i];\r\n                code += this._convGen(n, isExpression);\r\n            }\r\n            return code;\r\n        }\r\n        if (node === null) {\r\n            return 'null';\r\n        }\r\n        if (node === undefined) {\r\n            return 'undefined';\r\n        }\r\n        if (typeof (node) !== 'object') {\r\n            return '' + node;\r\n        }\r\n        // switch\r\n        switch (node.type) {\r\n            case 'nop':\r\n                break;\r\n            case 'block':\r\n                if (!node.block) {\r\n                    return code;\r\n                }\r\n                // eslint-disable-next-line no-case-declarations\r\n                const blocks = (node.block instanceof Array) ? node.block : [node.block];\r\n                for (let i = 0; i < blocks.length; i++) {\r\n                    const b = blocks[i];\r\n                    code += this._convGen(b, false);\r\n                }\r\n                break;\r\n            case 'comment':\r\n            case 'eol':\r\n                code += this.convComment(node);\r\n                break;\r\n            case 'break':\r\n                code += this.convCheckLoop(node, 'break');\r\n                break;\r\n            case 'continue':\r\n                code += this.convCheckLoop(node, 'continue');\r\n                break;\r\n            case 'end':\r\n                code += '__v0[\\'終\\'](__self);';\r\n                break;\r\n            case 'number':\r\n                code += node.value;\r\n                break;\r\n            case 'string':\r\n                code += this.convString(node);\r\n                break;\r\n            case 'def_local_var':\r\n                code += this.convDefLocalVar(node);\r\n                break;\r\n            case 'def_local_varlist':\r\n                code += this.convDefLocalVarlist(node);\r\n                break;\r\n            case 'let':\r\n                code += this.convLet(node);\r\n                break;\r\n            case 'inc':\r\n                code += this.convInc(node);\r\n                break;\r\n            case 'word':\r\n            case 'variable':\r\n                code += this.convGetVar(node);\r\n                break;\r\n            case 'op':\r\n            case 'calc':\r\n                code += this.convOp(node);\r\n                break;\r\n            case 'renbun':\r\n                code += this.convRenbun(node);\r\n                break;\r\n            case 'not':\r\n                code += '((' + this._convGen(node.value, true) + ')?0:1)';\r\n                break;\r\n            case 'func':\r\n            case 'func_pointer':\r\n            case 'calc_func':\r\n                code += this.convCallFunc(node, isExpression);\r\n                break;\r\n            case 'if':\r\n                code += this.convIf(node);\r\n                break;\r\n            case 'tikuji':\r\n                code += this.convTikuji(node);\r\n                break;\r\n            case 'for':\r\n                code += this.convFor(node);\r\n                break;\r\n            case 'foreach':\r\n                code += this.convForeach(node);\r\n                break;\r\n            case 'repeat_times':\r\n                code += this.convRepeatTimes(node);\r\n                break;\r\n            case 'speed_mode':\r\n                code += this.convSpeedMode(node, isExpression);\r\n                break;\r\n            case 'performance_monitor':\r\n                code += this.convPerformanceMonitor(node, isExpression);\r\n                break;\r\n            case 'while':\r\n                code += this.convWhile(node);\r\n                break;\r\n            case 'atohantei':\r\n                code += this.convAtohantei(node);\r\n                break;\r\n            case 'switch':\r\n                code += this.convSwitch(node);\r\n                break;\r\n            case 'let_array':\r\n                code += this.convLetArray(node);\r\n                break;\r\n            case '配列参照':\r\n                code += this.convRefArray(node);\r\n                break;\r\n            case 'json_array':\r\n                code += this.convJsonArray(node);\r\n                break;\r\n            case 'json_obj':\r\n                code += this.convJsonObj(node);\r\n                break;\r\n            case 'func_obj':\r\n                code += this.convFuncObj(node);\r\n                break;\r\n            case 'bool':\r\n                code += (node.value) ? 'true' : 'false';\r\n                break;\r\n            case 'null':\r\n                code += 'null';\r\n                break;\r\n            case 'def_test':\r\n                code += this.convDefTest(node);\r\n                break;\r\n            case 'def_func':\r\n                code += this.convDefFunc(node);\r\n                break;\r\n            case 'return':\r\n                code += this.convReturn(node);\r\n                break;\r\n            case 'try_except':\r\n                code += this.convTryExcept(node);\r\n                break;\r\n            case 'require':\r\n                code += this.convRequire(node);\r\n                break;\r\n            default:\r\n                throw new Error('System Error: unknown_type=' + node.type);\r\n        }\r\n        return code;\r\n    }\r\n    /** 変数を検索 */\r\n    findVar(name) {\r\n        // __vars ? (ローカル変数)\r\n        if (this.varslistSet.length > 3 && this.varsSet.names.has(name)) {\r\n            return { i: this.varslistSet.length - 1, name, isTop: true, js: this.varname(name) };\r\n        }\r\n        // __varslist ?\r\n        for (let i = 2; i >= 0; i--) {\r\n            if (this.varslistSet[i].names.has(name)) {\r\n                // ユーザーの定義したグローバル変数 (__varslist[2]) は、変数展開されている（そのままの名前で定義されている）可能性がある。\r\n                // それ以外の変数は、必ず__varslistに入っている。\r\n                return { i, name, isTop: false, js: `__varslist[${i}][${JSON.stringify(name)}]` };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 定義済みの変数の参照\r\n     * @param {string} name\r\n     * @param {Ast} position\r\n     */\r\n    genVar(name, position) {\r\n        const res = this.findVar(name);\r\n        const lno = position.line;\r\n        if (res === null) {\r\n            // 定義されていない名前の参照は変数の定義とみなす。\r\n            // 多くの場合はundefined値を持つ変数であり分かりづらいバグを引き起こすが、\r\n            // 「ナデシコする」などの命令の中で定義された変数の参照の場合があるため警告に留める。\r\n            // ただし、自動的に定義される変数『引数』『それ』などは例外 #952\r\n            if (name === '引数' || name === 'それ' || name === '対象' || name === '対象キー') {\r\n                // デフォルト定義されている変数名\r\n            }\r\n            else {\r\n                if (this.warnUndefinedVar) {\r\n                    // main__は省略して表示するように。 #1223\r\n                    const dispName = name.replace(/^main__(.+)$/, '$1');\r\n                    this.__self.getLogger().warn(`変数『${dispName}』は定義されていません。`, position);\r\n                }\r\n            }\r\n            this.varsSet.names.add(name);\r\n            return this.varname(name);\r\n        }\r\n        const i = res.i;\r\n        // システム関数・変数の場合\r\n        if (i === 0) {\r\n            const pv = this.__self.getNakoFunc(name);\r\n            if (!pv) {\r\n                return `${res.js}/*err:${lno}*/`;\r\n            }\r\n            if (pv.type === 'const' || pv.type === 'var') {\r\n                return res.js;\r\n            }\r\n            if (pv.type === 'func') {\r\n                if (!pv.josi || pv.josi.length === 0) {\r\n                    return `(${res.js}())`;\r\n                }\r\n                throw NakoSyntaxError.fromNode(`『${name}』が複文で使われました。単文で記述してください。(v1非互換)`, position);\r\n            }\r\n            throw NakoSyntaxError.fromNode(`『${name}』は関数であり参照できません。`, position);\r\n        }\r\n        return res.js;\r\n    }\r\n    convGetVar(node) {\r\n        const name = node.value;\r\n        return this.genVar(name, node);\r\n    }\r\n    convComment(node) {\r\n        let commentSrc = String(node.value);\r\n        commentSrc = commentSrc.replace(/\\n/g, '¶');\r\n        const lineNo = this.convLineno(node, false);\r\n        if (commentSrc === '' && lineNo === '') {\r\n            return ';';\r\n        }\r\n        if (commentSrc === '') {\r\n            return ';' + lineNo + '\\n';\r\n        }\r\n        return ';' + lineNo + '//' + commentSrc + '\\n';\r\n    }\r\n    convReturn(node) {\r\n        // 関数の中であれば利用可能\r\n        if (this.varsSet.names.has('!関数')) {\r\n            throw NakoSyntaxError.fromNode('『戻る』がありますが、関数定義内のみで使用可能です。', node);\r\n        }\r\n        const lno = this.convLineno(node, false);\r\n        let value;\r\n        if (node.value) {\r\n            value = this._convGen(node.value, true);\r\n        }\r\n        else if (this.speedMode.invalidSore === 0) {\r\n            value = this.varname('それ');\r\n        }\r\n        else {\r\n            return lno + 'return;';\r\n        }\r\n        if (this.warnUndefinedReturnUserFunc === 0) {\r\n            return lno + `return ${value};`;\r\n        }\r\n        else {\r\n            const poolIndex = this.constPools.length;\r\n            this.constPools.push({\r\n                msg: 'ユーザ関数からundefinedが返されています',\r\n                file: node.file,\r\n                line: node.line\r\n            });\r\n            return lno + `return (__self.chk(${value}, ${poolIndex}));`;\r\n        }\r\n    }\r\n    convCheckLoop(node, cmd) {\r\n        // ループの中であれば利用可能\r\n        if (!this.flagLoop) {\r\n            const cmdj = (cmd === 'continue') ? '続ける' : '抜ける';\r\n            throw NakoSyntaxError.fromNode(`『${cmdj}』文がありますが、それは繰り返しの中で利用してください。`, node);\r\n        }\r\n        return this.convLineno(node) + cmd + ';';\r\n    }\r\n    convDefFuncCommon(node, name) {\r\n        // パフォーマンスモニタ:ユーザ関数のinjectの定義\r\n        let performanceMonitorInjectAtStart = '';\r\n        let performanceMonitorInjectAtEnd = '';\r\n        if (this.performanceMonitor.userFunction !== 0) {\r\n            let key = name;\r\n            if (!key) {\r\n                if (typeof this.performanceMonitor.mumeiId === 'undefined') {\r\n                    this.performanceMonitor.mumeiId = 0;\r\n                }\r\n                this.performanceMonitor.mumeiId++;\r\n                key = `anous_${this.performanceMonitor.mumeiId}`;\r\n            }\r\n            performanceMonitorInjectAtStart = 'const performanceMonitorEnd = (function (key, type) {\\n' +\r\n                'const uf_start = performance.now() * 1000;\\n' +\r\n                'return function () {\\n' +\r\n                'const el_time = performance.now() * 1000 - uf_start;\\n' +\r\n                'if (!__self.__performance_monitor) {\\n' +\r\n                '__self.__performance_monitor={};\\n' +\r\n                '__self.__performance_monitor[key] = { called:1, totel_usec: el_time, min_usec: el_time, max_usec: el_time, type: type };\\n' +\r\n                '} else if (!__self.__performance_monitor[key]) {\\n' +\r\n                '__self.__performance_monitor[key] = { called:1, totel_usec: el_time, min_usec: el_time, max_usec: el_time, type: type };\\n' +\r\n                '} else {\\n' +\r\n                '__self.__performance_monitor[key].called++;\\n' +\r\n                '__self.__performance_monitor[key].totel_usec+=el_time;\\n' +\r\n                'if(__self.__performance_monitor[key].min_usec>el_time){__self.__performance_monitor[key].min_usec=el_time;}\\n' +\r\n                'if(__self.__performance_monitor[key].max_usec<el_time){__self.__performance_monitor[key].max_usec=el_time;}\\n' +\r\n                `}};})('${key}', 'user');` +\r\n                'try {\\n';\r\n            performanceMonitorInjectAtEnd = '} finally { performanceMonitorEnd(); }\\n';\r\n        }\r\n        let variableDeclarations = '';\r\n        const popStack = '';\r\n        const initialNames = new Set();\r\n        if (this.speedMode.invalidSore === 0) {\r\n            initialNames.add('それ');\r\n        }\r\n        this.varsSet = { isFunction: true, names: initialNames, readonly: new Set() };\r\n        // ローカル変数をPUSHする\r\n        this.varslistSet.push(this.varsSet);\r\n        // JSの引数と引数をバインド\r\n        variableDeclarations += '  var 引数 = arguments;\\n';\r\n        // ローカル変数を生成\r\n        variableDeclarations += '  var __vars = {};\\n';\r\n        // 宣言済みの名前を保存\r\n        const varsDeclared = Array.from(this.varsSet.names.values());\r\n        let code = '';\r\n        // 引数をローカル変数に設定\r\n        const meta = (!name) ? node.meta : node.name.meta;\r\n        for (let i = 0; i < meta.varnames.length; i++) {\r\n            const word = meta.varnames[i];\r\n            if (this.warnUndefinedCalledUserFuncArgs === 0) {\r\n                code += `  ${this.varname(word)} = arguments[${i}];\\n`;\r\n            }\r\n            else if (name) {\r\n                code += `  ${this.varname(word)} = (function(a){if(a===undefined){__self.logger.warn('ユーザ関数(${name})の引数(${this.varname(word)})にundefinedが渡されました',{file:'${node.file}',line:${node.line}});};return a;})(arguments[${i}]);\\n`;\r\n            }\r\n            else {\r\n                code += `  ${this.varname(word)} = (function(a){if(a===undefined){__self.logger.warn('匿名関数の引数(${this.varname(word)})にundefinedが渡されました',{file:'${node.file}',line:${node.line}});};return a;})(arguments[${i}]);\\n`;\r\n            }\r\n            this.varsSet.names.add(word);\r\n        }\r\n        // 関数定義は、グローバル領域で。\r\n        if (name) {\r\n            this.usedFuncSet.add(name);\r\n            this.varslistSet[1].names.add(name);\r\n            if (this.nakoFuncList[name] === undefined) {\r\n                // 既に generate で作成済みのはず(念のため)\r\n                this.nakoFuncList[name] = {\r\n                    josi: node.name.meta.josi,\r\n                    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                    fn: () => { },\r\n                    type: 'func',\r\n                    asyncFn: false\r\n                };\r\n            }\r\n        }\r\n        // ブロックを解析\r\n        const oldUsedAsyncFn = this.usedAsyncFn;\r\n        this.usedAsyncFn = false || this.debugOption.useDebug;\r\n        const block = this._convGen(node.block, false);\r\n        code += block.split('\\n').map((line) => '  ' + line).join('\\n') + '\\n';\r\n        // 関数の最後に、変数「それ」をreturnするようにする\r\n        if (this.speedMode.invalidSore === 0) {\r\n            code += `  return (${this.varname('それ')});\\n`;\r\n        }\r\n        // パフォーマンスモニタ:ユーザ関数のinject\r\n        code += performanceMonitorInjectAtEnd;\r\n        // ブロックでasyncFnを使ったか\r\n        if (name && this.usedAsyncFn) {\r\n            this.nakoFuncList[name].asyncFn = true;\r\n        }\r\n        // 関数の末尾に、ローカル変数をPOP\r\n        // 関数内で定義されたローカル変数の宣言\r\n        for (const name of Array.from(this.varsSet.names.values())) {\r\n            if (!varsDeclared.includes(name)) {\r\n                if (NakoGen.isValidIdentifier(name)) {\r\n                    variableDeclarations += `  var ${name};\\n`;\r\n                }\r\n            }\r\n        }\r\n        if (this.speedMode.invalidSore === 0) {\r\n            if (NakoGen.isValidIdentifier('それ')) {\r\n                variableDeclarations += '  var それ = \\'\\';\\n';\r\n            }\r\n            else {\r\n                variableDeclarations += `  ${this.varname('それ')} = '';`;\r\n            }\r\n        }\r\n        // usedAsyncFnの値に応じて関数定義の方法を変更\r\n        const tof = (this.usedAsyncFn) ? topOfFunctionAsync : topOfFunction;\r\n        // 関数コード全体を構築\r\n        const lineInfo = '  ' + this.convLineno(node, true, 1) + '\\n';\r\n        code = tof + performanceMonitorInjectAtStart + variableDeclarations + lineInfo + code + popStack;\r\n        code += endOfFunction;\r\n        // 名前があれば、関数を登録する\r\n        if (name) {\r\n            this.nakoFuncList[name].fn = code;\r\n            this.nakoFuncList[name].asyncFn = this.usedAsyncFn;\r\n            meta.asyncFn = this.usedAsyncFn;\r\n        }\r\n        this.usedAsyncFn = oldUsedAsyncFn; // 以前の値を戻す\r\n        this.varslistSet.pop();\r\n        this.varsSet = this.varslistSet[this.varslistSet.length - 1];\r\n        if (name) {\r\n            this.__self.__varslist[1][name] = code;\r\n        }\r\n        return code;\r\n    }\r\n    convDefTest(node) {\r\n        const name = node.name.value;\r\n        let code = `__tests.push({ name: '${name}', f: () => {\\n`;\r\n        // ブロックを解析\r\n        const block = this._convGen(node.block, false);\r\n        code += `   ${block}\\n` +\r\n            '}});';\r\n        this.nakoTestFuncs[name] = {\r\n            josi: node.name.meta.josi,\r\n            fn: code,\r\n            type: 'test_func'\r\n        };\r\n        // ★この時点ではテストコードを生成しない★\r\n        // プログラム冒頭でコード生成時にテストの定義を行う\r\n        return '';\r\n    }\r\n    convDefFunc(node) {\r\n        // ※ [関数定義のメモ]\r\n        // ※ 関数の定義はプログラムの冒頭に移される。\r\n        // ※ そのため、生成されたコードはここでは返さない\r\n        // ※ registerFunction を参照\r\n        if (!node.name) {\r\n            return '';\r\n        }\r\n        const name = NakoGen.getFuncName(node.name.value);\r\n        this.convDefFuncCommon(node, name);\r\n        return '';\r\n    }\r\n    convFuncObj(node) {\r\n        return this.convDefFuncCommon(node, '');\r\n    }\r\n    convJsonObj(node) {\r\n        const list = node.value;\r\n        const codelist = list.map((e) => {\r\n            const key = this._convGen(e.key, true);\r\n            const val = this._convGen(e.value, true);\r\n            return `${key}:${val}`;\r\n        });\r\n        return '{' + codelist.join(',') + '}';\r\n    }\r\n    convJsonArray(node) {\r\n        const list = node.value;\r\n        const codelist = list.map((e) => {\r\n            return this._convGen(e, true);\r\n        });\r\n        return '[' + codelist.join(',') + ']';\r\n    }\r\n    convRefArray(node) {\r\n        const name = this._convGen(node.name, true);\r\n        const list = node.index;\r\n        let code = name;\r\n        if (!list) {\r\n            return code;\r\n        }\r\n        for (let i = 0; i < list.length; i++) {\r\n            const idx = this._convGen(list[i], true);\r\n            code += '[' + idx + ']';\r\n        }\r\n        return code;\r\n    }\r\n    convLetArray(node) {\r\n        const name = this._convGen(node.name, true);\r\n        const list = node.index || [];\r\n        let codeInit = '';\r\n        let code = name;\r\n        let codeArray = '';\r\n        // codeInit?\r\n        if (node.checkInit) {\r\n            const arrayDefCode = '[0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0]';\r\n            codeInit += `\\n/*配列初期化*/if (!(${name} instanceof Array)) { ${name} = ${arrayDefCode}; /*console.log('初期化:${name}')*/ };`;\r\n            for (let i = 0; i < list.length - 1; i++) {\r\n                const idx = this._convGen(list[i], true);\r\n                codeArray += `[${idx}]`;\r\n                codeInit += `\\n/*配列初期化${i}*/if (!(${name}${codeArray} instanceof Array)) { ${name}${codeArray} = ${arrayDefCode}; };`;\r\n                // codeInit += `\\n/*配列初期化${i}*/if (!(${name}${codeArray} instanceof Array)) { ${name}${codeArray} = ${arrayDefCode}; console.log('初期化:${i}:${name}${codeArray}',JSON.stringify(${name})) }; `\r\n            }\r\n            codeInit += '\\n';\r\n        }\r\n        // array\r\n        for (let i = 0; i < list.length; i++) {\r\n            const idx = this._convGen(list[i], true);\r\n            code += '[' + idx + ']';\r\n        }\r\n        // value\r\n        let value = null;\r\n        if (this.speedMode.invalidSore === 0) {\r\n            value = this.varname('それ');\r\n        }\r\n        if (node.value) {\r\n            value = this._convGen(node.value, true);\r\n        }\r\n        if (value == null) {\r\n            throw NakoSyntaxError.fromNode('代入する先の変数名がありません。', node);\r\n        }\r\n        code += ' = ' + value + ';\\n';\r\n        // generate code\r\n        const src = this.convLineno(node, false) + codeInit + code;\r\n        return src;\r\n    }\r\n    convGenLoop(node) {\r\n        const tmpflag = this.flagLoop;\r\n        this.flagLoop = true;\r\n        try {\r\n            return this._convGen(node, false);\r\n        }\r\n        finally {\r\n            this.flagLoop = tmpflag;\r\n        }\r\n    }\r\n    convFor(node) {\r\n        // ループ変数について\r\n        let word;\r\n        if (node.word !== null) { // ループ変数を使う時\r\n            const varName = node.word.value; // todo: Forの最初のパラメータが Token か Astか確認\r\n            this.varsSet.names.add(varName);\r\n            word = this.varname(varName);\r\n        }\r\n        else {\r\n            this.varsSet.names.add('dummy');\r\n            word = this.varname('dummy');\r\n        }\r\n        const idLoop = this.loopId++;\r\n        const varI = `$nako_i${idLoop}`;\r\n        // ループ条件を確認\r\n        const kara = this._convGen(node.from, true);\r\n        const made = this._convGen(node.to, true);\r\n        const flagDown = node.flagDown;\r\n        let inc = '1';\r\n        if (node.inc && node.inc !== 'null') {\r\n            inc = this._convGen(node.inc, true);\r\n        }\r\n        // ループ内のブロック内容を得る\r\n        const block = this.convGenLoop(node.block);\r\n        // ループ条件を変数に入れる用\r\n        const varFrom = `$nako_from${idLoop}`;\r\n        const varTo = `$nako_to${idLoop}`;\r\n        let sorePrefex = '';\r\n        if (this.speedMode.invalidSore === 0) {\r\n            sorePrefex = `${this.varname('それ')} = `;\r\n        }\r\n        const code = `\\n//[FOR id=${idLoop}]\\n` +\r\n            `const ${varFrom} = ${kara};\\n` +\r\n            `const ${varTo} = ${made};\\n` +\r\n            `if (${varFrom} <= ${varTo}) { // up\\n` +\r\n            `  for (let ${varI} = ${varFrom}; ${varI} <= ${varTo}; ${varI}+= ${inc}) {\\n` +\r\n            `    ${sorePrefex}${word} = ${varI};\\n` +\r\n            `    ${block}\\n` +\r\n            '  };\\n' +\r\n            '} else { // down\\n' +\r\n            `  if (${flagDown}) {` +\r\n            `    for (let ${varI} = ${varFrom}; ${varI} >= ${varTo}; ${varI}-= ${inc}) {\\n` +\r\n            `      ${sorePrefex}${word} = ${varI};` + '\\n' +\r\n            `      ${block}\\n` +\r\n            '    }\\n' +\r\n            '  };\\n' +\r\n            `};\\n//[/FOR id=${idLoop}]\\n`;\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convForeach(node) {\r\n        let target;\r\n        if (node.target === null) {\r\n            if (this.speedMode.invalidSore === 0) {\r\n                target = this.varname('それ');\r\n            }\r\n            else {\r\n                throw NakoSyntaxError.fromNode('『反復』の対象がありません。', node);\r\n            }\r\n        }\r\n        else {\r\n            target = this._convGen(node.target, true);\r\n        }\r\n        // blockより早く変数を定義する必要がある\r\n        let nameS = '__v0[\"対象\"]';\r\n        if (node.name) {\r\n            nameS = this.varname(node.name.value);\r\n            this.varsSet.names.add(node.name.value);\r\n        }\r\n        const block = this.convGenLoop(node.block);\r\n        const id = this.loopId++;\r\n        const key = '__v0[\"対象キー\"]';\r\n        let sorePrefex = '';\r\n        if (this.speedMode.invalidSore === 0) {\r\n            sorePrefex = `${this.varname('それ')} = `;\r\n        }\r\n        const code = `let $nako_foreach_v${id}=${target};\\n` +\r\n            `for (let $nako_i${id} in $nako_foreach_v${id})` + '{\\n' +\r\n            `  if ($nako_foreach_v${id}.hasOwnProperty($nako_i${id})) {\\n` +\r\n            `    ${nameS} = ${sorePrefex}$nako_foreach_v${id}[$nako_i${id}];` + '\\n' +\r\n            `    ${key} = $nako_i${id};\\n` +\r\n            `    ${block}\\n` +\r\n            '  }\\n' +\r\n            '};\\n';\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convRepeatTimes(node) {\r\n        const id = this.loopId++;\r\n        const value = this._convGen(node.value, true);\r\n        const block = this.convGenLoop(node.block);\r\n        const kaisu = '__v0[\"回数\"]';\r\n        let sorePrefex = '';\r\n        if (this.speedMode.invalidSore === 0) {\r\n            sorePrefex = `${this.varname('それ')} = `;\r\n        }\r\n        const code = `let $nako_times_v${id} = ${value};\\n` +\r\n            `for(var $nako_i${id} = 1; $nako_i${id} <= $nako_times_v${id}; $nako_i${id}++)` + '{\\n' +\r\n            `  ${sorePrefex}${kaisu} = $nako_i${id};` + '\\n' +\r\n            '  ' + block + '\\n}\\n';\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     */\r\n    convSpeedMode(node, isExpression) {\r\n        if (!node.options) {\r\n            return '';\r\n        }\r\n        const prev = { ...this.speedMode };\r\n        if (node.options['行番号無し']) {\r\n            this.speedMode.lineNumbers++;\r\n        }\r\n        if (node.options['暗黙の型変換無し']) {\r\n            this.speedMode.implicitTypeCasting++;\r\n        }\r\n        if (node.options['強制ピュア']) {\r\n            this.speedMode.forcePure++;\r\n        }\r\n        if (node.options['それ無効']) {\r\n            this.speedMode.invalidSore++;\r\n        }\r\n        try {\r\n            return this._convGen(node.block, isExpression);\r\n        }\r\n        finally {\r\n            this.speedMode = prev;\r\n        }\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     */\r\n    convPerformanceMonitor(node, isExpression) {\r\n        const prev = { ...this.performanceMonitor };\r\n        if (!node.options) {\r\n            return '';\r\n        }\r\n        if (node.options['ユーザ関数']) {\r\n            this.performanceMonitor.userFunction++;\r\n        }\r\n        if (node.options['システム関数本体']) {\r\n            this.performanceMonitor.systemFunctionBody++;\r\n        }\r\n        if (node.options['システム関数']) {\r\n            this.performanceMonitor.systemFunction++;\r\n        }\r\n        try {\r\n            return this._convGen(node.block, isExpression);\r\n        }\r\n        finally {\r\n            this.performanceMonitor = prev;\r\n        }\r\n    }\r\n    convWhile(node) {\r\n        const cond = this._convGen(node.cond, true);\r\n        const block = this.convGenLoop(node.block);\r\n        const code = `while (${cond})` + '{\\n' +\r\n            `  ${block}` + '\\n' +\r\n            '}\\n';\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convAtohantei(node) {\r\n        const id = this.loopId++;\r\n        const varId = `$nako_i${id}`;\r\n        const cond = this._convGen(node.cond, true);\r\n        const block = this.convGenLoop(node.block);\r\n        const code = 'for(;;) {\\n' +\r\n            `  ${block}\\n` +\r\n            `  let ${varId} = ${cond};\\n` +\r\n            `  if (${varId}) { continue } else { break }\\n` +\r\n            '}\\n\\n';\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convSwitch(node) {\r\n        const value = this._convGen(node.value, true);\r\n        const cases = node.cases || [];\r\n        let body = '';\r\n        for (let i = 0; i < cases.length; i++) {\r\n            const cvalue = cases[i][0];\r\n            const cblock = this.convGenLoop(cases[i][1]);\r\n            if (cvalue.type === '違えば') {\r\n                body += '  default:\\n';\r\n            }\r\n            else {\r\n                const cvalueCode = this._convGen(cvalue, true);\r\n                body += `  case ${cvalueCode}:\\n`;\r\n            }\r\n            body += `    ${cblock}\\n` +\r\n                '    break\\n';\r\n        }\r\n        const code = `switch (${value})` + '{\\n' +\r\n            `${body}` + '\\n' +\r\n            '}\\n';\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convIf(node) {\r\n        const expr = this._convGen(node.expr, true);\r\n        const block = this._convGen(node.block, false);\r\n        const falseBlock = (node.false_block === null)\r\n            ? ''\r\n            : 'else {' + this._convGen(node.false_block, false) + '};\\n';\r\n        return this.convLineno(node, false) +\r\n            `if (${expr}) {\\n  ${block}\\n}` + falseBlock + ';\\n';\r\n    }\r\n    convTikuji(node) {\r\n        // #1164 により「逐次実行」構文は近いうちに廃止する\r\n        const pid = this.loopId++;\r\n        // gen tikuji blocks\r\n        const curName = `__tikuji${pid}`;\r\n        let code = `const ${curName} = []\\n`;\r\n        const blocks = (node.blocks) ? node.blocks : [];\r\n        for (let i = 0; i < blocks.length; i++) {\r\n            const block = this._convGen(blocks[i], false).replace(/\\s+$/, '') + '\\n';\r\n            const blockLineNo = this.convLineno(blocks[i], true);\r\n            const blockCode = `${curName}.push(async function(resolve, reject) {\\n` +\r\n                '  __self.resolve = resolve;\\n' +\r\n                '  __self.reject = reject;\\n' +\r\n                '  __self.resolveCount = 0;\\n' +\r\n                `  ${blockLineNo}\\n` +\r\n                `  ${block}` +\r\n                '  if (__self.resolveCount === 0) resolve();\\n' +\r\n                // eslint-disable-next-line no-template-curly-in-string\r\n                '}); // end of tikuji__${pid}[{$i}]\\n';\r\n            code += blockCode;\r\n        }\r\n        code += `// end of ${curName} \\n`;\r\n        // gen error block\r\n        let errorCode = `  ${curName}.splice(0);\\n` + // clear\r\n            '  __v0[\"エラーメッセージ\"]=errMsg;\\n';\r\n        if (node.errorBlock != null) {\r\n            const errBlock = this._convGen(node.errorBlock, false).replace(/\\s+$/, '') + '\\n';\r\n            errorCode += errBlock;\r\n        }\r\n        code += `const ${curName}__reject = function(errMsg){\\n${errorCode}};\\n`;\r\n        // gen run block\r\n        code += '__self.resolve = undefined;\\n';\r\n        code += `const ${curName}__resolve = function(){\\n`;\r\n        code += '  setTimeout(async function(){\\n';\r\n        code += `    if (${curName}.length == 0) {return}\\n`;\r\n        code += `    const f = ${curName}.shift()\\n`;\r\n        code += `    await f(${curName}__resolve, ${curName}__reject);\\n`;\r\n        code += '  }, 0);\\n';\r\n        code += '};\\n';\r\n        code += `${curName}__resolve()\\n`;\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convFuncGetArgsCalcType(_funcName, _func, node) {\r\n        const args = [];\r\n        const opts = {};\r\n        const nodeArgs = (node.args) ? node.args : [];\r\n        for (let i = 0; i < nodeArgs.length; i++) {\r\n            const arg = nodeArgs[i];\r\n            if (i === 0 && arg === null && this.speedMode.invalidSore === 0) {\r\n                args.push(this.varname('それ'));\r\n                opts.sore = true;\r\n            }\r\n            else {\r\n                args.push(this._convGen(arg, true));\r\n            }\r\n        }\r\n        return [args, opts];\r\n    }\r\n    getPluginList() {\r\n        const r = [];\r\n        for (const name in this.__self.__module) {\r\n            r.push(name);\r\n        }\r\n        return r;\r\n    }\r\n    /**\r\n     * 関数の呼び出し\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     * @returns string コード\r\n     */\r\n    convCallFunc(node, isExpression) {\r\n        const funcName = NakoGen.getFuncName(node.name);\r\n        const res = this.findVar(funcName);\r\n        if (res === null) {\r\n            throw NakoSyntaxError.fromNode(`関数『${funcName}』が見当たりません。有効プラグイン=[` + this.getPluginList().join(', ') + ']', node);\r\n        }\r\n        // どの関数を呼び出すのか関数を特定する\r\n        let func;\r\n        if (res.i === 0) { // plugin function\r\n            func = this.__self.getFunc(funcName);\r\n            if (!func) {\r\n                throw new Error(`[System Error] 関数「${funcName}」NakoCompiler.nakoFuncList の不整合があります。`);\r\n            }\r\n            if (func.type !== 'func') {\r\n                throw NakoSyntaxError.fromNode(`『${funcName}』は関数ではありません。`, node);\r\n            }\r\n        }\r\n        else {\r\n            func = this.nakoFuncList[funcName];\r\n            // 無名関数の可能性\r\n            if (func === undefined) {\r\n                func = { return_none: false };\r\n            }\r\n        }\r\n        // 関数の参照渡しか？\r\n        if (node.type === 'func_pointer') {\r\n            return res.js;\r\n        }\r\n        // 関数の参照渡しでない場合\r\n        // 関数定義より助詞を一つずつ調べる\r\n        const argsInfo = this.convFuncGetArgsCalcType(funcName, func, node);\r\n        const args = argsInfo[0];\r\n        const argsOpts = argsInfo[1];\r\n        // function\r\n        this.usedFuncSet.add(funcName);\r\n        if (funcName === '名前空間設定') {\r\n            return `\\n// --- 名前空間(${args[0]}) ---\\n__varslist[0]['名前空間設定'](${args[0]}, __self);__self.__modName=${args[0]};\\n`;\r\n        }\r\n        else if (funcName === 'プラグイン名設定') {\r\n            return `\\n__varslist[0]['プラグイン名設定'](${args[0]}, __self);\\n`;\r\n        }\r\n        // 関数呼び出しで、引数の末尾にthisを追加する-システム情報を参照するため\r\n        args.push('__self');\r\n        let funcDef = 'function';\r\n        let funcBegin = '';\r\n        let funcEnd = '';\r\n        // setter?\r\n        if (node.setter) {\r\n            funcBegin += ';__self.isSetter = true;\\n';\r\n            funcEnd += ';__self.isSetter = false;\\n';\r\n        }\r\n        // 関数内 (__varslist.length > 3) からプラグイン関数 (res.i === 0) を呼び出すとき、 そのプラグイン関数がpureでなければ\r\n        // 呼び出しの直前に全てのローカル変数をthis.__localsに入れる。\r\n        if (res.i === 0 && this.varslistSet.length > 3 && func.pure !== true && this.speedMode.forcePure === 0) { // undefinedはfalseとみなす\r\n            // 展開されたローカル変数の列挙\r\n            const localVars = [];\r\n            for (const name of Array.from(this.varsSet.names.values())) {\r\n                if (NakoGen.isValidIdentifier(name)) {\r\n                    localVars.push({ str: JSON.stringify(name), js: this.varname(name) });\r\n                }\r\n            }\r\n            // --- 実行前 ---\r\n            // 全ての展開されていないローカル変数を __self.__locals にコピーする\r\n            funcBegin += '__self.__locals = __vars;\\n';\r\n            // 全ての展開されたローカル変数を __self.__locals に保存する\r\n            for (const v of localVars) {\r\n                funcBegin += `__self.__locals[${v.str}] = ${v.js};\\n`;\r\n            }\r\n            // --- 実行後 ---\r\n            // 全ての展開されたローカル変数を __self.__locals から受け取る\r\n            // 「それ」は関数の実行結果を受け取るために使うためスキップ。\r\n            for (const v of localVars) {\r\n                if (v.js !== 'それ') {\r\n                    funcEnd += `${v.js} = __self.__locals[${v.str}];\\n`;\r\n                }\r\n            }\r\n        }\r\n        // 変数「それ」が補完されていることをヒントとして出力\r\n        if (argsOpts.sore) {\r\n            funcBegin += '/*[sore]*/';\r\n        }\r\n        const indent = (text, n) => {\r\n            let result = '';\r\n            for (const line of text.split('\\n')) {\r\n                if (line !== '') {\r\n                    result += '  '.repeat(n) + line + '\\n';\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        // 引数チェックの例外 #1260\r\n        const noCheckFuncs = { 'TYPEOF': true, '変数型確認': true };\r\n        // 関数呼び出しコードの構築\r\n        let argsCode;\r\n        if ((this.warnUndefinedCallingUserFunc === 0 && res.i !== 0) || (this.warnUndefinedCallingSystemFunc === 0 && res.i === 0)) {\r\n            argsCode = args.join(',');\r\n        }\r\n        else {\r\n            const argsA = [];\r\n            args.forEach((arg) => {\r\n                if (arg === '__self' || noCheckFuncs[funcName] === true) { // #1260\r\n                    argsA.push(`${arg}`);\r\n                }\r\n                else {\r\n                    // 引数のundefinedチェックのコードを入れる\r\n                    const poolIndex = this.constPools.length;\r\n                    if (res.i === 0) {\r\n                        this.constPools.push({\r\n                            msg: `命令『${funcName}』の引数にundefinedを渡しています。`,\r\n                            file: node.file,\r\n                            line: node.line\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.constPools.push({\r\n                            msg: `ユーザ関数『『${funcName}』の引数にundefinedを渡しています。`,\r\n                            file: node.file,\r\n                            line: node.line\r\n                        });\r\n                    }\r\n                    // argが空になる対策 #1315\r\n                    const argStr = (arg === '') ? '\"\"' : arg;\r\n                    argsA.push(`(__self.chk(${argStr}, ${poolIndex}))`);\r\n                }\r\n            });\r\n            argsCode = argsA.join(', ');\r\n        }\r\n        let funcCall = `${res.js}(${argsCode})`;\r\n        if (func.asyncFn) {\r\n            funcDef = `async ${funcDef}`;\r\n            funcCall = `await ${funcCall}`;\r\n            this.numAsyncFn++;\r\n            this.usedAsyncFn = true;\r\n        }\r\n        if (res.i === 0 && this.performanceMonitor.systemFunctionBody !== 0) {\r\n            let key = funcName;\r\n            if (!key) {\r\n                if (typeof this.performanceMonitor.mumeiId === 'undefined') {\r\n                    this.performanceMonitor.mumeiId = 0;\r\n                }\r\n                this.performanceMonitor.mumeiId++;\r\n                key = `anous_${this.performanceMonitor.mumeiId}`;\r\n            }\r\n            funcCall = `(${funcDef} (key, type) {\\n` +\r\n                'const sbf_start = performance.now() * 1000;\\n' +\r\n                'try {\\n' +\r\n                'return ' + funcCall + ';\\n' +\r\n                '} finally {\\n' +\r\n                'const sbl_time = performance.now() * 1000 - sbf_start;\\n' +\r\n                'if (!__self.__performance_monitor) {\\n' +\r\n                '__self.__performance_monitor={};\\n' +\r\n                '__self.__performance_monitor[key] = { called:1, totel_usec: sbl_time, min_usec: sbl_time, max_usec: sbl_time, type: type };\\n' +\r\n                '} else if (!__self.__performance_monitor[key]) {\\n' +\r\n                '__self.__performance_monitor[key] = { called:1, totel_usec: sbl_time, min_usec: sbl_time, max_usec: sbl_time, type: type };\\n' +\r\n                '} else {\\n' +\r\n                '__self.__performance_monitor[key].called++;\\n' +\r\n                '__self.__performance_monitor[key].totel_usec+=sbl_time;\\n' +\r\n                'if(__self.__performance_monitor[key].min_usec>sbl_time){__self.__performance_monitor[key].min_usec=sbl_time;}\\n' +\r\n                'if(__self.__performance_monitor[key].max_usec<sbl_time){__self.__performance_monitor[key].max_usec=sbl_time;}\\n' +\r\n                `}}})('${funcName}_body', 'sysbody')\\n`;\r\n        }\r\n        let code = '';\r\n        if (func.return_none) {\r\n            // 戻り値のない関数の場合\r\n            if (funcEnd === '') {\r\n                if (funcBegin === '') {\r\n                    code = `${funcCall};\\n`;\r\n                }\r\n                else {\r\n                    code = `${funcBegin} ${funcCall};\\n`;\r\n                }\r\n            }\r\n            else {\r\n                code = `${funcBegin}try {\\n${indent(funcCall, 1)};\\n} finally {\\n${indent(funcEnd, 1)}}\\n`;\r\n            }\r\n        }\r\n        else {\r\n            // 戻り値のある関数の場合\r\n            let sorePrefex = '';\r\n            if (this.speedMode.invalidSore === 0) {\r\n                sorePrefex = `${this.varname('それ')} = `;\r\n            }\r\n            if (funcBegin === '' && funcEnd === '') {\r\n                code = `(${sorePrefex}${funcCall})`;\r\n            }\r\n            else {\r\n                if (funcEnd === '') {\r\n                    code = `(${funcDef}(){\\n${indent(`${funcBegin};\\nreturn ${sorePrefex} ${funcCall}`, 1)}}).call(this)`;\r\n                }\r\n                else {\r\n                    code = `(${funcDef}(){\\n${indent(`${funcBegin}try {\\n${indent(`return ${sorePrefex}${funcCall};`, 1)}\\n} finally {\\n${indent(funcEnd, 1)}}`, 1)}}).call(this)`;\r\n                }\r\n            }\r\n            // ...して\r\n            if (node.josi === 'して' || (node.josi === '' && !isExpression)) {\r\n                code += ';\\n';\r\n            }\r\n        }\r\n        if (res.i === 0 && this.performanceMonitor.systemFunction !== 0) {\r\n            code = '(function (key, type) {\\n' +\r\n                'const sf_start = performance.now() * 1000;\\n' +\r\n                'try {\\n' +\r\n                'return ' + code + ';\\n' +\r\n                '} finally {\\n' +\r\n                'const sl_time = performance.now() * 1000 - sf_start;\\n' +\r\n                'if (!__self.__performance_monitor) {\\n' +\r\n                '__self.__performance_monitor={};\\n' +\r\n                '__self.__performance_monitor[key] = { called:1, totel_usec: sl_time, min_usec: sl_time, max_usec: sl_time, type: type };\\n' +\r\n                '} else if (!__self.__performance_monitor[key]) {\\n' +\r\n                '__self.__performance_monitor[key] = { called:1, totel_usec: sl_time, min_usec: sl_time, max_usec: sl_time, type: type };\\n' +\r\n                '} else {\\n' +\r\n                '__self.__performance_monitor[key].called++;\\n' +\r\n                '__self.__performance_monitor[key].totel_usec+=sl_time;\\n' +\r\n                'if(__self.__performance_monitor[key].min_usec>sl_time){__self.__performance_monitor[key].min_usec=sl_time;}\\n' +\r\n                'if(__self.__performance_monitor[key].max_usec<sl_time){__self.__performance_monitor[key].max_usec=sl_time;}\\n' +\r\n                `}}})('${funcName}_sys', 'system')\\n`;\r\n        }\r\n        return code;\r\n    }\r\n    convRenbun(node) {\r\n        const right = this._convGen(node.right, true);\r\n        const left = this._convGen(node.left, false);\r\n        this.numAsyncFn++;\r\n        this.usedAsyncFn = true;\r\n        return `/*連文*/await (async function(){ ${left}; return ${right} }).call(this)`;\r\n    }\r\n    convOp(node) {\r\n        // トークン名からJS演算子への変換 - 単純な変換が可能なものをここで定義\r\n        const OP_TBL = {\r\n            '&': '+\"\"+',\r\n            eq: '==',\r\n            noteq: '!=',\r\n            '===': '===',\r\n            '!==': '!==',\r\n            gt: '>',\r\n            lt: '<',\r\n            gteq: '>=',\r\n            lteq: '<=',\r\n            and: '&&',\r\n            or: '||',\r\n            shift_l: '<<',\r\n            shift_r: '>>',\r\n            shift_r0: '>>>',\r\n            '÷': '/'\r\n        };\r\n        let op = node.operator || ''; // 演算子\r\n        let right = this._convGen(node.right, true);\r\n        let left = this._convGen(node.left, true);\r\n        if (op === '+' && this.speedMode.implicitTypeCasting === 0) {\r\n            if (node.left && node.left.type !== 'number') {\r\n                left = `parseFloat(${left})`;\r\n            }\r\n            if (node.right && node.right.type !== 'number') {\r\n                right = `parseFloat(${right})`;\r\n            }\r\n        }\r\n        // 階乗\r\n        if (op === '^' || op === '**') {\r\n            return `(Math.pow(${left}, ${right}))`;\r\n        }\r\n        // 整数の割り算 #1152\r\n        if (op === '÷÷') {\r\n            return `(Math.floor(${left} / ${right}))`;\r\n        }\r\n        // 一般的なオペレータに変換\r\n        if (OP_TBL[op]) {\r\n            op = OP_TBL[op];\r\n        }\r\n        //\r\n        return `(${left} ${op} ${right})`;\r\n    }\r\n    convInc(node) {\r\n        // もし値が省略されていたら、変数「それ」に代入する\r\n        let value = null;\r\n        if (this.speedMode.invalidSore === 0) {\r\n            value = this.varname('それ');\r\n        }\r\n        if (node.value) {\r\n            value = this._convGen(node.value, true);\r\n        }\r\n        if (value == null) {\r\n            throw NakoSyntaxError.fromNode('加算する先の変数名がありません。', node);\r\n        }\r\n        // 配列への代入か(core#86)\r\n        let code = '';\r\n        let jsName;\r\n        const nodeName = node.name;\r\n        if (nodeName.type === '配列参照') {\r\n            jsName = this.convRefArray(nodeName);\r\n        }\r\n        else {\r\n            // 変数名\r\n            const name = nodeName.value;\r\n            let res = this.findVar(name);\r\n            if (res === null) {\r\n                this.varsSet.names.add(name);\r\n                res = this.findVar(name);\r\n                if (!res) {\r\n                    throw new Error('『増』または『減』で変数が見当たりません。');\r\n                }\r\n            }\r\n            jsName = res.js;\r\n        }\r\n        // 自動初期化するか\r\n        code += `if (typeof(${jsName}) === 'undefined') { ${jsName} = 0; }`;\r\n        code += `${jsName} += ${value}`;\r\n        return ';' + this.convLineno(node, false) + code + '\\n';\r\n    }\r\n    convLet(node) {\r\n        // もし値が省略されていたら、変数「それ」に代入する\r\n        let value = null;\r\n        if (this.speedMode.invalidSore === 0) {\r\n            value = this.varname('それ');\r\n        }\r\n        if (node.value) {\r\n            value = this._convGen(node.value, true);\r\n        }\r\n        if (value == null) {\r\n            throw NakoSyntaxError.fromNode('代入する先の変数名がありません。', node);\r\n        }\r\n        // 変数名\r\n        const name = node.name.value;\r\n        const res = this.findVar(name);\r\n        let code = '';\r\n        if (res === null) {\r\n            this.varsSet.names.add(name);\r\n            code = `${this.varname(name)} = ${value};`;\r\n        }\r\n        else {\r\n            // 定数ならエラーを出す\r\n            if (this.varslistSet[res.i].readonly.has(name)) {\r\n                throw NakoSyntaxError.fromNode(`定数『${name}』は既に定義済みなので、値を代入することはできません。`, node);\r\n            }\r\n            code = `${res.js} = ${value};`;\r\n        }\r\n        return ';' + this.convLineno(node, false) + code + '\\n';\r\n    }\r\n    convDefLocalVar(node) {\r\n        const value = (node.value === null) ? 'null' : this._convGen(node.value, true);\r\n        const name = node.name.value;\r\n        const vtype = node.vartype; // 変数 or 定数\r\n        // 二重定義？\r\n        if (this.varsSet.names.has(name)) {\r\n            throw NakoSyntaxError.fromNode(`${vtype}『${name}』の二重定義はできません。`, node);\r\n        }\r\n        //\r\n        this.varsSet.names.add(name);\r\n        if (vtype === '定数') {\r\n            this.varsSet.readonly.add(name);\r\n        }\r\n        const code = `${this.varname(name)}=${value};\\n`;\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    // #563 複数変数への代入\r\n    convDefLocalVarlist(node) {\r\n        let code = '';\r\n        const vtype = node.vartype; // 変数 or 定数\r\n        const value = (node.value === null) ? 'null' : this._convGen(node.value, true);\r\n        this.loopId++;\r\n        const varI = `$nako_i${this.loopId}`;\r\n        code += `${varI}=${value}\\n`;\r\n        code += `if (!(${varI} instanceof Array)) { ${varI}=[${varI}] }\\n`;\r\n        const names = (node.names) ? node.names : [];\r\n        for (let i = 0; i < names.length; i++) {\r\n            const nameObj = names[i];\r\n            const name = nameObj.value;\r\n            // 二重定義？\r\n            if (this.varsSet.names.has(name)) {\r\n                // 複数変数文では、二重定義も許容する #1027\r\n                // throw NakoSyntaxError.fromNode(`${vtype}『${name}』の二重定義はできません。`, node)\r\n            }\r\n            this.varsSet.names.add(name);\r\n            if (vtype === '定数') {\r\n                this.varsSet.readonly.add(name);\r\n            }\r\n            const vname = this.varname(name);\r\n            code += `${vname}=${varI}[${i}];\\n`;\r\n        }\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convString(node) {\r\n        let value = '' + node.value;\r\n        const mode = node.mode;\r\n        value = value.replace(/\\\\/g, '\\\\\\\\');\r\n        value = value.replace(/\"/g, '\\\\\"');\r\n        value = value.replace(/\\r/g, '\\\\r');\r\n        value = value.replace(/\\n/g, '\\\\n');\r\n        if (mode === 'ex') {\r\n            const rf = (a, name) => {\r\n                return '\"+' + this.genVar(name, node) + '+\"';\r\n            };\r\n            value = value.replace(/\\{(.+?)\\}/g, rf);\r\n            value = value.replace(/｛(.+?)｝/g, rf);\r\n        }\r\n        return '\"' + value + '\"';\r\n    }\r\n    convTryExcept(node) {\r\n        const block = this._convGen(node.block, false);\r\n        const errBlock = this._convGen(node.errBlock, false);\r\n        return this.convLineno(node, false) +\r\n            `try {\\n${block}\\n} catch (e) {\\n` +\r\n            '  __v0[\"エラーメッセージ\"] = e.message;\\n' +\r\n            ';\\n' +\r\n            `${errBlock}}\\n`;\r\n    }\r\n    getUsedFuncSet() {\r\n        return this.usedFuncSet;\r\n    }\r\n    getPluginInitCode() {\r\n        // プラグインの初期化関数を実行する\r\n        let code = '';\r\n        let pluginCode = '';\r\n        for (const name in this.__self.__module) {\r\n            const initkey = `!${name}:初期化`;\r\n            if (this.varslistSet[0].names.has(initkey)) {\r\n                this.usedFuncSet.add(`!${name}:初期化`);\r\n                pluginCode += `__v0[\"!${name}:初期化\"](__self);\\n`;\r\n            }\r\n        }\r\n        if (pluginCode !== '') {\r\n            code += '__v0.line=\\'l0:プラグインの初期化\\';\\n' + pluginCode;\r\n        }\r\n        return code;\r\n    }\r\n}\r\n/**\r\n * @param com\r\n * @param ast\r\n * @param opt\r\n */\r\nexport function generateJS(com, ast, opt) {\r\n    // NakoGenのインスタンスを作成\r\n    const gen = new NakoGen(com);\r\n    // ※ [関数定義に関するコード生成のヒント]\r\n    // ※ 関数の名前だけを(1)で登録して、(2)で実際に関数のコードを生成する。\r\n    // ※ ただし(2)では生成するだけなので、(3)でプログラム冒頭に関数定義のコードを記述する。\r\n    // この順番を変えることはできない (グローバル変数が認識できなくなったり、関数定義のタイミングがずれる)\r\n    // (1) ユーザー定義関数をシステムに登録する\r\n    gen.registerFunction(ast);\r\n    // (2) JSコードを生成する\r\n    let js = gen.convGen(ast, opt);\r\n    // (3) JSコードを実行するための事前ヘッダ部分の生成\r\n    const jsInit = gen.getDefFuncCode(com, opt);\r\n    // ランダムな関数名を生成\r\n    const funcID = '' + (new Date()).getTime() + '_' + Math.floor(0xFFFFFFFF * Math.random());\r\n    // テストの実行\r\n    if (js && opt.isTest) {\r\n        js += '\\n__self._runTests(__tests);\\n';\r\n    }\r\n    // async method\r\n    if (gen.numAsyncFn > 0 || gen.debugOption.useDebug) {\r\n        const asyncMain = '__eval_nako3async_' + funcID + '__';\r\n        js = `\r\n// --------------------------------------------------\r\n// <nadesiko3::gen::async id=\"${funcID}\" times=\"${gen.numAsyncFn}\">\r\nasync function ${asyncMain}(self) {\r\n${jsInit}\r\n${js}\r\n} // end of ${asyncMain}\r\n${asyncMain}.call(self, self)\r\n.then(() => {\r\n  // ok\r\n})\r\n.catch(err => {\r\n  if (err.message === '__終わる__') { return }\r\n  self.numFailures++\r\n  // send errors to logger\r\n  let rterr = self.logger.runtimeError(err, self.__v0.line)\r\n  self.logger.error(rterr)\r\n})\r\n// </nadesiko3::gen::async id=\"${funcID}\">\r\n// --------------------------------------------------\r\n`;\r\n    }\r\n    else {\r\n        const syncMain = '__eval_nako3sync_' + funcID + '__';\r\n        js = `\r\n// --------------------------------------------------\r\n// <nadesiko3::gen::syncMode>\r\nfunction ${syncMain}(self) {\r\ntry {\r\n  ${jsInit}\r\n  ${js}\r\n} catch (err) {\r\n  if (err.message === '__終わる__') { return }\r\n  self.numFailures++\r\n  throw self.logger.runtimeError(err, self.__v0.line)\r\n}\r\n} // end of ${syncMain}\r\n${syncMain}(self)\r\n// </nadesiko3::gen::syncMode>\r\n// --------------------------------------------------\r\n`;\r\n    }\r\n    // デバッグメッセージ\r\n    com.getLogger().trace('--- generate ---\\n' + js);\r\n    let codeImportFiles = '';\r\n    const importNames = [];\r\n    for (const f of opt.importFiles) {\r\n        if (f === 'nako_errors.mjs') {\r\n            continue;\r\n        }\r\n        const ff = 'nako3runtime_' + f.replace(/\\.(js|mjs)$/, '').replace(/[^a-zA-Z0-9_]/g, '_');\r\n        importNames.push(ff);\r\n        codeImportFiles += `import ${ff} from './nako3runtime/${f}'\\n`;\r\n    }\r\n    const standaloneJSCode = `\\\r\n// <standaloneCode>\r\nimport path from 'path'\r\nimport { NakoRuntimeError } from './nako3runtime/nako_errors.mjs'\r\n${codeImportFiles}\r\nconst self = {}\r\nself.coreVersion = '${com.coreVersion}'\r\nself.version = '${com.version}'\r\nself.logger = {\r\n  error: (message) => { console.error(message) },\r\n  warn: (message) => { console.warn(message) },\r\n  send: (level, message) => { console.log(message) },\r\n};\r\nself.__varslist = [{}, {}, {}]\r\nself.__v0 = self.__varslist[0]\r\nself.initFuncList = []\r\nself.clearFuncList = []\r\n// Copy module functions\r\nfor (const mod of [${importNames.join(', ')}]) {\r\n  for (const funcName in mod) {\r\n    if (funcName === '初期化') {\r\n      self.initFuncList.push(mod[funcName].fn)\r\n      continue\r\n    }\r\n    if (funcName === '!クリア') {\r\n      self.clearFuncList.push(mod[funcName].fn)\r\n      continue\r\n    }\r\n    self.__varslist[0][funcName] = mod[funcName].fn\r\n  }\r\n}\r\nself.__vars = self.__varslist[2];\r\nself.__module = {};\r\nself.__locals = {};\r\nself.__genMode = 'sync';\r\n\r\n// プラグインの初期化コードを実行\r\nself.initFuncList.map(f => f(self))\r\n\r\ntry {\r\n${opt.codeStandalone}\r\n// <JS:standalone>\r\n${js}\r\n// </JS:standalone>\r\n  // standaloneCodeでは、即時プラグインのクリアコードを実行\r\n  self.clearFuncList.map(f => f(self))\r\n} catch (err) {\r\n  self.logger.error(err);\r\n  throw err;\r\n}\r\n// </standaloneCode>\r\n`;\r\n    // ---\r\n    const initCode = gen.getPluginInitCode();\r\n    const runtimeEnvCode = `\r\n// <runtimeEnvCode>\r\nconst self = this\r\n${opt.codeEnv}\r\n${jsInit}\r\n${initCode}\r\n${js}\r\n// </runtimeEnvCode>\r\n`;\r\n    return {\r\n        // なでしこの実行環境ありの場合(thisが有効)\r\n        runtimeEnv: runtimeEnvCode,\r\n        // JavaScript単体で動かす場合\r\n        standalone: standaloneJSCode,\r\n        // コード生成に使ったNakoGenのインスタンス\r\n        gen\r\n    };\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","/**\r\n * file: nako_gen_async\r\n * パーサーが生成した中間オブジェクトを実際のJavaScriptのコードに変換する。\r\n * なお、扱いやすさ優先で、なでしこの一文を一つの関数として生成し、非同期実行する。\r\n */\r\nimport { NakoSyntaxError, NakoError, NakoRuntimeError } from './nako_errors.mjs';\r\nimport nakoVersion from './nako_core_version.mjs';\r\nimport { NakoGen } from './nako_gen.mjs';\r\n/**\r\n * なでしこのインタプリタコード\r\n */\r\nconst NakoCodeNop = 'NOP';\r\nconst NakoCodeLabel = 'LBL';\r\nconst NakoCodeEOL = 'EOL';\r\nconst NakoCodeJump = 'JMP'; // JUMP addr\r\nconst NakoCodeJumpIfTrue = 'JMP_T'; // pop and jump addr\r\nconst NakoCodeJumpIfFalse = 'JMP_F'; // pop and jump addr\r\nconst NakoCodeCall = 'CALL'; // call addr\r\nconst NakoCodeCallObj = 'CALL_OBJ'; // call addr\r\nconst NakoCodeReturn = 'RET';\r\nconst NakoCodeTry = 'TRY';\r\nconst NakoCodeCode = 'CODE';\r\nconst NakoCodeTagIsFuncpoint = 0x0F;\r\n/**\r\n * なでしこのインタプリタが用いる簡易コードを表現するクラス\r\n */\r\nclass NakoCode {\r\n    /**\r\n     * @param type\r\n     * @param value\r\n     */\r\n    constructor(type, value) {\r\n        /** Codeのタイプ\r\n         * @type {string}\r\n         */\r\n        this.type = type;\r\n        /** Codeの値 / ラベルならラベル名\r\n         * @type {string}\r\n         */\r\n        this.value = value;\r\n        /** ラベルならジャンプ先\r\n         * @type {number}\r\n         */\r\n        this.no = -1;\r\n        /** タグ\r\n         * @type {number}\r\n         */\r\n        this.tag = 0;\r\n    }\r\n}\r\n/**\r\n * 構文木からJSのコードを生成するクラス\r\n */\r\nexport class NakoGenASync {\r\n    /**\r\n     * @param com コンパイラのインスタンス\r\n     */\r\n    constructor(com) {\r\n        this.com = com;\r\n        /**\r\n         * 出力するJavaScriptコードのヘッダー部分で定義する必要のある関数。fnはjsのコード。\r\n         * プラグイン関数は含まれない。\r\n         */\r\n        this.nakoFuncList = { ...com.getNakoFuncList() };\r\n        /**\r\n         * なでしこで定義したテストの一覧\r\n         * @type {Record<string, { josi: string[][], fn: string, type: 'test_func' }>}\r\n         */\r\n        this.nakoTestList = {};\r\n        /**\r\n         * プログラム内で参照された関数のリスト。プラグインの命令を含む。\r\n         * JavaScript単体で実行するとき、このリストにある関数の定義をJavaScriptコードの先頭に付け足す。\r\n         * @type {Set<string>}\r\n         */\r\n        this.usedFuncSet = new Set();\r\n        /**\r\n         * ループ時の一時変数が被らないようにIDで管理\r\n         * @type {number}\r\n         */\r\n        this.loopId = 1;\r\n        /**\r\n         * 変換中の処理が、ループの中かどうかを判定する\r\n         * @type {boolean}\r\n         */\r\n        this.flagLoop = false;\r\n        /**\r\n         * 変換後のコード管理番号\r\n         * @type {number}\r\n         */\r\n        this.codeId = 0;\r\n        /**\r\n         * 変換後のコードを保持する配列\r\n         * @type {Array<NakoCode>}\r\n         */\r\n        this.codeArray = [];\r\n        /** @type {NakoCode | null} */\r\n        this.labelContinue = null;\r\n        /** @type {NakoCode | null} */\r\n        this.labelBreak = null;\r\n        /**\r\n         * ジャンプ先を表現するラベル\r\n         * @type {Object<string, number>}\r\n         */\r\n        this.labels = {};\r\n        // コンパイラのインスタンス\r\n        this.__self = com;\r\n        /**\r\n         * コードジェネレータの種類\r\n         * @type {string}\r\n         */\r\n        this.genMode = '非同期モード';\r\n        /**\r\n         * 行番号とファイル名が分かるときは `l123:main.nako3`、行番号だけ分かるときは `l123`、そうでなければ任意の文字列。\r\n         * @type {string | null}\r\n         */\r\n        this.lastLineNo = null;\r\n        /**\r\n         * スタック\r\n         * @type {{ isFunction: boolean, names: Set<string>, readonly: Set<string> }[]}\r\n         */\r\n        this.varslistSet = com.__varslist.map((v) => ({ isFunction: false, names: new Set(Object.keys(v)), readonly: new Set() }));\r\n        /**\r\n         * スタックトップ\r\n         * @type {{ isFunction: boolean, names: Set<string>, readonly: Set<string> }}\r\n         */\r\n        this.varsSet = { isFunction: false, names: new Set(), readonly: new Set() };\r\n        this.varslistSet[2] = this.varsSet;\r\n        // 1以上のとき高速化する。\r\n        // 実行速度優先ブロック内で1増える。\r\n        this.speedMode = {\r\n            lineNumbers: 0,\r\n            implicitTypeCasting: 0,\r\n            invalidSore: 0,\r\n            forcePure: 0 // 全てのシステム命令をpureとして扱う。命令からローカル変数への参照が出来なくなる。\r\n        };\r\n        // 1以上のとき測定をinjectする。\r\n        // パフォーマンスモニタのブロック内で1増える。\r\n        this.performanceMonitor = {\r\n            userFunction: 0,\r\n            systemFunction: 0,\r\n            systemFunctionBody: 0 // システム関数(呼び出しコードを除く)\r\n        };\r\n    }\r\n    /**\r\n     * @param com\r\n     * @param {Ast} ast\r\n     * @param {boolean | string} isTest 文字列なら1つのテストだけを実行する\r\n     */\r\n    static generate(com, ast, isTest) {\r\n        const gen = new NakoGenASync(com);\r\n        // ユーザー定義関数をシステムに登録する\r\n        gen.registerFunction(ast);\r\n        // JSコードを生成する\r\n        let js = gen.convGen(ast, !!isTest);\r\n        // JSコードを実行するための事前ヘッダ部分の生成\r\n        js = gen.getDefFuncCode(isTest) + js;\r\n        com.getLogger().trace('--- generate(非同期モード) ---\\n' + js);\r\n        // テストの実行\r\n        if (js && isTest) {\r\n            js += '\\n__self._runTests(__tests);\\n';\r\n        }\r\n        return {\r\n            // なでしこの実行環境ありの場合\r\n            runtimeEnv: js,\r\n            // JavaScript単体で動かす場合\r\n            standalone: `\\\r\nconst nakoVersion = ${JSON.stringify(nakoVersion)};\r\n${NakoError.toString()}\r\n${NakoRuntimeError.toString()}\r\nthis.logger = {\r\n  error(message) { console.error(message) },\r\n  send(level, message) { console.log(message) },\r\n};\r\nthis.__varslist = [{}, {}, {}];\r\nthis.__vars = this.__varslist[2];\r\nthis.__module = {};\r\nthis.__locals = {};\r\nthis.__labels = {};\r\nthis.__code = [];\r\nthis.__callstack = [];\r\nthis.__stack = [];\r\nthis.__genMode = '非同期モード';\r\ntry {\r\n  ${gen.getVarsCode()}\r\n  ${js}\r\n} catch (err) {\r\n  if (!(err instanceof NakoRuntimeError)) {\r\n    err = new NakoRuntimeError(err, this.__varslist[0].line);\r\n  }\r\n  this.logger.error(err);\r\n  throw err;\r\n}`,\r\n            gen // コード生成に使ったNakoGenのインスタンス\r\n        };\r\n    }\r\n    /**\r\n     * @param {import(\"./nako3\").Ast} node\r\n     * @param {boolean} forceUpdate\r\n     */\r\n    convLineno(node, forceUpdate) {\r\n        if (this.speedMode.lineNumbers > 0) {\r\n            return '';\r\n        }\r\n        /** @type {string} */\r\n        let lineNo;\r\n        if (typeof node.line !== 'number') {\r\n            lineNo = 'unknown';\r\n        }\r\n        else if (typeof node.file !== 'string') {\r\n            lineNo = `l${node.line}`;\r\n        }\r\n        else {\r\n            lineNo = `l${node.line}:${node.file}`;\r\n        }\r\n        // 強制的に行番号をアップデートするか\r\n        if (!forceUpdate) {\r\n            if (lineNo === this.lastLineNo) {\r\n                return '';\r\n            }\r\n            this.lastLineNo = lineNo;\r\n        }\r\n        // 例: __v0.line='l1:main.nako3'\r\n        return `__v0.line=${JSON.stringify(lineNo)};`;\r\n    }\r\n    /**\r\n     * ローカル変数のJavaScriptコードを生成する。\r\n     * 基本的に取得のために利用\r\n     * @param {string} name\r\n     */\r\n    varname(name) {\r\n        const keys = JSON.stringify(name);\r\n        return `sys.__vars[${keys}]`;\r\n    }\r\n    /**\r\n     * プログラムの実行に必要な関数を書き出す(システム領域)\r\n     * @returns {string}\r\n     */\r\n    getVarsCode() {\r\n        let code = '';\r\n        // プログラム中で使った関数を列挙して書き出す\r\n        for (const key of Array.from(this.usedFuncSet.values())) {\r\n            const f = this.__self.__varslist[0][key];\r\n            const name = `this.__varslist[0][\"${key}\"]`;\r\n            if (typeof (f) === 'function') {\r\n                code += name + '=' + f.toString() + ';\\n';\r\n            }\r\n            else {\r\n                code += name + '=' + JSON.stringify(f) + ';\\n';\r\n            }\r\n        }\r\n        return code;\r\n    }\r\n    /**\r\n     * プログラムの実行に必要な関数定義を書き出す(グローバル領域)\r\n     * convGenの結果を利用するため、convGenの後に呼び出すこと。\r\n     * @param {boolean | string} isTest テストかどうか。stringの場合は1つのテストのみ。\r\n     * @returns {string}\r\n     */\r\n    getDefFuncCode(isTest) {\r\n        let code = '';\r\n        // よく使う変数のショートカット\r\n        code += 'const __self = this.__self = this;\\n';\r\n        code += 'const __varslist = this.__varslist;\\n';\r\n        code += 'const __module = this.__module;\\n';\r\n        code += 'const __v0 = this.__v0 = this.__varslist[0];\\n';\r\n        code += 'const __v1 = this.__v1 = this.__varslist[1];\\n';\r\n        code += 'const __vars = this.__vars = this.__varslist[2];\\n';\r\n        code += 'const __code = this.__code;\\n';\r\n        // なでしこの関数定義を行う\r\n        let nakoFuncCode = '';\r\n        for (const key in this.nakoFuncList) {\r\n            const f = this.nakoFuncList[key].fn;\r\n            nakoFuncCode += '' +\r\n                `//[DEF_FUNC name='${key}']\\n` +\r\n                `__v1[\"${key}\"]=${f};\\n;` +\r\n                `//[/DEF_FUNC name='${key}']\\n`;\r\n        }\r\n        if (nakoFuncCode !== '') {\r\n            code += '__v0.line=\\'関数の定義\\';\\n' + nakoFuncCode;\r\n        }\r\n        // プラグインの初期化関数を実行する\r\n        let pluginCode = '';\r\n        for (const name in this.__self.__module) {\r\n            const initkey = `!${name}:初期化`;\r\n            if (this.varslistSet[0].names.has(initkey)) {\r\n                this.usedFuncSet.add(`!${name}:初期化`);\r\n                pluginCode += `__v0[\"!${name}:初期化\"](__self);\\n`;\r\n            }\r\n        }\r\n        if (pluginCode !== '') {\r\n            code += '__v0.line=\\'プラグインの初期化\\';\\n' + pluginCode;\r\n        }\r\n        // テストの定義を行う\r\n        if (isTest) {\r\n            let testCode = 'const __tests = [];\\n';\r\n            for (const key in this.nakoTestList) {\r\n                if (isTest === true || (typeof isTest === 'string' && isTest === key)) {\r\n                    const f = this.nakoTestList[key].fn;\r\n                    testCode += `${f};\\n;`;\r\n                }\r\n            }\r\n            if (testCode !== '') {\r\n                code += '__v0.line=\\'テストの定義\\';\\n';\r\n                code += testCode + '\\n';\r\n            }\r\n        }\r\n        return code;\r\n    }\r\n    /**\r\n     * プラグイン・オブジェクトを追加\r\n     * @param po プラグイン・オブジェクト\r\n     */\r\n    addPlugin(po) {\r\n        return this.__self.addPlugin(po);\r\n    }\r\n    /**\r\n     * プラグイン・オブジェクトを追加(ブラウザ向け)\r\n     * @param name オブジェクト名\r\n     * @param po 関数リスト\r\n     */\r\n    addPluginObject(name, po) {\r\n        this.__self.addPluginObject(name, po);\r\n    }\r\n    /**\r\n     * プラグイン・ファイルを追加(Node.js向け)\r\n     * @param objName オブジェクト名\r\n     * @param path ファイルパス\r\n     * @param po 登録するオブジェクト\r\n     */\r\n    addPluginFile(objName, path, po) {\r\n        this.__self.addPluginFile(objName, path, po);\r\n    }\r\n    /**\r\n     * 関数を追加する\r\n     * @param key 関数名\r\n     * @param josi 助詞\r\n     * @param fn 関数\r\n     */\r\n    addFunc(key, josi, fn) {\r\n        this.__self.addFunc(key, josi, fn);\r\n    }\r\n    /**\r\n     * プラグイン関数を参照する\r\n     * @param key プラグイン関数の関数名\r\n     * @returns プラグイン・オブジェクト\r\n     */\r\n    getFunc(key) {\r\n        return this.__self.getFunc(key);\r\n    }\r\n    /**\r\n     * 関数を先に登録してしまう\r\n     */\r\n    registerFunction(ast) {\r\n        if (ast.type !== 'block') {\r\n            throw NakoSyntaxError.fromNode('構文解析に失敗しています。構文は必ずblockが先頭になります', ast);\r\n        }\r\n        const registFunc = (node) => {\r\n            for (let i = 0; i < node.block.length; i++) {\r\n                const t = node.block[i];\r\n                if (t.type === 'def_func') {\r\n                    const name = t.name.value;\r\n                    this.usedFuncSet.add(name);\r\n                    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                    this.__self.__varslist[1][name] = function () { }; // 事前に適当な値を設定\r\n                    this.nakoFuncList[name] = {\r\n                        josi: t.name.meta.josi,\r\n                        fn: '',\r\n                        type: 'func'\r\n                    };\r\n                }\r\n                else if (t.type === 'speed_mode') {\r\n                    if (t.block.type === 'block') {\r\n                        registFunc(t.block);\r\n                    }\r\n                    else {\r\n                        registFunc(t);\r\n                    }\r\n                }\r\n                else if (t.type === 'performance_monitor') {\r\n                    if (t.block.type === 'block') {\r\n                        registFunc(t.block);\r\n                    }\r\n                    else {\r\n                        registFunc(t);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        registFunc(ast);\r\n        // __self.__varslistの変更を反映\r\n        const initialNames = new Set();\r\n        if (this.speedMode.invalidSore === 0) {\r\n            initialNames.add('それ');\r\n        }\r\n        this.varsSet = { isFunction: false, names: initialNames, readonly: new Set() };\r\n        this.varslistSet = this.__self.__varslist.map(v => ({ isFunction: false, names: new Set(Object.keys(v)), readonly: new Set() }));\r\n        this.varslistSet[2] = this.varsSet;\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     * @param {boolean} isTest\r\n     */\r\n    convGen(node, isTest) {\r\n        // convert\r\n        this._convGen(node, true);\r\n        // ラベルアドレスの解決が必要なコード一覧\r\n        const needToFixAddr = new Set([\r\n            NakoCodeJump, NakoCodeJumpIfTrue, NakoCodeJumpIfFalse, NakoCodeCall, NakoCodeTry\r\n        ]);\r\n        // コードの最適化をするか?\r\n        const optimization = true;\r\n        let codes = this.codeArray;\r\n        //\r\n        if (optimization) {\r\n            // NOPを削除\r\n            codes = codes.filter((code) => {\r\n                return code.type !== NakoCodeNop;\r\n            });\r\n            // 未参照のラベルを探す - ただし関数呼び出しは削除しない\r\n            const usedLabels = new Set();\r\n            codes.forEach((code) => {\r\n                if (needToFixAddr.has(code.type)) {\r\n                    usedLabels.add(code.value);\r\n                }\r\n            });\r\n            // 未参照のラベルを削除\r\n            codes = codes.filter((code) => {\r\n                if (code.type !== NakoCodeLabel) {\r\n                    return true;\r\n                }\r\n                if (code.tag === NakoCodeTagIsFuncpoint) {\r\n                    return true;\r\n                }\r\n                return usedLabels.has(code.value);\r\n            });\r\n            // EOLが連続していたら削除する\r\n            let i = 0;\r\n            while (i < codes.length - 1) {\r\n                if (codes[i].type === NakoCodeEOL && codes[i + 1].type === NakoCodeEOL) {\r\n                    codes.splice(i + 1, 1);\r\n                    continue;\r\n                }\r\n                i++;\r\n            }\r\n            this.codeArray = codes;\r\n        }\r\n        // ラベルアドレスの解決\r\n        codes.forEach((code, index) => {\r\n            if (code.type === NakoCodeLabel) {\r\n                this.labels[code.value] = index;\r\n            }\r\n        });\r\n        codes.forEach((code) => {\r\n            if (needToFixAddr.has(code.type)) {\r\n                if (code.no < 0) {\r\n                    code.no = this.labels[code.value];\r\n                }\r\n            }\r\n        });\r\n        let result = '';\r\n        // コードの生成\r\n        codes.forEach((code, index) => {\r\n            switch (code.type) {\r\n                case NakoCodeNop:\r\n                    result += `case ${index}: break; // [NOP] ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeLabel:\r\n                    result += `case ${index}: break; // [LABEL] ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeEOL:\r\n                    result += `case ${index}: ${code.value}; break; // [EOL]\\n`;\r\n                    break;\r\n                case NakoCodeJump:\r\n                    result += `case ${index}: sys.nextIndex = ${code.no}; break; // ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeJumpIfTrue:\r\n                    result += `case ${index}: if (sys.__stack.pop()) { sys.nextIndex = ${code.no};} break; // ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeJumpIfFalse:\r\n                    result += `case ${index}: if (!sys.__stack.pop()) { sys.nextIndex = ${code.no}} break; // ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeReturn:\r\n                    result += `case ${index}: sys.__return(sys); break;\\n`;\r\n                    break;\r\n                case NakoCodeCall:\r\n                    result += `case ${index}: sys.__call(${code.no}, sys); break; // ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeCallObj:\r\n                    result += `case ${index}: sys.__callObj('${code.value}', ${index}, sys); break; // ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeTry:\r\n                    result += `case ${index}: sys.tryIndex = ${code.no}; break; // TRY \\n`;\r\n                    break;\r\n                case NakoCodeCode:\r\n                    {\r\n                        // trim last\r\n                        const s = code.value.replace(/\\s+$/, '');\r\n                        result += `case ${index}: {\\n${s}\\n};break;\\n`;\r\n                        break;\r\n                    }\r\n                default:\r\n                    throw new Error('invalid code type');\r\n            }\r\n        });\r\n        result = `\r\n    //-------------------------\r\n    // main_code\r\n    this.__labels = ${JSON.stringify(this.labels)};\r\n    this.nextAsync = (sys) => {\r\n      if (sys.index >= sys.codeSize || sys.index < 0) {return}\r\n      const __v0 = sys.__v0\r\n      try {\r\n        sys.inLoop = true\r\n        while (sys.index < sys.codeSize && sys.index >= 0) {\r\n          // console.log('@@[run]', sys.index)\r\n          switch (sys.index) {\r\n            // --- CODE.BEGIN ---\r\n            ${result}\r\n            // --- CODE.END ---\r\n            default:\r\n              sys.inLoop = false\r\n              console.log(sys.index, sys.__stack)\r\n              throw new Error('Invalid sys.index:' + sys.index)\r\n              break\r\n          }\r\n          // check next\r\n          if (sys.nextIndex >= 0) {\r\n            sys.index = sys.nextIndex\r\n            sys.nextIndex = -1\r\n          } else {\r\n            sys.index++\r\n          }\r\n          if (sys.async) {\r\n            sys.__saveSysenv(sys)\r\n            sys.async = false\r\n            break\r\n          }\r\n        } // end of while\r\n        sys.inLoop = false\r\n      } catch (e) {\r\n        sys.__errorAsync(e, sys)\r\n      }\r\n    }\r\n    this.__errorAsync = (e, sys) => { // エラーが起きた時呼び出す\r\n      sys.__v0[\"エラーメッセージ\"] = e.message;\r\n      if (e.message == '__終わる__') {\r\n        sys.__stopAsync(sys)\r\n        return\r\n      }\r\n      if (sys.tryIndex >= 0) {\r\n        sys.index = sys.tryIndex;\r\n        setTimeout(() => {sys.nextAsync(sys)}, 1)\r\n      } else {\r\n        throw e\r\n      }\r\n    }\r\n    this.__call = (no, sys) => {\r\n      const info = {lastVars:sys.__vars, backNo: this.index + 1}\r\n      sys.__callstack.push(info);\r\n      sys.__vars = {\"それ\":\"\"}\r\n      sys.__varslist.push(sys.__vars)\r\n      sys.nextIndex = no;\r\n    }\r\n    this.__return = sys => {\r\n      if (sys.__callstack.length === 0) {\r\n        sys.__destroySysenv(sys, sys.curSysenv.envid)\r\n        sys.index = -2\r\n        sys.nextIndex = -1\r\n        return\r\n      }\r\n      const sore = sys.__vars['それ'];\r\n      sys.__varslist.pop();\r\n      const info = sys.__callstack.pop();\r\n      sys.nextIndex = info.backNo;\r\n      sys.__vars = info.lastVars;\r\n      sys.__vars['それ'] = sore\r\n      sys.__stack.push(sore);\r\n    }\r\n    this.__resetAsync = sys => {\r\n      sys.index = 0\r\n      sys.codeSize = ${codes.length};\r\n      sys.async = false\r\n      sys.nextIndex = -1\r\n      sys.tryIndex = -1\r\n    }\r\n    this.__stopAsync = sys => {\r\n      sys.__resetAsync(sys)\r\n      sys.index = -1 // force stop!!\r\n    }\r\n    this.__callNakoCode = (no, backNo, sys) => {\r\n      this.__call(backNo, sys)\r\n      sys.nextIndex = no\r\n      const sysenv = sys.setAsync(sys)\r\n      setTimeout(() => {\r\n        // console.log('//__callNakoCode, back=', backNo, 'no=', no)\r\n        sys.compAsync(sys, sysenv)\r\n      } ,1)\r\n    }\r\n    this.__callNakoCodeEntry = (no, sys) => {\r\n      sys.__saveSysenv(sys)\r\n      sys.curSysenv = sys.__generateSysenv(sys)\r\n      sys.__restoreSysenv(sys)\r\n      sys.__vars = {\"それ\":\"\"}\r\n      sys.__varslist.push(sys.__vars)\r\n      sys.index = no;\r\n      sys.nextAsync(sys)\r\n    }\r\n    this.__callObj = (vname, curNo, sys) => {\r\n      if (sys.__vars[vname]) {\r\n        const fname = sys.__vars[vname]\r\n        // console.log(sys.__labels)\r\n        if (fname && sys.__labels[fname]) {\r\n          const no = sys.__labels[fname]\r\n          sys.__call(no, sys)\r\n          return\r\n        } else {\r\n          console.log('vname=', vname, 'label=', fname)\r\n        }\r\n      }\r\n      throw new Error('async error in __callObj::', vname)\r\n    }\r\n    this.__generateSysenv = sys => {\r\n      sys.envid = ( sys.envid == null ? 0 : sys.envid ) + 1\r\n      const sysenv = {\r\n        callstack: [],\r\n        varstack: [],\r\n        varslist: [sys.__varslist[0], sys.__varslist[1], sys.__varslist[2]],\r\n        index: -1,\r\n        nextIndex: -1,\r\n        tryIndex: -1,\r\n        envid: sys.envid\r\n      }\r\n      sysenv.vars = sysenv.varslist[2]\r\n      if (sys.sysenvs == null) { sys.sysenvs={} }\r\n      sys.sysenvs[sys.envid] = sysenv\r\n      // console.log('generete envid '+sys.envid)\r\n      return sysenv\r\n    }\r\n    this.__destroySysenv = (sys, envid) => {\r\n      delete sys.sysenvs[envid]\r\n      // console.log('destroy envid '+envid)\r\n    }\r\n    this.__saveSysenv = sys => {\r\n      const sysenv = sys.curSysenv\r\n      sysenv.callstack = sys.__callstack\r\n      sysenv.varstack = sys.__stack\r\n      sysenv.varslist = sys.__varslist\r\n      sysenv.vars = sys.__vars\r\n      sysenv.index = sys.index\r\n      sysenv.nextIndex = sys.nextIndex\r\n      sysenv.tryIndex = sys.tryIndex\r\n    }\r\n    this.__restoreSysenv = sys => {\r\n      const sysenv = sys.curSysenv\r\n      sys.__callstack = sysenv.callstack\r\n      sys.__stack = sysenv.varstack\r\n      sys.__varslist = sysenv.varslist\r\n      sys.__vars = sysenv.vars\r\n      ___vars = sys.__vars\r\n      sys.index = sysenv.index\r\n      sys.nextIndex = sysenv.nextIndex\r\n      sys.tryIndex = sysenv.tryIndex\r\n    }\r\n    this.setAsync = sys => {\r\n      sys.async = true\r\n      return sys.curSysenv\r\n    }\r\n    this.compAsync = (sys,sysenv) => {\r\n      if (sys.async && sys.curSysenv != null && sysenv != null && sys.curSysenv.envid === sysenv.envid) {\r\n        sys.async = false\r\n      } else {\r\n        if (sys.curSysenv == null || sysenv == null || sys.curSysenv.envid !== sysenv.envid) {\r\n          sys.__saveSysenv(sys)\r\n          const envid = sys.curSysenv.envid\r\n          sys.curSysenv = sysenv\r\n          sys.__restoreSysenv(sys)\r\n          // console.log('switch envid '+envid+' to '+sys.curSysenv.envid)\r\n        }\r\n        sys.nextAsync(sys)\r\n      }\r\n    }\r\n\r\n    this.__resetAsync(this)\r\n    this.curSysenv = this.__generateSysenv(this)\r\n    this.nextAsync(this)\r\n    //-------------------------\r\n    `;\r\n        if (isTest) {\r\n            return '';\r\n        }\r\n        else {\r\n            return result;\r\n        }\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     */\r\n    _convGen(node, isExpression) {\r\n        let code = '';\r\n        if (node instanceof Array) {\r\n            for (let i = 0; i < node.length; i++) {\r\n                const n = node[i];\r\n                code += this._convGen(n, isExpression);\r\n            }\r\n            return code;\r\n        }\r\n        if (node === null) {\r\n            return 'null';\r\n        }\r\n        if (node === undefined) {\r\n            return 'undefined';\r\n        }\r\n        if (typeof (node) !== 'object') {\r\n            return '' + node;\r\n        }\r\n        // switch\r\n        switch (node.type) {\r\n            // === NOP ===\r\n            case 'nop':\r\n                break;\r\n            case 'comment':\r\n                if (!node.value) {\r\n                    node.value = '';\r\n                }\r\n                this.addCode(new NakoCode(NakoCodeNop, node.value));\r\n                break;\r\n            case 'eol':\r\n                this.addCode(new NakoCode(NakoCodeEOL, this.convLineno(node, true)));\r\n                break;\r\n            // === 単純なコード変換 ===\r\n            case 'number':\r\n                this.addCodeStr(`sys.__stack.push(${node.value});//number`);\r\n                break;\r\n            case 'string':\r\n                this.convString(node);\r\n                break;\r\n            case 'word':\r\n            case 'variable':\r\n                this.convGetVar(node);\r\n                break;\r\n            case 'op':\r\n            case 'calc':\r\n                this.convOp(node);\r\n                break;\r\n            case 'renbun':\r\n                this.convRenbun(node);\r\n                break;\r\n            case 'not':\r\n                this._convGen(node.value, true);\r\n                this.addCodeStr('if (sys.__stack.length==0) throw new Error(\\'NOTでスタックに値がありません\\');' +\r\n                    'sys.__stack[sys.__stack.length-1] = (sys.__stack[sys.__stack.length-1]) ? 0:1');\r\n                break;\r\n            case '配列参照':\r\n                this.convRefArray(node);\r\n                break;\r\n            case 'json_array':\r\n                this.convJsonArray(node);\r\n                break;\r\n            case 'json_obj':\r\n                this.convJsonObj(node);\r\n                break;\r\n            case 'bool':\r\n                {\r\n                    const b = (node.value) ? 'true' : 'false';\r\n                    this.addCodeStr(`sys.__stack.push(${b})`);\r\n                    break;\r\n                }\r\n            case 'null':\r\n                this.addCodeStr('sys.__stack.push(null)');\r\n                break;\r\n            case 'func':\r\n            case 'func_pointer':\r\n            case 'calc_func':\r\n                this.convFunc(node, isExpression); // 関数の呼び出し\r\n                break;\r\n            // === 文の変換 ===\r\n            case 'let':\r\n                this.convLet(node);\r\n                break;\r\n            case 'let_array':\r\n                this.convLetArray(node);\r\n                break;\r\n            case 'block':\r\n                for (let i = 0; i < node.block.length; i++) {\r\n                    const b = node.block[i];\r\n                    this._convGen(b, false);\r\n                }\r\n                break;\r\n            case 'if':\r\n                this.convIf(node);\r\n                break;\r\n            case 'repeat_times':\r\n                this.convRepeatTimes(node);\r\n                break;\r\n            case 'break':\r\n                this.addCodeStr(this.convCheckLoop(node, 'break'));\r\n                break;\r\n            case 'continue':\r\n                this.addCodeStr(this.convCheckLoop(node, 'continue'));\r\n                break;\r\n            case 'for':\r\n                this.convFor(node);\r\n                break;\r\n            case 'foreach':\r\n                this.convForeach(node);\r\n                break;\r\n            case 'while':\r\n                this.convWhile(node);\r\n                break;\r\n            case 'switch':\r\n                this.convSwitch(node);\r\n                break;\r\n            case 'return':\r\n                this.convReturn(node);\r\n                break;\r\n            case 'end':\r\n                code += this.addCodeStr('__varslist[0][\\'終\\']();');\r\n                break;\r\n            case 'def_local_var':\r\n                this.convDefLocalVar(node);\r\n                break;\r\n            case 'def_local_varlist':\r\n                code += this.addCodeStr(this.convDefLocalVarlist(node));\r\n                break;\r\n            case 'tikuji':\r\n                throw NakoSyntaxError.fromNode('「逐次実行」構文は「!非同期モード」では使えません。', node);\r\n            case 'speed_mode':\r\n                throw NakoSyntaxError.fromNode('「速度有線」構文は「!非同期モード」では使えません。', node);\r\n            case 'performance_monitor':\r\n                this.convPerformanceMonitor(node, isExpression);\r\n                break;\r\n            case 'func_obj':\r\n                this.convFuncObj(node);\r\n                break;\r\n            case 'def_test':\r\n                this.convDefTest(node);\r\n                break;\r\n            case 'def_func':\r\n                code += this.addCodeStr(this.convDefFunc(node));\r\n                break;\r\n            // TODO\r\n            case 'try_except':\r\n                code += this.convTryExcept(node);\r\n                break;\r\n            case 'require':\r\n                code += this.convRequire(node);\r\n                break;\r\n            default:\r\n                throw new Error('System Error: unknown_type=' + node.type);\r\n        }\r\n        return code;\r\n    }\r\n    convRequire(node) {\r\n        const gen = new NakoGen(this.com);\r\n        this.addCodeStr(gen.convRequire(node));\r\n        return '';\r\n    }\r\n    /**\r\n     * add code to array\r\n     * @param {string} codeStr\r\n     * @returns {string}\r\n     */\r\n    addCodeStr(codeStr) {\r\n        if (codeStr === '') {\r\n            return '';\r\n        }\r\n        const a = codeStr.split('\\n');\r\n        const a2 = a.map((row) => '  ' + row.replace(/\\s+$/, ''));\r\n        const c = new NakoCode(NakoCodeCode, a2.join('\\n'));\r\n        return this.addCode(c);\r\n    }\r\n    /**\r\n     * add code to array\r\n     * @param {NakoCode} code\r\n     * @returns {string}\r\n     */\r\n    addCode(code) {\r\n        this.codeArray[this.codeId] = code;\r\n        this.codeId++;\r\n        return '';\r\n    }\r\n    /**\r\n     * make label for jump\r\n     * @param {string} name\r\n     * @returns {NakoCode}\r\n     */\r\n    makeLabel(name) {\r\n        const uniqLabel = name + '_' + (this.loopId++);\r\n        return this.makeLabelDirectly(uniqLabel);\r\n    }\r\n    /**\r\n     * make label for function\r\n     * @param {string} labelName\r\n     * @returns {NakoCode}\r\n     */\r\n    makeLabelDirectly(labelName) {\r\n        const c = new NakoCode(NakoCodeLabel, labelName);\r\n        this.labels[labelName] = -1;\r\n        return c;\r\n    }\r\n    /**\r\n     * make Jump\r\n     * @param {NakoCode} label\r\n     * @returns {NakoCode}\r\n     */\r\n    makeJump(label) {\r\n        return new NakoCode(NakoCodeJump, label.value);\r\n    }\r\n    /**\r\n     * make Jump if true\r\n     * @param {NakoCode} label\r\n     * @returns {NakoCode}\r\n     */\r\n    makeJumpIfTrue(label) {\r\n        return new NakoCode(NakoCodeJumpIfTrue, label.value);\r\n    }\r\n    /**\r\n     * make Jump if false\r\n     * @param {NakoCode} label\r\n     * @returns {NakoCode}\r\n     */\r\n    makeJumpIfFalse(label) {\r\n        return new NakoCode(NakoCodeJumpIfFalse, label.value);\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     */\r\n    convIf(node) {\r\n        const labelBegin = this.makeLabel('もし:ここから');\r\n        const labelEnd = this.makeLabel('もし:ここまで');\r\n        const labelIfFalse = this.makeLabel('もし:違えば');\r\n        //\r\n        this.addCode(labelBegin);\r\n        this._convGen(node.expr, true);\r\n        this.addCode(this.makeJumpIfFalse(labelIfFalse));\r\n        this._convGen(node.block, false);\r\n        this.addCode(this.makeJump(labelEnd));\r\n        this.addCode(labelIfFalse);\r\n        if (node.falseBlock) {\r\n            this._convGen(node.falseBlock, false);\r\n        }\r\n        this.addCode(labelEnd);\r\n        return '';\r\n    }\r\n    convRepeatTimes(node) {\r\n        this.flagLoop = true;\r\n        this.varsSet.names.add('回数');\r\n        this.varsSet.readonly.add('回数');\r\n        // ループ管理変数を作成\r\n        const loopVar = `sys.__tmp_i${this.loopId}`;\r\n        this.loopId++;\r\n        // ループ回数を取得\r\n        const loopCount = `sys.__tmp_count${this.loopId}`;\r\n        this.loopId++;\r\n        this._convGen(node.value, true);\r\n        this.addCodeStr(`${loopCount} = sys.__stack.pop(); ${loopVar} = 0;`);\r\n        const labelCheck = this.makeLabel('回:条件チェック');\r\n        this.addCode(labelCheck);\r\n        const labelEnd = this.makeLabel('回:ここまで');\r\n        this.labelBreak = labelEnd;\r\n        this.labelContinue = labelCheck;\r\n        // 繰り返し判定\r\n        const kaisu = 'sys.__vars[\"回数\"]';\r\n        const cond = `${kaisu} = ++${loopVar}\\n` +\r\n            `sys.__stack.push(${loopVar} > ${loopCount})\\n`;\r\n        this.addCodeStr(cond);\r\n        this.addCode(this.makeJumpIfTrue(labelEnd));\r\n        this.convGenLoop(node.block); // read block\r\n        this.addCode(this.makeJump(labelCheck));\r\n        this.addCode(labelEnd);\r\n        this.flagLoop = false;\r\n        return '';\r\n    }\r\n    /**\r\n     * @param {string} name\r\n     * @returns {{i: number, name: string, isTop: boolean, js: string} | null}\r\n     */\r\n    findVar(name) {\r\n        // __vars ? (ローカル変数)\r\n        if (this.varsSet.names.has(name)) {\r\n            return { i: this.varslistSet.length - 1, name, isTop: true, js: `sys.__vars[${JSON.stringify(name)}]` };\r\n        }\r\n        // __varslist ?\r\n        for (let i = 2; i >= 0; i--) {\r\n            if (this.varslistSet[i].names.has(name)) {\r\n                return { i, name, isTop: false, js: `sys.__varslist[${i}][${JSON.stringify(name)}]` };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 定義済みの変数の参照\r\n     * @param {string} name\r\n     * @param {Ast} position\r\n     */\r\n    genVar(name, position) {\r\n        const res = this.findVar(name);\r\n        const lno = position.line;\r\n        if (res === null) {\r\n            // 定義されていない名前の参照は変数の定義とみなす。\r\n            // 多くの場合はundefined値を持つ変数であり分かりづらいバグを引き起こすが、\r\n            // 「ナデシコする」などの命令の中で定義された変数の参照の場合があるため警告に留める。\r\n            // ただし、自動的に定義される変数『引数』『それ』などは例外 #952\r\n            if (name === '引数' || name === 'それ' || name === '対象' || name === '対象キー' || name === '回数') {\r\n                // デフォルト定義されている変数名\r\n            }\r\n            else {\r\n                this.__self.getLogger().warn(`変数『${name}』は定義されていません。`, position);\r\n            }\r\n            this.varsSet.names.add(name);\r\n            return this.varname(name);\r\n        }\r\n        const i = res.i;\r\n        // システム関数・変数の場合\r\n        if (i === 0) {\r\n            const pv = this.__self.getFunc(name);\r\n            if (!pv) {\r\n                return `${res.js}/*err:${lno}*/`;\r\n            }\r\n            if (pv.type === 'const' || pv.type === 'var') {\r\n                return res.js;\r\n            }\r\n            if (pv.type === 'func') {\r\n                if (!pv.josi) {\r\n                    throw new Error('[System Error]');\r\n                }\r\n                if (pv.josi.length === 0) {\r\n                    return `(${res.js}())`;\r\n                }\r\n                throw NakoSyntaxError.fromNode(`『${name}』が複文で使われました。単文で記述してください。(v1非互換)`, position);\r\n            }\r\n            throw NakoSyntaxError.fromNode(`『${name}』は関数であり参照できません。`, position);\r\n        }\r\n        return res.js;\r\n    }\r\n    convGetVar(node) {\r\n        const name = node.value;\r\n        let varName = `sys.__vars[${JSON.stringify(name)}]`;\r\n        const o = this.findVar(name);\r\n        if (o != null) {\r\n            varName = o.js;\r\n        }\r\n        this.addCodeStr(`sys.__stack.push(${varName});`);\r\n    }\r\n    convComment(node) {\r\n        let commentSrc = String(node.value);\r\n        commentSrc = commentSrc.replace(/\\n/g, '¶');\r\n        const lineNo = this.convLineno(node, false);\r\n        if (commentSrc === '' && lineNo === '') {\r\n            return ';';\r\n        }\r\n        if (commentSrc === '') {\r\n            return ';' + lineNo + '\\n';\r\n        }\r\n        return ';' + lineNo + '//' + commentSrc + '\\n';\r\n    }\r\n    convReturn(node) {\r\n        // 関数の中であれば利用可能\r\n        if (this.varsSet.names.has('!関数')) {\r\n            throw NakoSyntaxError.fromNode('『戻る』がありますが、関数定義内のみで使用可能です。', node);\r\n        }\r\n        if (node.value) {\r\n            this._convGen(node.value, true);\r\n            this.addCodeStr('sys.__vars[\"それ\"] = sys.__stack.pop()');\r\n        }\r\n        this.addCode(new NakoCode(NakoCodeReturn, ''));\r\n        return '';\r\n    }\r\n    convCheckLoop(node, cmd) {\r\n        // ループの中であれば利用可能\r\n        if (!this.flagLoop) {\r\n            const cmdj = (cmd === 'continue') ? '続ける' : '抜ける';\r\n            throw NakoSyntaxError.fromNode(`『${cmdj}』文がありますが、それは繰り返しの中で利用してください。`, node);\r\n        }\r\n        if (cmd === 'continue') {\r\n            if (this.labelContinue) {\r\n                this.addCode(this.makeJump(this.labelContinue));\r\n            }\r\n        }\r\n        else {\r\n            if (this.labelBreak) {\r\n                this.addCode(this.makeJump(this.labelBreak));\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    convDefFuncCommon(node, name) {\r\n        // deffunc_code\r\n        const isMumeiFunc = (name === '');\r\n        let funcName = name;\r\n        if (isMumeiFunc) {\r\n            funcName = `無名関数:${this.loopId++}`;\r\n        }\r\n        const labelEnd = this.makeLabel(`関数「${funcName}」:ここまで`);\r\n        this.addCode(this.makeJump(labelEnd));\r\n        const labelBegin = this.makeLabelDirectly(funcName);\r\n        labelBegin.tag = NakoCodeTagIsFuncpoint; // 削除対象からはずすため\r\n        this.addCode(labelBegin);\r\n        //\r\n        const initialNames = new Set();\r\n        this.varsSet = { isFunction: true, names: initialNames, readonly: new Set() };\r\n        this.varsSet.names.add('それ');\r\n        // ローカル変数をPUSHする\r\n        this.varslistSet.push(this.varsSet);\r\n        // JSの引数と引数をバインド\r\n        const meta = isMumeiFunc ? node.meta : node.name.meta;\r\n        let code = '';\r\n        let codeCall = '';\r\n        code += `//関数『${funcName}』の初期化処理\\n`;\r\n        // 宣言済みの名前を保存\r\n        // const varsDeclared = Array.from(this.varsSet.names.values())\r\n        // 引数をローカル変数に設定 (スタックの末尾から取得する必要があるので、逆順に値を得る)\r\n        code += '// 引数をローカル変数として登録\\n';\r\n        for (let i = meta.varnames.length - 1; i >= 0; i--) {\r\n            const word = meta.varnames[i];\r\n            code += `  ${this.varname(word)} = sys.__stack.pop();\\n`;\r\n            this.varsSet.names.add(word);\r\n            codeCall += ''; //  sys.__stack.push(arguments[${i}]);\\n\r\n        }\r\n        code += '// ここまで:引数をローカル変数として登録\\n';\r\n        this.addCodeStr(code);\r\n        // 関数定義は、グローバル領域で。\r\n        this.usedFuncSet.add(funcName);\r\n        this.varslistSet[1].names.add(funcName);\r\n        this.nakoFuncList[funcName] = {\r\n            josi: meta.josi,\r\n            fn: '(function(){\\n' +\r\n                '  const sys = (arguments.length > 0) ? arguments[arguments.length-1] : {}; \\n' +\r\n                '  if (sys.newenv) { \\n' +\r\n                '    sys.newenv = false\\n' +\r\n                `    sys.__callNakoCodeEntry(sys.__labels['${funcName}'], sys);` + '\\n' +\r\n                '  } else {\\n' +\r\n                '  ' + codeCall + '\\n' +\r\n                `    sys.__callNakoCode(sys.__labels['${funcName}'], sys.nextIndex, sys);` + '\\n' +\r\n                '    if (!sys.inLoop) { sys.nextAsync(sys) }\\n' +\r\n                '  }  })',\r\n            type: 'func'\r\n        };\r\n        // ブロックを解析\r\n        this._convGen(node.block, false);\r\n        this.varslistSet.pop();\r\n        this.varsSet = this.varslistSet[this.varslistSet.length - 1];\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.__self.__varslist[1][funcName] = function () { };\r\n        this.addCode(new NakoCode(NakoCodeReturn, ''));\r\n        this.addCode(labelEnd);\r\n        // 無名関数の定義であれば無名関数をPUSH\r\n        if (!name) {\r\n            this.addCodeStr(`sys.__stack.push('${funcName}')`);\r\n        }\r\n        return '';\r\n    }\r\n    convDefTest(node) {\r\n        throw NakoSyntaxError.fromNode('テスト構文は!非同期モードでは使えません。', node);\r\n    }\r\n    convDefFunc(node) {\r\n        const name = NakoGen.getFuncName(node.name.value);\r\n        this.convDefFuncCommon(node, name);\r\n        // ★この時点では関数のコードを生成しない★\r\n        // プログラム冒頭でコード生成時に関数定義を行う\r\n        return '';\r\n    }\r\n    convFuncObj(node) {\r\n        return this.convDefFuncCommon(node, '');\r\n    }\r\n    convJsonObj(node) {\r\n        const list = node.value;\r\n        const objName = `sys.__tmp_obj${this.loopId++}`;\r\n        this.addCodeStr(objName + '={}; // convJsonObj::ここから');\r\n        list.forEach((e) => {\r\n            this._convGen(e.value, true);\r\n            this._convGen(e.key, true);\r\n            this.addCodeStr(`${objName}[sys.__stack.pop()]=sys.__stack.pop()`);\r\n        });\r\n        this.addCodeStr(`this.__stack.push(${objName}); delete $objName; // convJsonObj::ここまで`);\r\n        return '';\r\n    }\r\n    convJsonArray(node) {\r\n        const list = node.value;\r\n        this.addCode(this.makeLabel('convJsonArray::ここから'));\r\n        list.forEach((e) => this._convGen(e, true));\r\n        const size = list.length;\r\n        this.addCodeStr(`sys.__stack.push(sys.__stack.splice(sys.__stack.length-${size},${size}))`);\r\n        return '';\r\n    }\r\n    convRefArray(node) {\r\n        // 名前をPUSH\r\n        this._convGen(node.name, true);\r\n        const list = node.index;\r\n        for (let i = 0; i < list.length; i++) {\r\n            // push index\r\n            this._convGen(list[i], true);\r\n            // pop index & push value\r\n            this.addCodeStr('const idx = sys.__stack.pop();\\n' +\r\n                'const obj = sys.__stack.pop();\\n' +\r\n                'sys.__stack.push(obj[idx]);');\r\n        }\r\n        return '';\r\n    }\r\n    convLetArray(node) {\r\n        // 代入する値をPUSH\r\n        this._convGen(node.value, true);\r\n        // 変数を取得\r\n        this._convGen(node.name, true);\r\n        const list = node.index;\r\n        for (let i = 0; i < list.length; i++) {\r\n            this._convGen(list[i], true);\r\n            if (i === list.length - 1) { // 代入\r\n                this.addCodeStr('const idx = this.__stack.pop();' +\r\n                    'const obj = this.__stack.pop();' +\r\n                    'const val = this.__stack.pop();' +\r\n                    'obj[idx]=val;');\r\n                break;\r\n            }\r\n            // index アクセス\r\n            this.addCodeStr('const idx = sys.__stack.pop();\\n' +\r\n                'const obj = sys.__stack.pop();\\n' +\r\n                'sys.__stack.push(obj[idx]);');\r\n        }\r\n        return '';\r\n    }\r\n    convGenLoop(node) {\r\n        const tmpflag = this.flagLoop;\r\n        this.flagLoop = true;\r\n        try {\r\n            return this._convGen(node, false);\r\n        }\r\n        finally {\r\n            this.flagLoop = tmpflag;\r\n        }\r\n    }\r\n    convFor(node) {\r\n        this.flagLoop = true;\r\n        // ループ変数について\r\n        let word;\r\n        if (node.word !== null) { // ループ変数を使う時\r\n            const varName = node.word.value;\r\n            this.varsSet.names.add(varName);\r\n            word = this.varname(varName);\r\n        }\r\n        else {\r\n            this.varsSet.names.add('dummy');\r\n            word = this.varname('dummy');\r\n        }\r\n        const sore = this.varname('それ');\r\n        const idLoop = this.loopId++;\r\n        const varI = `sys.__tmp__i${idLoop}`;\r\n        // ループ条件を変数に入れる用\r\n        const varTo = `sys.__tmp__to${idLoop}`;\r\n        // ループ条件を確認\r\n        this._convGen(node.from, true);\r\n        this._convGen(node.to, true);\r\n        this.addCodeStr(`${varTo}=sys.__stack.pop();${varI}=sys.__stack.pop();`);\r\n        // ループ変数を初期化\r\n        this.addCodeStr(`${sore} = ${word} = ${varI}`);\r\n        // 繰り返し判定\r\n        const labelCheck = this.makeLabel('繰返:条件確認');\r\n        const labelInc = this.makeLabel('繰返:加算');\r\n        this.addCode(labelCheck);\r\n        const labelEnd = this.makeLabel('繰返:ここまで');\r\n        this.addCodeStr(`sys.__stack.push(${word} <= ${varTo})`);\r\n        this.addCode(this.makeJumpIfFalse(labelEnd));\r\n        this.labelContinue = labelInc;\r\n        this.labelBreak = labelEnd;\r\n        // ループ内のブロック内容を得る\r\n        this.convGenLoop(node.block); // block\r\n        this.addCode(labelInc);\r\n        this.addCodeStr(`${sore} = ++${word};`);\r\n        this.addCode(this.makeJump(labelCheck));\r\n        this.addCode(labelEnd);\r\n        this.addCodeStr(`delete ${varI};delete ${varTo};//繰返:掃除`);\r\n        this.flagLoop = false;\r\n        return '';\r\n    }\r\n    convForeach(node) {\r\n        this.flagLoop = true;\r\n        // 対象を用意する\r\n        let taisyo = '__v0[\"対象\"]';\r\n        const taisyoKey = '__v0[\"対象キー\"]';\r\n        if (node.name) {\r\n            taisyo = this.varname(node.name.value);\r\n            this.varsSet.names.add(node.name.value);\r\n        }\r\n        // 反復対象を調べる\r\n        const target = node.target;\r\n        if (target === null) {\r\n            throw NakoSyntaxError.fromNode('『反復』の対象がありません。', node);\r\n        }\r\n        const sore = this.varname('それ');\r\n        const targetArray = `sys.__tmp__target${this.loopId++}`;\r\n        const targetKeys = `sys.__tmp__keys${this.loopId++}`;\r\n        const loopVar = `sys.__tmp__i${this.loopId++}`;\r\n        const loopCount = `sys.__tmp__count${this.loopId++}`;\r\n        // 反復対象を評価\r\n        this._convGen(node.target, true);\r\n        // どのように反復するか判定\r\n        const initCode = '// 反復: 初期化\\n' +\r\n            `${targetArray} = sys.__stack.pop();\\n` +\r\n            `${loopVar} = 0;\\n` +\r\n            // 文字列や数値なら反復できるように配列に入れる\r\n            `if (typeof(${targetArray}) == 'string' || typeof(${targetArray}) == 'number') { ${targetArray} = [${targetArray}]; }\\n` +\r\n            // Objectならキー一覧を得る\r\n            `if (${targetArray} instanceof Array) { ${loopCount} = ${targetArray}.length; }\\n` +\r\n            'else { // キーの一覧を得る\\n' +\r\n            `  ${targetKeys} = Object.keys(${targetArray}); \\n` +\r\n            '  // hasOwnPropertyがfalseならばkeyを消す処理\\n' +\r\n            `  ${targetKeys} = ${targetKeys}.filter((key)=>{ return ${targetArray}.hasOwnProperty(key) })\\n` +\r\n            `  ${loopCount} = ${targetKeys}.length;\\n` +\r\n            '}\\n';\r\n        this.addCodeStr(initCode);\r\n        const labelCheck = this.makeLabel('反復:条件確認');\r\n        const labelInc = this.makeLabel('反復:加算');\r\n        const labelEnd = this.makeLabel('反復:ここまで');\r\n        this.labelBreak = labelEnd;\r\n        this.labelContinue = labelInc;\r\n        this.addCode(labelCheck);\r\n        const setTarget = `if (${targetArray} instanceof Array) {\\n` +\r\n            // eslint-disable-next-line no-irregular-whitespace\r\n            `  ${taisyo} = ${sore} = ${targetArray}[${loopVar}];　${taisyoKey} = ${loopVar};\\n` +\r\n            '} else {\\n' +\r\n            `  ${taisyoKey} = ${targetKeys}[${loopVar}]; ${taisyo} = ${sore} = ${targetArray}[${taisyoKey}];\\n` +\r\n            '}\\n';\r\n        this.addCodeStr(`${setTarget}\\nsys.__stack.push(${loopVar} < ${loopCount});`);\r\n        this.addCode(this.makeJumpIfFalse(labelEnd));\r\n        // 反復ブロックを定義\r\n        this.convGenLoop(node.block); // block\r\n        // 加算\r\n        this.addCode(labelInc);\r\n        this.addCodeStr(`${loopVar}++`);\r\n        this.addCode(this.makeJump(labelCheck));\r\n        this.addCode(labelEnd);\r\n        this.flagLoop = false;\r\n        return '';\r\n    }\r\n    convWhile(node) {\r\n        this.flagLoop = true;\r\n        const labelBegin = this.makeLabel('間:ここから');\r\n        const labelEnd = this.makeLabel('間:ここまで');\r\n        this.labelContinue = labelBegin;\r\n        this.labelBreak = labelEnd;\r\n        this.addCode(labelBegin);\r\n        // 条件をスタックに\r\n        this._convGen(node.cond, true);\r\n        this.addCode(this.makeJumpIfFalse(labelEnd));\r\n        // ブロックを追加\r\n        this.convGenLoop(node.block);\r\n        this.addCode(this.makeJump(labelBegin));\r\n        this.addCode(labelEnd);\r\n        this.flagLoop = false;\r\n        return '';\r\n    }\r\n    /**\r\n     * @param {Ast} _node\r\n     * @param {boolean} _isExpression\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    convSpeedMode(_node, _isExpression) {\r\n        return '';\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     */\r\n    convPerformanceMonitor(node, isExpression) {\r\n        const prev = { ...this.performanceMonitor };\r\n        if (node.options['ユーザ関数']) {\r\n            this.performanceMonitor.userFunction++;\r\n        }\r\n        if (node.options['システム関数本体']) {\r\n            this.performanceMonitor.systemFunctionBody++;\r\n        }\r\n        if (node.options['システム関数']) {\r\n            this.performanceMonitor.systemFunction++;\r\n        }\r\n        this._convGen(node.block, isExpression);\r\n        this.performanceMonitor = prev;\r\n    }\r\n    convSwitch(node) {\r\n        // 値をPUSH\r\n        this._convGen(node.value, true);\r\n        const varValue = `sys.__tmp__i${this.loopId++}`;\r\n        this.addCodeStr(`${varValue} = sys.__stack.pop()`);\r\n        const labelEnd = this.makeLabel('条件分岐:ここまで');\r\n        const cases = node.cases;\r\n        for (let i = 0; i < cases.length; i++) {\r\n            const cvalue = cases[i][0];\r\n            if (cvalue.type === '違えば') {\r\n                this.convGenLoop(cases[i][1]);\r\n            }\r\n            else {\r\n                const nextLabel = this.makeLabel('条件分岐:次');\r\n                this._convGen(cvalue, true);\r\n                this.addCodeStr(`sys.__stack.push(sys.__stack.pop() == ${varValue})`);\r\n                this.addCode(this.makeJumpIfFalse(nextLabel));\r\n                this.convGenLoop(cases[i][1]);\r\n                this.addCode(this.makeJump(labelEnd));\r\n                this.addCode(nextLabel);\r\n            }\r\n        }\r\n        this.addCode(labelEnd);\r\n        this.addCodeStr(`delete ${varValue}//条件分岐:掃除`);\r\n        return '';\r\n    }\r\n    convFuncGetArgsCalcType(funcName, func, node) {\r\n        const opts = {};\r\n        for (let i = 0; i < node.args.length; i++) {\r\n            const arg = node.args[i];\r\n            if (i === 0 && arg === null) {\r\n                this.addCodeStr('sys.__stack.push(sys.__vars[\\'それ\\'])');\r\n                opts.sore = true;\r\n            }\r\n            else {\r\n                // 関数の引数を評価\r\n                this._convGen(arg, true);\r\n            }\r\n        }\r\n        return opts;\r\n    }\r\n    getPluginList() {\r\n        const r = [];\r\n        for (const name in this.__self.__module) {\r\n            r.push(name);\r\n        }\r\n        return r;\r\n    }\r\n    /**\r\n     * 関数の呼び出し\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     * @returns string コード\r\n     */\r\n    convFunc(node, isExpression) {\r\n        let isJSFunc = false;\r\n        let isMumeiFunc = false;\r\n        const funcName = NakoGen.getFuncName(node.name);\r\n        const res = this.findVar(funcName);\r\n        if (res === null) {\r\n            throw NakoSyntaxError.fromNode(`関数『${funcName}』が見当たりません。有効プラグイン=[` + this.getPluginList().join(', ') + ']', node);\r\n        }\r\n        let func;\r\n        if (res.i === 0) { // plugin function\r\n            func = this.__self.getFunc(funcName);\r\n            if (func.type !== 'func') {\r\n                throw NakoSyntaxError.fromNode(`『${funcName}』は関数ではありません。`, node);\r\n            }\r\n            isJSFunc = true;\r\n        }\r\n        else {\r\n            func = this.nakoFuncList[funcName];\r\n            // 無名関数の可能性\r\n            if (func === undefined) {\r\n                isMumeiFunc = true;\r\n                func = { return_none: false };\r\n            }\r\n        }\r\n        // 関数の参照渡しか？\r\n        if (node.type === 'func_pointer') {\r\n            return res.js;\r\n        }\r\n        // 関数の参照渡しでない場合\r\n        // 関数定義より助詞を一つずつ調べる\r\n        const argsOpts = this.convFuncGetArgsCalcType(funcName, func, node);\r\n        // function\r\n        this.usedFuncSet.add(funcName);\r\n        let funcBegin = '';\r\n        let funcEnd = '';\r\n        // setter?\r\n        if (node.setter) {\r\n            funcBegin += ';__self.isSetter = true;\\n';\r\n            funcEnd += ';__self.isSetter = false;\\n';\r\n        }\r\n        // 変数「それ」が補完されていることをヒントとして出力\r\n        if (argsOpts.sore) {\r\n            funcBegin += '/*[sore]*/';\r\n        }\r\n        // 引数をスタックに積む\r\n        const arcCount = node.args.length;\r\n        // 必要な引数分だけスタックから下ろして呼び出す\r\n        let code = '';\r\n        if (isJSFunc) {\r\n            code += funcBegin;\r\n            code += `const args = sys.__stack.splice(sys.__stack.length - ${arcCount}, ${arcCount});\\n`;\r\n            // code += `console.log(\"call:${funcName}\", args, 'sys');\\n`\r\n            code += 'args.push(sys);\\n';\r\n            code += `const ret = ${res.js}.apply(sys, args);\\n`;\r\n            if (!func.return_none) {\r\n                code += 'sys.__vars[\\'それ\\'] = ret;\\n';\r\n                if (isExpression) {\r\n                    code += 'sys.__stack.push(ret);\\n';\r\n                }\r\n            }\r\n            code += funcEnd;\r\n            this.addCodeStr(code);\r\n        }\r\n        else {\r\n            if (isMumeiFunc) {\r\n                this.addCode(new NakoCode(NakoCodeCallObj, funcName));\r\n            }\r\n            else {\r\n                this.addCode(new NakoCode(NakoCodeCall, funcName));\r\n            }\r\n            if (!isExpression) {\r\n                this.addCodeStr('sys.__stack.pop();// 戻り値を利用しない関数呼出');\r\n            }\r\n        }\r\n    }\r\n    convRenbun(node) {\r\n        this._convGen(node.left, false);\r\n        this._convGen(node.right, true);\r\n    }\r\n    convOp(node) {\r\n        const OP_TBL = {\r\n            '&': '+\"\"+',\r\n            eq: '==',\r\n            noteq: '!=',\r\n            '===': '===',\r\n            '!==': '!==',\r\n            gt: '>',\r\n            lt: '<',\r\n            gteq: '>=',\r\n            lteq: '<=',\r\n            and: '&&',\r\n            or: '||',\r\n            shift_l: '<<',\r\n            shift_r: '>>',\r\n            shift_r0: '>>>',\r\n            '÷': '/'\r\n        };\r\n        const op = node.operator; // 演算子\r\n        // 値はスタックに載せられる\r\n        // left\r\n        this._convGen(node.left, true);\r\n        // right\r\n        this._convGen(node.right, true);\r\n        // calc\r\n        let code = 'const rv = sys.__stack.pop();\\n' +\r\n            'const lv = sys.__stack.pop();\\n';\r\n        if (op === '^') {\r\n            code += 'const v = (Math.pow(lv, rv))\\n';\r\n        }\r\n        else {\r\n            const op2 = OP_TBL[op] || op;\r\n            code += `const v = ((lv) ${op2} (rv));\\n`;\r\n        }\r\n        // code += `if (isNaN(v) && '${op}' != '&') { console.log('ERROR:${op}', lv, rv) }\\n`\r\n        code += `sys.__stack.push(v); //op:${op}\\n`;\r\n        this.addCodeStr(code);\r\n    }\r\n    convLet(node) {\r\n        let code = '';\r\n        // 値をスタックに載せる\r\n        if (node.value === null) {\r\n            // 値が省略されたら「それ」を載せる\r\n            this.addCodeStr('sys.__stack.push(sys.__vars[\\'それ\\'])');\r\n        }\r\n        else {\r\n            // 値がある場合\r\n            this._convGen(node.value, true);\r\n        }\r\n        // 変数名\r\n        const name = node.name.value;\r\n        const res = this.findVar(name);\r\n        if (res === null) {\r\n            this.varsSet.names.add(name);\r\n            code = `${this.varname(name)}=sys.__stack.pop();`;\r\n        }\r\n        else {\r\n            // 定数ならエラーを出す\r\n            if (this.varslistSet[res.i].readonly.has(name)) {\r\n                throw NakoSyntaxError.fromNode(`定数『${name}』は既に定義済みなので、値を代入することはできません。`, node);\r\n            }\r\n            code = `${res.js}=sys.__stack.pop();`;\r\n        }\r\n        this.addCodeStr(code + '//let');\r\n    }\r\n    convDefLocalVar(node) {\r\n        if (node.value === null) {\r\n            this.addCodeStr('sys.__stack.push(null)');\r\n        }\r\n        else {\r\n            this._convGen(node.value, true);\r\n        }\r\n        const name = node.name.value;\r\n        const vtype = node.vartype; // 変数 or 定数\r\n        // 二重定義？\r\n        if (this.varsSet.names.has(name)) {\r\n            throw NakoSyntaxError.fromNode(`${vtype}『${name}』の二重定義はできません。`, node);\r\n        }\r\n        this.varsSet.names.add(name);\r\n        // 定数?\r\n        if (vtype === '定数') {\r\n            this.varsSet.readonly.add(name);\r\n        }\r\n        this.addCodeStr(`${this.varname(name)}=sys.__stack.pop()`);\r\n        return '';\r\n    }\r\n    // #563 複数変数への代入\r\n    convDefLocalVarlist(node) {\r\n        const vtype = node.vartype; // 変数 or 定数\r\n        if (node.value === null) {\r\n            this.addCodeStr('sys.__stack.push(null)');\r\n        }\r\n        else {\r\n            this._convGen(node.value, true);\r\n        }\r\n        const varI = `sys.__tmp_i${this.loopId}`;\r\n        this.loopId++;\r\n        this.addCodeStr(`${varI}=sys.__stack.pop();if (!(${varI} instanceof Array)) { ${varI}=[${varI}] }`);\r\n        for (const nameObj of node.names) {\r\n            const name = nameObj.value;\r\n            // 二重定義？\r\n            if (this.varsSet.names.has(name)) {\r\n                throw NakoSyntaxError.fromNode(`${vtype}『${name}』の二重定義はできません。`, node);\r\n            }\r\n            //\r\n            this.varsSet.names.add(name);\r\n            if (vtype === '定数') {\r\n                this.varsSet.readonly.add(name);\r\n            }\r\n            const vname = this.varname(name);\r\n            this.addCodeStr(`${vname}=${varI}.pop()`);\r\n        }\r\n        this.addCodeStr(`delete ${varI}//複数代入:掃除`);\r\n        return '';\r\n    }\r\n    convString(node) {\r\n        let value = '' + node.value;\r\n        const mode = node.mode;\r\n        value = value.replace(/\\\\/g, '\\\\\\\\');\r\n        value = value.replace(/\"/g, '\\\\\"');\r\n        value = value.replace(/\\r/g, '\\\\r');\r\n        value = value.replace(/\\n/g, '\\\\n');\r\n        if (mode === 'ex') {\r\n            throw new Error('[システムエラー] ジェネレーターでの文字列の展開はサポートしていません');\r\n        }\r\n        this.addCodeStr(`sys.__stack.push(\"${value}\")//string`);\r\n        return '\"' + value + '\"';\r\n    }\r\n    convTryExcept(node) {\r\n        const labelExcept = this.makeLabel('エラー監視:ならば');\r\n        const labelEnd = this.makeLabel('エラー監視:ここまで');\r\n        // エラーをひっかけるように設定\r\n        this.addCode(new NakoCode(NakoCodeTry, labelExcept.value));\r\n        this._convGen(node.block, false);\r\n        this.addCode(this.makeJump(labelEnd));\r\n        this.addCode(labelExcept);\r\n        this._convGen(node.errBlock, false);\r\n        this.addCode(labelEnd);\r\n    }\r\n}\r\n// ブラウザに登録する\r\nif (typeof (navigator) === 'object' && typeof (navigator.nako3) === 'object') {\r\n    // Webブラウザの場合\r\n    const nako3 = navigator.nako3;\r\n    if (nako3.addCodeGenerator) {\r\n        nako3.addCodeGenerator('非同期モード', NakoGenASync);\r\n    }\r\n}\r\n"],"names":["version","major","minor","patch","NakoError","Error","constructor","tag","msg","file","undefined","line","positionJa","super","replace","this","name","type","NakoSyntaxError","startOffset","endOffset","static","first","last","NakoRuntimeError","error","lineNo","matches","message","exec","parseInt","NakoGen","com","nakoFuncList","getNakoFuncList","nakoTestFuncs","usedFuncSet","Set","loopId","numAsyncFn","usedAsyncFn","flagLoop","__self","genMode","lastLineNo","varslistSet","__varslist","map","v","isFunction","names","Object","keys","readonly","varsSet","speedMode","lineNumbers","implicitTypeCasting","invalidSore","forcePure","performanceMonitor","userFunction","systemFunction","systemFunctionBody","mumeiId","warnUndefinedVar","constPools","warnUndefinedReturnUserFunc","warnUndefinedCallingUserFunc","warnUndefinedCallingSystemFunc","warnUndefinedCalledUserFuncArgs","debugOption","test","convLineno","node","forceUpdate","incLine","lineNoStr","lineDataJSON","JSON","stringify","debugCode","useDebug","messageAction","waitTime","varname","length","isValidIdentifier","indexOf","a","split","getFuncName","name2","convRequire","moduleName","value","getDefFuncCode","opt","code","getModList","nakoFuncCode","key","f","fn","asyncFn","isTest","testCode","addPlugin","po","addPluginObject","addPluginFile","objName","path","addFunc","josi","getFunc","registerFunction","ast","funcList","registFunc","block","blockList","Array","i","t","add","meta","push","initialNames","convGen","result","_convGen","isExpression","n","blocks","b","convComment","convCheckLoop","convString","convDefLocalVar","convDefLocalVarlist","convLet","convInc","convGetVar","convOp","convRenbun","convCallFunc","convIf","convTikuji","convFor","convForeach","convRepeatTimes","convSpeedMode","convPerformanceMonitor","convWhile","convAtohantei","convSwitch","convLetArray","convRefArray","convJsonArray","convJsonObj","convFuncObj","convDefTest","convDefFunc","convReturn","convTryExcept","findVar","has","isTop","js","genVar","position","res","lno","dispName","getLogger","warn","pv","getNakoFunc","commentSrc","String","poolIndex","cmd","cmdj","convDefFuncCommon","performanceMonitorInjectAtStart","performanceMonitorInjectAtEnd","variableDeclarations","varsDeclared","from","values","varnames","word","oldUsedAsyncFn","join","includes","pop","e","list","index","codeInit","codeArray","checkInit","arrayDefCode","convGenLoop","tmpflag","varName","idLoop","varI","kara","made","to","flagDown","inc","varFrom","varTo","sorePrefex","target","nameS","id","options","prev","cond","varId","cases","body","cvalue","cblock","expr","falseBlock","false_block","curName","errorCode","errorBlock","convFuncGetArgsCalcType","_funcName","_func","args","opts","nodeArgs","arg","sore","getPluginList","r","__module","funcName","func","return_none","argsInfo","argsOpts","funcDef","funcBegin","funcEnd","setter","pure","localVars","str","indent","text","repeat","noCheckFuncs","argsCode","argsA","forEach","argStr","funcCall","right","left","OP_TBL","eq","noteq","gt","lt","gteq","lteq","and","or","shift_l","shift_r","shift_r0","op","operator","jsName","nodeName","vtype","vartype","mode","rf","errBlock","getUsedFuncSet","getPluginInitCode","pluginCode","initkey","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","NakoCodeNop","NakoCodeLabel","NakoCodeEOL","NakoCodeJump","NakoCodeJumpIfTrue","NakoCodeJumpIfFalse","NakoCodeCall","NakoCodeCallObj","NakoCodeReturn","NakoCodeTry","NakoCodeCode","NakoCode","no","NakoGenASync","nakoTestList","codeId","labelContinue","labelBreak","labels","gen","trace","runtimeEnv","standalone","getVarsCode","toString","needToFixAddr","codes","filter","usedLabels","splice","s","addCode","addCodeStr","convFunc","codeStr","a2","row","c","makeLabel","uniqLabel","makeLabelDirectly","labelName","makeJump","label","makeJumpIfTrue","makeJumpIfFalse","labelBegin","labelEnd","labelIfFalse","loopVar","loopCount","labelCheck","isMumeiFunc","codeCall","size","labelInc","taisyo","taisyoKey","targetArray","targetKeys","initCode","setTarget","_node","_isExpression","varValue","nextLabel","isJSFunc","arcCount","nameObj","vname","labelExcept","navigator","nako3","addCodeGenerator"],"sourceRoot":""}