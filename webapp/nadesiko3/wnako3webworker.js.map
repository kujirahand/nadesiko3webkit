{"version":3,"file":"wnako3webworker.js","mappings":"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","sources":["webpack://nadesiko3/./core/src/nako_core_version.mjs","webpack://nadesiko3/./core/src/nako_errors.mjs","webpack://nadesiko3/./core/src/nako_gen.mjs","webpack://nadesiko3/./core/src/nako_gen_async.mjs","webpack://nadesiko3/./core/src/nako_josi_list.mjs","webpack://nadesiko3/./core/src/nako_reserved_words.mjs","webpack://nadesiko3/./core/src/plugin_system.mjs","webpack://nadesiko3/webpack/bootstrap","webpack://nadesiko3/webpack/runtime/define property getters","webpack://nadesiko3/webpack/runtime/hasOwnProperty shorthand","webpack://nadesiko3/webpack/runtime/make namespace object","webpack://nadesiko3/./core/src/nako_parser_const.mjs","webpack://nadesiko3/./core/src/nako_types.mjs","webpack://nadesiko3/./core/src/nako_parser_base.mjs","webpack://nadesiko3/./core/src/nako_indent_chars.mjs","webpack://nadesiko3/./core/src/nako_lex_rules.mjs","webpack://nadesiko3/./core/src/nako_lexer.mjs","webpack://nadesiko3/./core/src/nako_parser3.mjs","webpack://nadesiko3/./core/src/nako_prepare.mjs","webpack://nadesiko3/./core/src/nako_tools.mjs","webpack://nadesiko3/./core/src/nako_indent_inline.mjs","webpack://nadesiko3/./core/src/nako_from_dncl.mjs","webpack://nadesiko3/./core/src/nako_from_dncl2.mjs","webpack://nadesiko3/./core/src/nako_source_mapping.mjs","webpack://nadesiko3/./core/src/nako_colors.mjs","webpack://nadesiko3/./core/src/nako_logger.mjs","webpack://nadesiko3/./core/src/nako_global.mjs","webpack://nadesiko3/./core/src/plugin_math.mjs","webpack://nadesiko3/./core/src/nako_csv.mjs","webpack://nadesiko3/./core/src/plugin_csv.mjs","webpack://nadesiko3/./core/src/plugin_promise.mjs","webpack://nadesiko3/./core/src/plugin_test.mjs","webpack://nadesiko3/./core/src/nako3.mjs","webpack://nadesiko3/./src/plugin_browser_color.mjs","webpack://nadesiko3/./src/plugin_browser_ajax.mjs","webpack://nadesiko3/./src/plugin_browser_in_worker.mjs","webpack://nadesiko3/./src/plugin_browser_html.mjs","webpack://nadesiko3/./src/plugin_browser_websocket.mjs","webpack://nadesiko3/./src/plugin_worker.mjs","webpack://nadesiko3/./src/wnako3webworker.mjs"],"sourcesContent":["// 実際のバージョン定義 (自動生成されるので以下を編集しない)\r\nconst coreVersion = {\r\n    version: '3.4.12',\r\n    major: 3,\r\n    minor: 4,\r\n    patch: 12\r\n};\r\nexport default coreVersion;\r\n","/**\r\n * なでしこ言語が投げる全てのエラーが継承するクラス\r\n */\r\nexport class NakoError extends Error {\r\n    constructor(tag, msg, file = undefined, line = undefined) {\r\n        // エラー位置を分かりやすく日本語に変換\r\n        const positionJa = `${file || ''}${line === undefined ? '' : `(${line + 1}行目): `}`;\r\n        // #1223 エラーメッセージに「main__関数名」と表示されるので、main__は省略して表示\r\n        msg = msg.replace(/『main__(.+?)』/g, '『$1』');\r\n        // 親のErrorを呼ぶ\r\n        super(`[${tag}]${positionJa}${msg}`);\r\n        // エラーの種類を設定\r\n        this.name = 'NakoError';\r\n        this.type = 'NakoError';\r\n        this.tag = '[' + tag + ']';\r\n        this.positionJa = positionJa;\r\n        this.msg = msg;\r\n    }\r\n}\r\nexport class NakoIndentError extends NakoError {\r\n    /**\r\n     * @param {string} msg\r\n     * @param {number} line\r\n     * @param {string} file\r\n     */\r\n    constructor(msg, line, file) {\r\n        super('インデントエラー', msg, file, line);\r\n        this.type = 'NakoIndentError';\r\n        this.line = line;\r\n        this.file = file;\r\n    }\r\n}\r\n// コンパイラの内部でのみ使うエラー。投げられたらtryでキャッチしてLexerErrorへ変更する。\r\nexport class InternalLexerError extends NakoError {\r\n    /**\r\n     * @param {string} msg\r\n     * @param {number} preprocessedCodeStartOffset\r\n     * @param {number} preprocessedCodeEndOffset\r\n     * @param {number | undefined} [line]\r\n     * @param {string | undefined} [file]\r\n     */\r\n    constructor(msg, preprocessedCodeStartOffset, preprocessedCodeEndOffset, line, file) {\r\n        super('字句解析エラー（内部エラー）', msg, file, line);\r\n        this.type = 'InternalLexerError';\r\n        this.preprocessedCodeStartOffset = preprocessedCodeStartOffset;\r\n        this.preprocessedCodeEndOffset = preprocessedCodeEndOffset;\r\n        this.line = line;\r\n        this.file = file;\r\n    }\r\n}\r\nexport class NakoLexerError extends NakoError {\r\n    /**\r\n     * @param {string} msg\r\n     * @param {number | null} startOffset\r\n     * @param {number | null} endOffset,\r\n     * @param {number | undefined} line\r\n     * @param {string | undefined} file\r\n     */\r\n    constructor(msg, startOffset, endOffset, line, file) {\r\n        super('字句解析エラー', msg, file, line);\r\n        this.type = 'NakoLexerError';\r\n        this.startOffset = startOffset;\r\n        this.endOffset = endOffset;\r\n        this.line = line;\r\n        this.file = file;\r\n    }\r\n}\r\nexport class NakoSyntaxError extends NakoError {\r\n    /**\r\n     * @param {string} msg\r\n     * @param {number | undefined} line\r\n     * @param {number | undefined} startOffset\r\n     * @param {number | undefined} endOffset\r\n     * @param {string | undefined} file\r\n     */\r\n    constructor(msg, line, startOffset, endOffset, file) {\r\n        super('文法エラー', msg, file, line);\r\n        this.type = 'NakoSyntaxError';\r\n        this.file = file;\r\n        this.line = line;\r\n        this.startOffset = startOffset;\r\n        this.endOffset = endOffset;\r\n    }\r\n    /**\r\n     * @param {string} msg\r\n     * @param {Ast} first\r\n     * @param {Ast} [last]\r\n     */\r\n    static fromNode(msg, first, last = undefined) {\r\n        if (!first) {\r\n            return new NakoSyntaxError(msg, undefined, undefined, undefined, undefined);\r\n        }\r\n        const startOffset = typeof first.startOffset === 'number' ? first.startOffset : undefined;\r\n        const endOffset = (last && typeof last.endOffset === 'number')\r\n            ? last.endOffset\r\n            : (typeof first.endOffset === 'number' ? first.endOffset : undefined);\r\n        return new NakoSyntaxError(msg, first.line, startOffset, endOffset, first.file);\r\n    }\r\n}\r\nexport class NakoRuntimeError extends NakoError {\r\n    /**\r\n     * @param error エラー\r\n     * @param lineNo 発生行\r\n     */\r\n    constructor(error, lineNo) {\r\n        let msg = 'unknown';\r\n        if (typeof error === 'string') {\r\n            msg = error;\r\n        }\r\n        else {\r\n            if (error instanceof NakoRuntimeError) {\r\n                msg = error.msg;\r\n            }\r\n            else if (error instanceof NakoError) {\r\n                msg = error.msg;\r\n            }\r\n            else if (error instanceof Error) {\r\n                if (error.name === 'Error') {\r\n                    msg = error.message;\r\n                }\r\n                else {\r\n                    msg = `${error.name}: ${error.message}`;\r\n                }\r\n            }\r\n        }\r\n        // 行番号を表す文字列をパースする。\r\n        let line;\r\n        let file;\r\n        let matches;\r\n        if (lineNo === undefined) {\r\n            line = undefined;\r\n            file = undefined;\r\n            // eslint-disable-next-line no-cond-assign\r\n        }\r\n        else if (matches = /^l(-?\\d+):(.*)$/.exec(lineNo)) {\r\n            line = parseInt(matches[1]);\r\n            file = matches[2];\r\n            // eslint-disable-next-line no-cond-assign\r\n        }\r\n        else if (matches = /^l(-?\\d+)$/.exec(lineNo)) {\r\n            line = parseInt(matches[1]);\r\n            file = 'main.nako3';\r\n        }\r\n        else {\r\n            line = 0;\r\n            file = lineNo;\r\n        }\r\n        super('実行時エラー', msg, file, line);\r\n        this.type = 'NakoRuntimeError';\r\n        this.lineNo = lineNo;\r\n        this.line = line;\r\n        this.file = file;\r\n    }\r\n}\r\nexport class NakoImportError extends NakoError {\r\n    /**\r\n     * @param {string} msg\r\n     * @param {string} file\r\n     * @param {number} line\r\n     */\r\n    constructor(msg, file, line) {\r\n        super('取り込みエラー', msg, file, line);\r\n        this.file = file;\r\n        this.line = line;\r\n    }\r\n}\r\n","/**\r\n * パーサーが生成した中間オブジェクトを実際のJavaScriptのコードに変換する。\r\n * なお速度優先で忠実にJavaScriptのコードを生成する。\r\n */\r\nimport { NakoSyntaxError } from './nako_errors.mjs';\r\n// なでしこで定義した関数の開始コードと終了コード\r\nconst topOfFunction = '(function(){\\n';\r\nconst endOfFunction = '})';\r\nconst topOfFunctionAsync = '(async function(){\\n';\r\n/** コード生成オプション */\r\nexport class NakoGenOptions {\r\n    constructor(isTest = false, importFiles = [], codeStandalone = '', convEnv = '') {\r\n        this.isTest = isTest;\r\n        this.codeStandalone = codeStandalone;\r\n        this.codeEnv = convEnv;\r\n        this.importFiles = ['plugin_system.mjs', 'plugin_math.mjs', 'plugin_csv.mjs', 'plugin_promise.mjs', 'plugin_test.mjs'];\r\n        for (const fname of importFiles) {\r\n            this.importFiles.push(fname);\r\n        }\r\n    }\r\n}\r\n/**\r\n * 構文木からJSのコードを生成するクラス\r\n */\r\nexport class NakoGen {\r\n    /** constructor\r\n     * @param com コンパイラのインスタンス\r\n     */\r\n    constructor(com) {\r\n        /**\r\n         * 出力するJavaScriptコードのヘッダー部分で定義する必要のある関数。fnはjsのコード。\r\n         * プラグイン関数は含まれない。\r\n         */\r\n        this.nakoFuncList = { ...com.getNakoFuncList() };\r\n        /**\r\n         * なでしこで定義したテストの一覧\r\n         */\r\n        this.nakoTestFuncs = {};\r\n        /**\r\n         * プログラム内で参照された関数のリスト。プラグインの命令を含む。\r\n         * JavaScript単体で実行するとき、このリストにある関数の定義をJavaScriptコードの先頭に付け足す。\r\n         */\r\n        this.usedFuncSet = new Set();\r\n        /**\r\n         * ループ時の一時変数が被らないようにIDで管理\r\n         */\r\n        this.loopId = 1;\r\n        /**\r\n         * 非同関数を何回使ったか\r\n         */\r\n        this.numAsyncFn = 0;\r\n        /**\r\n         * 関数定義の際、関数の中でasyncFn=trueの関数を呼び出したかどうかを調べる @see convDefFuncCommon\r\n         */\r\n        this.usedAsyncFn = false;\r\n        /** 変換中の処理が、ループの中かどうかを判定する */\r\n        this.flagLoop = false;\r\n        this.__self = com;\r\n        /** コードジェネレータの種類 */\r\n        this.genMode = 'sync';\r\n        /** 行番号とファイル名が分かるときは `l123:main.nako3`、行番号だけ分かるときは `l123`、そうでなければ任意の文字列。 */\r\n        this.lastLineNo = null;\r\n        /** スタック */\r\n        this.varslistSet = com.__varslist.map((v) => ({ isFunction: false, names: new Set(Object.keys(v)), readonly: new Set() }));\r\n        /** スタックトップ */\r\n        this.varsSet = { isFunction: false, names: new Set(), readonly: new Set() };\r\n        this.varslistSet[2] = this.varsSet;\r\n        // 1以上のとき高速化する。\r\n        // 実行速度優先ブロック内で1増える。\r\n        this.speedMode = {\r\n            lineNumbers: 0,\r\n            implicitTypeCasting: 0,\r\n            invalidSore: 0,\r\n            forcePure: 0 // 全てのシステム命令をpureとして扱う。命令からローカル変数への参照が出来なくなる。\r\n        };\r\n        // 1以上のとき測定をinjectする。\r\n        // パフォーマンスモニタのブロック内で1増える。\r\n        this.performanceMonitor = {\r\n            userFunction: 0,\r\n            systemFunction: 0,\r\n            systemFunctionBody: 0,\r\n            mumeiId: 0\r\n        };\r\n        /**\r\n         * 未定義の変数の警告を行う\r\n         */\r\n        this.warnUndefinedVar = true;\r\n        this.constPools = [];\r\n        // 暫定変数\r\n        this.warnUndefinedReturnUserFunc = 1;\r\n        this.warnUndefinedCallingUserFunc = 1;\r\n        this.warnUndefinedCallingSystemFunc = 1;\r\n        this.warnUndefinedCalledUserFuncArgs = 1;\r\n        this.debugOption = com.debugOption;\r\n    }\r\n    static isValidIdentifier(name) {\r\n        // TODO: いらなそうな部分は削る\r\n        // https://stackoverflow.com/a/9337047\r\n        // eslint-disable-next-line no-misleading-character-class\r\n        return /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/.test(name);\r\n    }\r\n    /**\r\n     * 改行を埋め込む\r\n     */\r\n    convLineno(node, forceUpdate = false, incLine = 0) {\r\n        // スピードモードでは行番号を埋め込まない\r\n        if (this.speedMode.lineNumbers > 0) {\r\n            return '';\r\n        }\r\n        const lineNo = node.line + incLine;\r\n        let lineNoStr;\r\n        if (typeof node.line !== 'number') {\r\n            lineNoStr = 'unknown';\r\n        }\r\n        else if (typeof node.file !== 'string') {\r\n            lineNoStr = `l${lineNo}`;\r\n        }\r\n        else {\r\n            lineNoStr = `l${lineNo}:${node.file}`;\r\n        }\r\n        // 強制的に行番号をアップデートするか\r\n        if (!forceUpdate) {\r\n            if (lineNoStr === this.lastLineNo) {\r\n                return '';\r\n            }\r\n            this.lastLineNo = lineNoStr;\r\n        }\r\n        // 実行行のデータ\r\n        const lineDataJSON = JSON.stringify(lineNoStr);\r\n        // デバッグ実行か\r\n        let debugCode = '';\r\n        if (this.debugOption.useDebug) {\r\n            // messageAction\r\n            if (this.debugOption.messageAction) {\r\n                debugCode += `window.postMessage({action:'${this.debugOption.messageAction}',` +\r\n                    `line: ${lineDataJSON}});`;\r\n            }\r\n            // waitTime\r\n            if (lineNo >= 1) {\r\n                if (this.debugOption.waitTime > 0) {\r\n                    debugCode += `await __v0['秒待'](${this.debugOption.waitTime},__self);`;\r\n                }\r\n                // breakpoints\r\n                this.numAsyncFn += 1;\r\n                this.usedAsyncFn = true;\r\n                debugCode += `await __v0['__DEBUG_BP_WAIT'](${lineNo}, __self);`;\r\n            }\r\n            // end\r\n            debugCode += 'if(__v0.forceClose){return-1};';\r\n        }\r\n        // 例: __v0.line='l1:main.nako3'\r\n        return `__v0.line=${lineDataJSON};` + debugCode;\r\n    }\r\n    /**\r\n     * ローカル変数のJavaScriptコードを生成する。\r\n     * @param {string} name\r\n     */\r\n    varname(name) {\r\n        if (this.varslistSet.length === 3) {\r\n            // グローバル\r\n            return `__varslist[${2}][${JSON.stringify(name)}]`;\r\n        }\r\n        else {\r\n            // 関数内\r\n            if (NakoGen.isValidIdentifier(name)) {\r\n                return name;\r\n            }\r\n            else {\r\n                return `__vars[${JSON.stringify(name)}]`;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {string} name\r\n     * @returns {string}\r\n    */\r\n    static getFuncName(name) {\r\n        if (name.indexOf('__') >= 0) { // スコープがある場合\r\n            const a = name.split('__');\r\n            const scope = a[0];\r\n            const name3 = NakoGen.getFuncName(a[1]);\r\n            return `${scope}__${name3}`;\r\n        }\r\n        let name2 = name.replace(/[ぁ-ん]+$/, '');\r\n        if (name2 === '') {\r\n            name2 = name;\r\n        }\r\n        return name2;\r\n    }\r\n    /** @param {Ast} node */\r\n    static convPrint(node) {\r\n        return `__print(${node});`;\r\n    }\r\n    /** @param {Ast} node */\r\n    convRequire(node) {\r\n        const moduleName = node.value;\r\n        return this.convLineno(node, false) +\r\n            `__module['${moduleName}'] = require('${moduleName}');\\n`;\r\n    }\r\n    /**\r\n     * プログラムの実行に必要な関数定義を書き出す(グローバル領域)\r\n     * convGenの結果を利用するため、convGenの後に呼び出すこと。\r\n     * @param com\r\n     * @param opt\r\n     */\r\n    getDefFuncCode(com, opt) {\r\n        let code = '';\r\n        // よく使う変数のショートカット\r\n        code += `const nakoVersion = { version: ${JSON.stringify(com.version)} }\\n`;\r\n        code += 'const __self = self;\\n';\r\n        code += 'self.__self = self;\\n';\r\n        code += 'const __varslist = self.__varslist;\\n';\r\n        code += 'const __module = self.__module;\\n';\r\n        code += 'const __v0 = self.__v0 = self.__varslist[0];\\n';\r\n        code += 'const __v1 = self.__v1 = self.__varslist[1];\\n';\r\n        code += 'const __vars = self.__vars = self.__varslist[2];\\n';\r\n        code += `const __modList = self.__modList = ${JSON.stringify(com.getModList())}\\n`;\r\n        code += '__v0.line = 0;\\n';\r\n        code += '__v0.forceClose = false;\\n';\r\n        code += `__v0.useDebug = ${this.debugOption.useDebug};\\n`;\r\n        // 定数を埋め込む\r\n        code += 'self.constPools = ' + JSON.stringify(this.constPools) + ';\\n';\r\n        // なでしこの関数定義を行う\r\n        let nakoFuncCode = '';\r\n        for (const key in this.nakoFuncList) {\r\n            const f = this.nakoFuncList[key].fn;\r\n            const isAsync = this.nakoFuncList[key].asyncFn ? 'true' : 'false';\r\n            nakoFuncCode += '' +\r\n                `//[DEF_FUNC name='${key}' asyncFn=${isAsync}]\\n` +\r\n                `self.__varslist[1][\"${key}\"]=${f};\\n;` +\r\n                `//[/DEF_FUNC name='${key}']\\n`;\r\n        }\r\n        if (nakoFuncCode !== '') {\r\n            code += '__v0.line=\\'関数の定義\\';\\n' + nakoFuncCode;\r\n        }\r\n        // テストの定義を行う\r\n        if (opt.isTest) {\r\n            let testCode = 'const __tests = [];\\n';\r\n            for (const key in this.nakoTestFuncs) {\r\n                const f = this.nakoTestFuncs[key].fn;\r\n                testCode += `${f};\\n;`;\r\n            }\r\n            if (testCode !== '') {\r\n                code += '__v0.line=\\'テストの定義\\';\\n';\r\n                code += testCode + '\\n';\r\n            }\r\n        }\r\n        return code;\r\n    }\r\n    /**\r\n     * プラグイン・オブジェクトを追加\r\n     * @param po プラグイン・オブジェクト\r\n     */\r\n    addPlugin(po) {\r\n        return this.__self.addPlugin(po);\r\n    }\r\n    /**\r\n     * プラグイン・オブジェクトを追加(ブラウザ向け)\r\n     * @param name オブジェクト名\r\n     * @param po 関数リスト\r\n     */\r\n    addPluginObject(name, po) {\r\n        this.__self.addPluginObject(name, po);\r\n    }\r\n    /**\r\n     * プラグイン・ファイルを追加(Node.js向け)\r\n     * @param objName オブジェクト名\r\n     * @param path ファイルパス\r\n     * @param po 登録するオブジェクト\r\n     */\r\n    addPluginFile(objName, path, po) {\r\n        this.__self.addPluginFile(objName, path, po);\r\n    }\r\n    /**\r\n     * 関数を追加する\r\n     * @param key 関数名\r\n     * @param josi 助詞\r\n     * @param fn 関数\r\n     */\r\n    addFunc(key, josi, fn) {\r\n        this.__self.addFunc(key, josi, fn);\r\n    }\r\n    /**\r\n     * プラグイン関数を参照する\r\n     * @param key プラグイン関数の関数名\r\n     * @returns プラグイン・オブジェクト\r\n     */\r\n    getFunc(key) {\r\n        return this.__self.getFunc(key);\r\n    }\r\n    /**\r\n     * 関数を先に登録してしまう\r\n     */\r\n    registerFunction(ast) {\r\n        if (ast.type !== 'block') {\r\n            throw NakoSyntaxError.fromNode('構文解析に失敗しています。構文は必ずblockが先頭になります', ast);\r\n        }\r\n        /** 関数一覧 */\r\n        const funcList = [];\r\n        // なでしこ関数を定義して this.nako_func[name] に定義する\r\n        const registFunc = (node) => {\r\n            if (!node.block) {\r\n                return;\r\n            }\r\n            const blockList = (node.block instanceof Array) ? node.block : [node.block];\r\n            for (let i = 0; i < blockList.length; i++) {\r\n                const t = blockList[i];\r\n                if (t.type === 'def_func') {\r\n                    if (!t.name) {\r\n                        throw new Error('[System Error] 関数の定義で関数名が指定されていない');\r\n                    }\r\n                    const name = t.name.value;\r\n                    this.usedFuncSet.add(name);\r\n                    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                    this.__self.__varslist[1][name] = function () { }; // 事前に適当な値を設定\r\n                    this.varslistSet[1].names.add(name); // global\r\n                    const meta = (t.name).meta; // todo: 強制変換したが正しいかチェック\r\n                    this.nakoFuncList[name] = {\r\n                        josi: meta.josi,\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        fn: () => { },\r\n                        type: 'func',\r\n                        asyncFn: t.asyncFn\r\n                    };\r\n                    funcList.push({ name, node: t });\r\n                    // eslint-disable-next-line brace-style\r\n                }\r\n                // 実行速度優先 などのオプションが付いている場合の処理\r\n                else if (t.type === 'speed_mode') {\r\n                    if (!t.block) {\r\n                        continue;\r\n                    }\r\n                    if (t.block.type === 'block') {\r\n                        registFunc(t.block);\r\n                    }\r\n                    else {\r\n                        registFunc(t);\r\n                    }\r\n                }\r\n                else if (t.type === 'performance_monitor') {\r\n                    if (!t.block) {\r\n                        continue;\r\n                    }\r\n                    if (t.block.type === 'block') {\r\n                        registFunc(t.block);\r\n                    }\r\n                    else {\r\n                        registFunc(t);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        // 関数の登録\r\n        registFunc(ast);\r\n        // __self.__varslistの変更を反映\r\n        const initialNames = new Set();\r\n        if (this.speedMode.invalidSore === 0) {\r\n            initialNames.add('それ');\r\n        }\r\n        this.varsSet = { isFunction: false, names: initialNames, readonly: new Set() };\r\n        this.varslistSet = this.__self.__varslist.map((v) => ({ isFunction: false, names: new Set(Object.keys(v)), readonly: new Set() }));\r\n        this.varslistSet[2] = this.varsSet;\r\n    }\r\n    /**\r\n     * @param node\r\n     * @param opt\r\n     */\r\n    convGen(node, opt) {\r\n        const result = this.convLineno(node, false) + this._convGen(node, true);\r\n        if (opt.isTest) {\r\n            return '';\r\n        }\r\n        else {\r\n            return result;\r\n        }\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     */\r\n    _convGen(node, isExpression) {\r\n        if (!node) {\r\n            return '';\r\n        }\r\n        let code = '';\r\n        if (node instanceof Array) {\r\n            for (let i = 0; i < node.length; i++) {\r\n                const n = node[i];\r\n                code += this._convGen(n, isExpression);\r\n            }\r\n            return code;\r\n        }\r\n        if (node === null) {\r\n            return 'null';\r\n        }\r\n        if (node === undefined) {\r\n            return 'undefined';\r\n        }\r\n        if (typeof (node) !== 'object') {\r\n            return '' + node;\r\n        }\r\n        // switch\r\n        switch (node.type) {\r\n            case 'nop':\r\n                break;\r\n            case 'block':\r\n                if (!node.block) {\r\n                    return code;\r\n                }\r\n                // eslint-disable-next-line no-case-declarations\r\n                const blocks = (node.block instanceof Array) ? node.block : [node.block];\r\n                for (let i = 0; i < blocks.length; i++) {\r\n                    const b = blocks[i];\r\n                    code += this._convGen(b, false);\r\n                }\r\n                break;\r\n            case 'comment':\r\n            case 'eol':\r\n                code += this.convComment(node);\r\n                break;\r\n            case 'break':\r\n                code += this.convCheckLoop(node, 'break');\r\n                break;\r\n            case 'continue':\r\n                code += this.convCheckLoop(node, 'continue');\r\n                break;\r\n            case 'end':\r\n                code += '__v0[\\'終\\'](__self);';\r\n                break;\r\n            case 'number':\r\n                code += node.value;\r\n                break;\r\n            case 'string':\r\n                code += this.convString(node);\r\n                break;\r\n            case 'def_local_var':\r\n                code += this.convDefLocalVar(node);\r\n                break;\r\n            case 'def_local_varlist':\r\n                code += this.convDefLocalVarlist(node);\r\n                break;\r\n            case 'let':\r\n                code += this.convLet(node);\r\n                break;\r\n            case 'inc':\r\n                code += this.convInc(node);\r\n                break;\r\n            case 'word':\r\n            case 'variable':\r\n                code += this.convGetVar(node);\r\n                break;\r\n            case 'op':\r\n            case 'calc':\r\n                code += this.convOp(node);\r\n                break;\r\n            case 'renbun':\r\n                code += this.convRenbun(node);\r\n                break;\r\n            case 'not':\r\n                code += '((' + this._convGen(node.value, true) + ')?0:1)';\r\n                break;\r\n            case 'func':\r\n            case 'func_pointer':\r\n            case 'calc_func':\r\n                code += this.convCallFunc(node, isExpression);\r\n                break;\r\n            case 'if':\r\n                code += this.convIf(node);\r\n                break;\r\n            case 'tikuji':\r\n                code += this.convTikuji(node);\r\n                break;\r\n            case 'for':\r\n                code += this.convFor(node);\r\n                break;\r\n            case 'foreach':\r\n                code += this.convForeach(node);\r\n                break;\r\n            case 'repeat_times':\r\n                code += this.convRepeatTimes(node);\r\n                break;\r\n            case 'speed_mode':\r\n                code += this.convSpeedMode(node, isExpression);\r\n                break;\r\n            case 'performance_monitor':\r\n                code += this.convPerformanceMonitor(node, isExpression);\r\n                break;\r\n            case 'while':\r\n                code += this.convWhile(node);\r\n                break;\r\n            case 'atohantei':\r\n                code += this.convAtohantei(node);\r\n                break;\r\n            case 'switch':\r\n                code += this.convSwitch(node);\r\n                break;\r\n            case 'let_array':\r\n                code += this.convLetArray(node);\r\n                break;\r\n            case '配列参照':\r\n                code += this.convRefArray(node);\r\n                break;\r\n            case 'json_array':\r\n                code += this.convJsonArray(node);\r\n                break;\r\n            case 'json_obj':\r\n                code += this.convJsonObj(node);\r\n                break;\r\n            case 'func_obj':\r\n                code += this.convFuncObj(node);\r\n                break;\r\n            case 'bool':\r\n                code += (node.value) ? 'true' : 'false';\r\n                break;\r\n            case 'null':\r\n                code += 'null';\r\n                break;\r\n            case 'def_test':\r\n                code += this.convDefTest(node);\r\n                break;\r\n            case 'def_func':\r\n                code += this.convDefFunc(node);\r\n                break;\r\n            case 'return':\r\n                code += this.convReturn(node);\r\n                break;\r\n            case 'try_except':\r\n                code += this.convTryExcept(node);\r\n                break;\r\n            case 'require':\r\n                code += this.convRequire(node);\r\n                break;\r\n            default:\r\n                throw new Error('System Error: unknown_type=' + node.type);\r\n        }\r\n        return code;\r\n    }\r\n    /** 変数を検索 */\r\n    findVar(name) {\r\n        // __vars ? (ローカル変数)\r\n        if (this.varslistSet.length > 3 && this.varsSet.names.has(name)) {\r\n            return { i: this.varslistSet.length - 1, name, isTop: true, js: this.varname(name) };\r\n        }\r\n        // __varslist ?\r\n        for (let i = 2; i >= 0; i--) {\r\n            if (this.varslistSet[i].names.has(name)) {\r\n                // ユーザーの定義したグローバル変数 (__varslist[2]) は、変数展開されている（そのままの名前で定義されている）可能性がある。\r\n                // それ以外の変数は、必ず__varslistに入っている。\r\n                return { i, name, isTop: false, js: `__varslist[${i}][${JSON.stringify(name)}]` };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 定義済みの変数の参照\r\n     * @param {string} name\r\n     * @param {Ast} position\r\n     */\r\n    genVar(name, position) {\r\n        const res = this.findVar(name);\r\n        const lno = position.line;\r\n        if (res === null) {\r\n            // 定義されていない名前の参照は変数の定義とみなす。\r\n            // 多くの場合はundefined値を持つ変数であり分かりづらいバグを引き起こすが、\r\n            // 「ナデシコする」などの命令の中で定義された変数の参照の場合があるため警告に留める。\r\n            // ただし、自動的に定義される変数『引数』『それ』などは例外 #952\r\n            if (name === '引数' || name === 'それ' || name === '対象' || name === '対象キー') {\r\n                // デフォルト定義されている変数名\r\n            }\r\n            else {\r\n                if (this.warnUndefinedVar) {\r\n                    // main__は省略して表示するように。 #1223\r\n                    const dispName = name.replace(/^main__(.+)$/, '$1');\r\n                    this.__self.getLogger().warn(`変数『${dispName}』は定義されていません。`, position);\r\n                }\r\n            }\r\n            this.varsSet.names.add(name);\r\n            return this.varname(name);\r\n        }\r\n        const i = res.i;\r\n        // システム関数・変数の場合\r\n        if (i === 0) {\r\n            const pv = this.__self.getNakoFunc(name);\r\n            if (!pv) {\r\n                return `${res.js}/*err:${lno}*/`;\r\n            }\r\n            if (pv.type === 'const' || pv.type === 'var') {\r\n                return res.js;\r\n            }\r\n            if (pv.type === 'func') {\r\n                if (!pv.josi || pv.josi.length === 0) {\r\n                    return `(${res.js}())`;\r\n                }\r\n                throw NakoSyntaxError.fromNode(`『${name}』が複文で使われました。単文で記述してください。(v1非互換)`, position);\r\n            }\r\n            throw NakoSyntaxError.fromNode(`『${name}』は関数であり参照できません。`, position);\r\n        }\r\n        return res.js;\r\n    }\r\n    convGetVar(node) {\r\n        const name = node.value;\r\n        return this.genVar(name, node);\r\n    }\r\n    convComment(node) {\r\n        let commentSrc = String(node.value);\r\n        commentSrc = commentSrc.replace(/\\n/g, '¶');\r\n        const lineNo = this.convLineno(node, false);\r\n        if (commentSrc === '' && lineNo === '') {\r\n            return ';';\r\n        }\r\n        if (commentSrc === '') {\r\n            return ';' + lineNo + '\\n';\r\n        }\r\n        return ';' + lineNo + '//' + commentSrc + '\\n';\r\n    }\r\n    convReturn(node) {\r\n        // 関数の中であれば利用可能\r\n        if (this.varsSet.names.has('!関数')) {\r\n            throw NakoSyntaxError.fromNode('『戻る』がありますが、関数定義内のみで使用可能です。', node);\r\n        }\r\n        const lno = this.convLineno(node, false);\r\n        let value;\r\n        if (node.value) {\r\n            value = this._convGen(node.value, true);\r\n        }\r\n        else if (this.speedMode.invalidSore === 0) {\r\n            value = this.varname('それ');\r\n        }\r\n        else {\r\n            return lno + 'return;';\r\n        }\r\n        if (this.warnUndefinedReturnUserFunc === 0) {\r\n            return lno + `return ${value};`;\r\n        }\r\n        else {\r\n            const poolIndex = this.constPools.length;\r\n            this.constPools.push({\r\n                msg: 'ユーザ関数からundefinedが返されています',\r\n                file: node.file,\r\n                line: node.line\r\n            });\r\n            return lno + `return (__self.chk(${value}, ${poolIndex}));`;\r\n        }\r\n    }\r\n    convCheckLoop(node, cmd) {\r\n        // ループの中であれば利用可能\r\n        if (!this.flagLoop) {\r\n            const cmdj = (cmd === 'continue') ? '続ける' : '抜ける';\r\n            throw NakoSyntaxError.fromNode(`『${cmdj}』文がありますが、それは繰り返しの中で利用してください。`, node);\r\n        }\r\n        return this.convLineno(node) + cmd + ';';\r\n    }\r\n    convDefFuncCommon(node, name) {\r\n        // パフォーマンスモニタ:ユーザ関数のinjectの定義\r\n        let performanceMonitorInjectAtStart = '';\r\n        let performanceMonitorInjectAtEnd = '';\r\n        if (this.performanceMonitor.userFunction !== 0) {\r\n            let key = name;\r\n            if (!key) {\r\n                if (typeof this.performanceMonitor.mumeiId === 'undefined') {\r\n                    this.performanceMonitor.mumeiId = 0;\r\n                }\r\n                this.performanceMonitor.mumeiId++;\r\n                key = `anous_${this.performanceMonitor.mumeiId}`;\r\n            }\r\n            performanceMonitorInjectAtStart = 'const performanceMonitorEnd = (function (key, type) {\\n' +\r\n                'const uf_start = performance.now() * 1000;\\n' +\r\n                'return function () {\\n' +\r\n                'const el_time = performance.now() * 1000 - uf_start;\\n' +\r\n                'if (!__self.__performance_monitor) {\\n' +\r\n                '__self.__performance_monitor={};\\n' +\r\n                '__self.__performance_monitor[key] = { called:1, totel_usec: el_time, min_usec: el_time, max_usec: el_time, type: type };\\n' +\r\n                '} else if (!__self.__performance_monitor[key]) {\\n' +\r\n                '__self.__performance_monitor[key] = { called:1, totel_usec: el_time, min_usec: el_time, max_usec: el_time, type: type };\\n' +\r\n                '} else {\\n' +\r\n                '__self.__performance_monitor[key].called++;\\n' +\r\n                '__self.__performance_monitor[key].totel_usec+=el_time;\\n' +\r\n                'if(__self.__performance_monitor[key].min_usec>el_time){__self.__performance_monitor[key].min_usec=el_time;}\\n' +\r\n                'if(__self.__performance_monitor[key].max_usec<el_time){__self.__performance_monitor[key].max_usec=el_time;}\\n' +\r\n                `}};})('${key}', 'user');` +\r\n                'try {\\n';\r\n            performanceMonitorInjectAtEnd = '} finally { performanceMonitorEnd(); }\\n';\r\n        }\r\n        let variableDeclarations = '';\r\n        const popStack = '';\r\n        const initialNames = new Set();\r\n        if (this.speedMode.invalidSore === 0) {\r\n            initialNames.add('それ');\r\n        }\r\n        this.varsSet = { isFunction: true, names: initialNames, readonly: new Set() };\r\n        // ローカル変数をPUSHする\r\n        this.varslistSet.push(this.varsSet);\r\n        // JSの引数と引数をバインド\r\n        variableDeclarations += '  var 引数 = arguments;\\n';\r\n        // ローカル変数を生成\r\n        variableDeclarations += '  var __vars = {};\\n';\r\n        // 宣言済みの名前を保存\r\n        const varsDeclared = Array.from(this.varsSet.names.values());\r\n        let code = '';\r\n        // 引数をローカル変数に設定\r\n        const meta = (!name) ? node.meta : node.name.meta;\r\n        for (let i = 0; i < meta.varnames.length; i++) {\r\n            const word = meta.varnames[i];\r\n            if (this.warnUndefinedCalledUserFuncArgs === 0) {\r\n                code += `  ${this.varname(word)} = arguments[${i}];\\n`;\r\n            }\r\n            else if (name) {\r\n                code += `  ${this.varname(word)} = (function(a){if(a===undefined){__self.logger.warn('ユーザ関数(${name})の引数(${this.varname(word)})にundefinedが渡されました',{file:'${node.file}',line:${node.line}});};return a;})(arguments[${i}]);\\n`;\r\n            }\r\n            else {\r\n                code += `  ${this.varname(word)} = (function(a){if(a===undefined){__self.logger.warn('匿名関数の引数(${this.varname(word)})にundefinedが渡されました',{file:'${node.file}',line:${node.line}});};return a;})(arguments[${i}]);\\n`;\r\n            }\r\n            this.varsSet.names.add(word);\r\n        }\r\n        // 関数定義は、グローバル領域で。\r\n        if (name) {\r\n            this.usedFuncSet.add(name);\r\n            this.varslistSet[1].names.add(name);\r\n            if (this.nakoFuncList[name] === undefined) {\r\n                // 既に generate で作成済みのはず(念のため)\r\n                this.nakoFuncList[name] = {\r\n                    josi: node.name.meta.josi,\r\n                    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                    fn: () => { },\r\n                    type: 'func',\r\n                    asyncFn: false\r\n                };\r\n            }\r\n        }\r\n        // ブロックを解析\r\n        const oldUsedAsyncFn = this.usedAsyncFn;\r\n        this.usedAsyncFn = false || this.debugOption.useDebug;\r\n        const block = this._convGen(node.block, false);\r\n        code += block.split('\\n').map((line) => '  ' + line).join('\\n') + '\\n';\r\n        // 関数の最後に、変数「それ」をreturnするようにする\r\n        if (this.speedMode.invalidSore === 0) {\r\n            code += `  return (${this.varname('それ')});\\n`;\r\n        }\r\n        // パフォーマンスモニタ:ユーザ関数のinject\r\n        code += performanceMonitorInjectAtEnd;\r\n        // ブロックでasyncFnを使ったか\r\n        if (name && this.usedAsyncFn) {\r\n            this.nakoFuncList[name].asyncFn = true;\r\n        }\r\n        // 関数の末尾に、ローカル変数をPOP\r\n        // 関数内で定義されたローカル変数の宣言\r\n        for (const name of Array.from(this.varsSet.names.values())) {\r\n            if (!varsDeclared.includes(name)) {\r\n                if (NakoGen.isValidIdentifier(name)) {\r\n                    variableDeclarations += `  var ${name};\\n`;\r\n                }\r\n            }\r\n        }\r\n        if (this.speedMode.invalidSore === 0) {\r\n            if (NakoGen.isValidIdentifier('それ')) {\r\n                variableDeclarations += '  var それ = \\'\\';\\n';\r\n            }\r\n            else {\r\n                variableDeclarations += `  ${this.varname('それ')} = '';`;\r\n            }\r\n        }\r\n        // usedAsyncFnの値に応じて関数定義の方法を変更\r\n        const tof = (this.usedAsyncFn) ? topOfFunctionAsync : topOfFunction;\r\n        // 関数コード全体を構築\r\n        const lineInfo = '  ' + this.convLineno(node, true, 1) + '\\n';\r\n        code = tof + performanceMonitorInjectAtStart + variableDeclarations + lineInfo + code + popStack;\r\n        code += endOfFunction;\r\n        // 名前があれば、関数を登録する\r\n        if (name) {\r\n            this.nakoFuncList[name].fn = code;\r\n            this.nakoFuncList[name].asyncFn = this.usedAsyncFn;\r\n            meta.asyncFn = this.usedAsyncFn;\r\n        }\r\n        this.usedAsyncFn = oldUsedAsyncFn; // 以前の値を戻す\r\n        this.varslistSet.pop();\r\n        this.varsSet = this.varslistSet[this.varslistSet.length - 1];\r\n        if (name) {\r\n            this.__self.__varslist[1][name] = code;\r\n        }\r\n        return code;\r\n    }\r\n    convDefTest(node) {\r\n        const name = node.name.value;\r\n        let code = `__tests.push({ name: '${name}', f: () => {\\n`;\r\n        // ブロックを解析\r\n        const block = this._convGen(node.block, false);\r\n        code += `   ${block}\\n` +\r\n            '}});';\r\n        this.nakoTestFuncs[name] = {\r\n            josi: node.name.meta.josi,\r\n            fn: code,\r\n            type: 'test_func'\r\n        };\r\n        // ★この時点ではテストコードを生成しない★\r\n        // プログラム冒頭でコード生成時にテストの定義を行う\r\n        return '';\r\n    }\r\n    convDefFunc(node) {\r\n        // ※ [関数定義のメモ]\r\n        // ※ 関数の定義はプログラムの冒頭に移される。\r\n        // ※ そのため、生成されたコードはここでは返さない\r\n        // ※ registerFunction を参照\r\n        if (!node.name) {\r\n            return '';\r\n        }\r\n        const name = NakoGen.getFuncName(node.name.value);\r\n        this.convDefFuncCommon(node, name);\r\n        return '';\r\n    }\r\n    convFuncObj(node) {\r\n        return this.convDefFuncCommon(node, '');\r\n    }\r\n    convJsonObj(node) {\r\n        const list = node.value;\r\n        const codelist = list.map((e) => {\r\n            const key = this._convGen(e.key, true);\r\n            const val = this._convGen(e.value, true);\r\n            return `${key}:${val}`;\r\n        });\r\n        return '{' + codelist.join(',') + '}';\r\n    }\r\n    convJsonArray(node) {\r\n        const list = node.value;\r\n        const codelist = list.map((e) => {\r\n            return this._convGen(e, true);\r\n        });\r\n        return '[' + codelist.join(',') + ']';\r\n    }\r\n    convRefArray(node) {\r\n        const name = this._convGen(node.name, true);\r\n        const list = node.index;\r\n        let code = name;\r\n        if (!list) {\r\n            return code;\r\n        }\r\n        for (let i = 0; i < list.length; i++) {\r\n            const idx = this._convGen(list[i], true);\r\n            code += '[' + idx + ']';\r\n        }\r\n        return code;\r\n    }\r\n    convLetArray(node) {\r\n        const name = this._convGen(node.name, true);\r\n        const list = node.index || [];\r\n        let codeInit = '';\r\n        let code = name;\r\n        let codeArray = '';\r\n        // codeInit?\r\n        if (node.checkInit) {\r\n            const arrayDefCode = '[0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0]';\r\n            codeInit += `\\n/*配列初期化*/if (!(${name} instanceof Array)) { ${name} = ${arrayDefCode}; /*console.log('初期化:${name}')*/ };`;\r\n            for (let i = 0; i < list.length - 1; i++) {\r\n                const idx = this._convGen(list[i], true);\r\n                codeArray += `[${idx}]`;\r\n                codeInit += `\\n/*配列初期化${i}*/if (!(${name}${codeArray} instanceof Array)) { ${name}${codeArray} = ${arrayDefCode}; };`;\r\n                // codeInit += `\\n/*配列初期化${i}*/if (!(${name}${codeArray} instanceof Array)) { ${name}${codeArray} = ${arrayDefCode}; console.log('初期化:${i}:${name}${codeArray}',JSON.stringify(${name})) }; `\r\n            }\r\n            codeInit += '\\n';\r\n        }\r\n        // array\r\n        for (let i = 0; i < list.length; i++) {\r\n            const idx = this._convGen(list[i], true);\r\n            code += '[' + idx + ']';\r\n        }\r\n        // value\r\n        let value = null;\r\n        if (this.speedMode.invalidSore === 0) {\r\n            value = this.varname('それ');\r\n        }\r\n        if (node.value) {\r\n            value = this._convGen(node.value, true);\r\n        }\r\n        if (value == null) {\r\n            throw NakoSyntaxError.fromNode('代入する先の変数名がありません。', node);\r\n        }\r\n        code += ' = ' + value + ';\\n';\r\n        // generate code\r\n        const src = this.convLineno(node, false) + codeInit + code;\r\n        return src;\r\n    }\r\n    convGenLoop(node) {\r\n        const tmpflag = this.flagLoop;\r\n        this.flagLoop = true;\r\n        try {\r\n            return this._convGen(node, false);\r\n        }\r\n        finally {\r\n            this.flagLoop = tmpflag;\r\n        }\r\n    }\r\n    convFor(node) {\r\n        // ループ変数について\r\n        let word;\r\n        if (node.word !== null) { // ループ変数を使う時\r\n            const varName = node.word.value; // todo: Forの最初のパラメータが Token か Astか確認\r\n            this.varsSet.names.add(varName);\r\n            word = this.varname(varName);\r\n        }\r\n        else {\r\n            this.varsSet.names.add('dummy');\r\n            word = this.varname('dummy');\r\n        }\r\n        const idLoop = this.loopId++;\r\n        const varI = `$nako_i${idLoop}`;\r\n        // ループ条件を確認\r\n        const kara = this._convGen(node.from, true);\r\n        const made = this._convGen(node.to, true);\r\n        const flagDown = node.flagDown;\r\n        let inc = '1';\r\n        if (node.inc && node.inc !== 'null') {\r\n            inc = this._convGen(node.inc, true);\r\n        }\r\n        // ループ内のブロック内容を得る\r\n        const block = this.convGenLoop(node.block);\r\n        // ループ条件を変数に入れる用\r\n        const varFrom = `$nako_from${idLoop}`;\r\n        const varTo = `$nako_to${idLoop}`;\r\n        let sorePrefex = '';\r\n        if (this.speedMode.invalidSore === 0) {\r\n            sorePrefex = `${this.varname('それ')} = `;\r\n        }\r\n        const code = `\\n//[FOR id=${idLoop}]\\n` +\r\n            `const ${varFrom} = ${kara};\\n` +\r\n            `const ${varTo} = ${made};\\n` +\r\n            `if (${varFrom} <= ${varTo}) { // up\\n` +\r\n            `  for (let ${varI} = ${varFrom}; ${varI} <= ${varTo}; ${varI}+= ${inc}) {\\n` +\r\n            `    ${sorePrefex}${word} = ${varI};\\n` +\r\n            `    ${block}\\n` +\r\n            '  };\\n' +\r\n            '} else { // down\\n' +\r\n            `  if (${flagDown}) {` +\r\n            `    for (let ${varI} = ${varFrom}; ${varI} >= ${varTo}; ${varI}-= ${inc}) {\\n` +\r\n            `      ${sorePrefex}${word} = ${varI};` + '\\n' +\r\n            `      ${block}\\n` +\r\n            '    }\\n' +\r\n            '  };\\n' +\r\n            `};\\n//[/FOR id=${idLoop}]\\n`;\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convForeach(node) {\r\n        let target;\r\n        if (node.target === null) {\r\n            if (this.speedMode.invalidSore === 0) {\r\n                target = this.varname('それ');\r\n            }\r\n            else {\r\n                throw NakoSyntaxError.fromNode('『反復』の対象がありません。', node);\r\n            }\r\n        }\r\n        else {\r\n            target = this._convGen(node.target, true);\r\n        }\r\n        // blockより早く変数を定義する必要がある\r\n        let nameS = '__v0[\"対象\"]';\r\n        if (node.name) {\r\n            nameS = this.varname(node.name.value);\r\n            this.varsSet.names.add(node.name.value);\r\n        }\r\n        const block = this.convGenLoop(node.block);\r\n        const id = this.loopId++;\r\n        const key = '__v0[\"対象キー\"]';\r\n        let sorePrefex = '';\r\n        if (this.speedMode.invalidSore === 0) {\r\n            sorePrefex = `${this.varname('それ')} = `;\r\n        }\r\n        const code = `let $nako_foreach_v${id}=${target};\\n` +\r\n            `for (let $nako_i${id} in $nako_foreach_v${id})` + '{\\n' +\r\n            `  if ($nako_foreach_v${id}.hasOwnProperty($nako_i${id})) {\\n` +\r\n            `    ${nameS} = ${sorePrefex}$nako_foreach_v${id}[$nako_i${id}];` + '\\n' +\r\n            `    ${key} = $nako_i${id};\\n` +\r\n            `    ${block}\\n` +\r\n            '  }\\n' +\r\n            '};\\n';\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convRepeatTimes(node) {\r\n        const id = this.loopId++;\r\n        const value = this._convGen(node.value, true);\r\n        const block = this.convGenLoop(node.block);\r\n        const kaisu = '__v0[\"回数\"]';\r\n        let sorePrefex = '';\r\n        if (this.speedMode.invalidSore === 0) {\r\n            sorePrefex = `${this.varname('それ')} = `;\r\n        }\r\n        const code = `let $nako_times_v${id} = ${value};\\n` +\r\n            `for(var $nako_i${id} = 1; $nako_i${id} <= $nako_times_v${id}; $nako_i${id}++)` + '{\\n' +\r\n            `  ${sorePrefex}${kaisu} = $nako_i${id};` + '\\n' +\r\n            '  ' + block + '\\n}\\n';\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     */\r\n    convSpeedMode(node, isExpression) {\r\n        if (!node.options) {\r\n            return '';\r\n        }\r\n        const prev = { ...this.speedMode };\r\n        if (node.options['行番号無し']) {\r\n            this.speedMode.lineNumbers++;\r\n        }\r\n        if (node.options['暗黙の型変換無し']) {\r\n            this.speedMode.implicitTypeCasting++;\r\n        }\r\n        if (node.options['強制ピュア']) {\r\n            this.speedMode.forcePure++;\r\n        }\r\n        if (node.options['それ無効']) {\r\n            this.speedMode.invalidSore++;\r\n        }\r\n        try {\r\n            return this._convGen(node.block, isExpression);\r\n        }\r\n        finally {\r\n            this.speedMode = prev;\r\n        }\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     */\r\n    convPerformanceMonitor(node, isExpression) {\r\n        const prev = { ...this.performanceMonitor };\r\n        if (!node.options) {\r\n            return '';\r\n        }\r\n        if (node.options['ユーザ関数']) {\r\n            this.performanceMonitor.userFunction++;\r\n        }\r\n        if (node.options['システム関数本体']) {\r\n            this.performanceMonitor.systemFunctionBody++;\r\n        }\r\n        if (node.options['システム関数']) {\r\n            this.performanceMonitor.systemFunction++;\r\n        }\r\n        try {\r\n            return this._convGen(node.block, isExpression);\r\n        }\r\n        finally {\r\n            this.performanceMonitor = prev;\r\n        }\r\n    }\r\n    convWhile(node) {\r\n        const cond = this._convGen(node.cond, true);\r\n        const block = this.convGenLoop(node.block);\r\n        const code = `while (${cond})` + '{\\n' +\r\n            `  ${block}` + '\\n' +\r\n            '}\\n';\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convAtohantei(node) {\r\n        const id = this.loopId++;\r\n        const varId = `$nako_i${id}`;\r\n        const cond = this._convGen(node.cond, true);\r\n        const block = this.convGenLoop(node.block);\r\n        const code = 'for(;;) {\\n' +\r\n            `  ${block}\\n` +\r\n            `  let ${varId} = ${cond};\\n` +\r\n            `  if (${varId}) { continue } else { break }\\n` +\r\n            '}\\n\\n';\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convSwitch(node) {\r\n        const value = this._convGen(node.value, true);\r\n        const cases = node.cases || [];\r\n        let body = '';\r\n        for (let i = 0; i < cases.length; i++) {\r\n            const cvalue = cases[i][0];\r\n            const cblock = this.convGenLoop(cases[i][1]);\r\n            if (cvalue.type === '違えば') {\r\n                body += '  default:\\n';\r\n            }\r\n            else {\r\n                const cvalueCode = this._convGen(cvalue, true);\r\n                body += `  case ${cvalueCode}:\\n`;\r\n            }\r\n            body += `    ${cblock}\\n` +\r\n                '    break\\n';\r\n        }\r\n        const code = `switch (${value})` + '{\\n' +\r\n            `${body}` + '\\n' +\r\n            '}\\n';\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convIf(node) {\r\n        const expr = this._convGen(node.expr, true);\r\n        const block = this._convGen(node.block, false);\r\n        const falseBlock = (node.false_block === null)\r\n            ? ''\r\n            : 'else {' + this._convGen(node.false_block, false) + '};\\n';\r\n        return this.convLineno(node, false) +\r\n            `if (${expr}) {\\n  ${block}\\n}` + falseBlock + ';\\n';\r\n    }\r\n    convTikuji(node) {\r\n        // #1164 により「逐次実行」構文は近いうちに廃止する\r\n        const pid = this.loopId++;\r\n        // gen tikuji blocks\r\n        const curName = `__tikuji${pid}`;\r\n        let code = `const ${curName} = []\\n`;\r\n        const blocks = (node.blocks) ? node.blocks : [];\r\n        for (let i = 0; i < blocks.length; i++) {\r\n            const block = this._convGen(blocks[i], false).replace(/\\s+$/, '') + '\\n';\r\n            const blockLineNo = this.convLineno(blocks[i], true);\r\n            const blockCode = `${curName}.push(async function(resolve, reject) {\\n` +\r\n                '  __self.resolve = resolve;\\n' +\r\n                '  __self.reject = reject;\\n' +\r\n                '  __self.resolveCount = 0;\\n' +\r\n                `  ${blockLineNo}\\n` +\r\n                `  ${block}` +\r\n                '  if (__self.resolveCount === 0) resolve();\\n' +\r\n                // eslint-disable-next-line no-template-curly-in-string\r\n                '}); // end of tikuji__${pid}[{$i}]\\n';\r\n            code += blockCode;\r\n        }\r\n        code += `// end of ${curName} \\n`;\r\n        // gen error block\r\n        let errorCode = `  ${curName}.splice(0);\\n` + // clear\r\n            '  __v0[\"エラーメッセージ\"]=errMsg;\\n';\r\n        if (node.errorBlock != null) {\r\n            const errBlock = this._convGen(node.errorBlock, false).replace(/\\s+$/, '') + '\\n';\r\n            errorCode += errBlock;\r\n        }\r\n        code += `const ${curName}__reject = function(errMsg){\\n${errorCode}};\\n`;\r\n        // gen run block\r\n        code += '__self.resolve = undefined;\\n';\r\n        code += `const ${curName}__resolve = function(){\\n`;\r\n        code += '  setTimeout(async function(){\\n';\r\n        code += `    if (${curName}.length == 0) {return}\\n`;\r\n        code += `    const f = ${curName}.shift()\\n`;\r\n        code += `    await f(${curName}__resolve, ${curName}__reject);\\n`;\r\n        code += '  }, 0);\\n';\r\n        code += '};\\n';\r\n        code += `${curName}__resolve()\\n`;\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convFuncGetArgsCalcType(_funcName, _func, node) {\r\n        const args = [];\r\n        const opts = {};\r\n        const nodeArgs = (node.args) ? node.args : [];\r\n        for (let i = 0; i < nodeArgs.length; i++) {\r\n            const arg = nodeArgs[i];\r\n            if (i === 0 && arg === null && this.speedMode.invalidSore === 0) {\r\n                args.push(this.varname('それ'));\r\n                opts.sore = true;\r\n            }\r\n            else {\r\n                args.push(this._convGen(arg, true));\r\n            }\r\n        }\r\n        return [args, opts];\r\n    }\r\n    getPluginList() {\r\n        const r = [];\r\n        for (const name in this.__self.__module) {\r\n            r.push(name);\r\n        }\r\n        return r;\r\n    }\r\n    /**\r\n     * 関数の呼び出し\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     * @returns string コード\r\n     */\r\n    convCallFunc(node, isExpression) {\r\n        const funcName = NakoGen.getFuncName(node.name);\r\n        const res = this.findVar(funcName);\r\n        if (res === null) {\r\n            throw NakoSyntaxError.fromNode(`関数『${funcName}』が見当たりません。有効プラグイン=[` + this.getPluginList().join(', ') + ']', node);\r\n        }\r\n        // どの関数を呼び出すのか関数を特定する\r\n        let func;\r\n        if (res.i === 0) { // plugin function\r\n            func = this.__self.getFunc(funcName);\r\n            if (!func) {\r\n                throw new Error(`[System Error] 関数「${funcName}」NakoCompiler.nakoFuncList の不整合があります。`);\r\n            }\r\n            if (func.type !== 'func') {\r\n                throw NakoSyntaxError.fromNode(`『${funcName}』は関数ではありません。`, node);\r\n            }\r\n        }\r\n        else {\r\n            func = this.nakoFuncList[funcName];\r\n            // 無名関数の可能性\r\n            if (func === undefined) {\r\n                func = { return_none: false };\r\n            }\r\n        }\r\n        // 関数の参照渡しか？\r\n        if (node.type === 'func_pointer') {\r\n            return res.js;\r\n        }\r\n        // 関数の参照渡しでない場合\r\n        // 関数定義より助詞を一つずつ調べる\r\n        const argsInfo = this.convFuncGetArgsCalcType(funcName, func, node);\r\n        const args = argsInfo[0];\r\n        const argsOpts = argsInfo[1];\r\n        // function\r\n        this.usedFuncSet.add(funcName);\r\n        if (funcName === '名前空間設定') {\r\n            return `\\n// --- 名前空間(${args[0]}) ---\\n__varslist[0]['名前空間設定'](${args[0]}, __self);__self.__modName=${args[0]};\\n`;\r\n        }\r\n        else if (funcName === 'プラグイン名設定') {\r\n            return `\\n__varslist[0]['プラグイン名設定'](${args[0]}, __self);\\n`;\r\n        }\r\n        // 関数呼び出しで、引数の末尾にthisを追加する-システム情報を参照するため\r\n        args.push('__self');\r\n        let funcDef = 'function';\r\n        let funcBegin = '';\r\n        let funcEnd = '';\r\n        // setter?\r\n        if (node.setter) {\r\n            funcBegin += ';__self.isSetter = true;\\n';\r\n            funcEnd += ';__self.isSetter = false;\\n';\r\n        }\r\n        // 関数内 (__varslist.length > 3) からプラグイン関数 (res.i === 0) を呼び出すとき、 そのプラグイン関数がpureでなければ\r\n        // 呼び出しの直前に全てのローカル変数をthis.__localsに入れる。\r\n        if (res.i === 0 && this.varslistSet.length > 3 && func.pure !== true && this.speedMode.forcePure === 0) { // undefinedはfalseとみなす\r\n            // 展開されたローカル変数の列挙\r\n            const localVars = [];\r\n            for (const name of Array.from(this.varsSet.names.values())) {\r\n                if (NakoGen.isValidIdentifier(name)) {\r\n                    localVars.push({ str: JSON.stringify(name), js: this.varname(name) });\r\n                }\r\n            }\r\n            // --- 実行前 ---\r\n            // 全ての展開されていないローカル変数を __self.__locals にコピーする\r\n            funcBegin += '__self.__locals = __vars;\\n';\r\n            // 全ての展開されたローカル変数を __self.__locals に保存する\r\n            for (const v of localVars) {\r\n                funcBegin += `__self.__locals[${v.str}] = ${v.js};\\n`;\r\n            }\r\n            // --- 実行後 ---\r\n            // 全ての展開されたローカル変数を __self.__locals から受け取る\r\n            // 「それ」は関数の実行結果を受け取るために使うためスキップ。\r\n            for (const v of localVars) {\r\n                if (v.js !== 'それ') {\r\n                    funcEnd += `${v.js} = __self.__locals[${v.str}];\\n`;\r\n                }\r\n            }\r\n        }\r\n        // 変数「それ」が補完されていることをヒントとして出力\r\n        if (argsOpts.sore) {\r\n            funcBegin += '/*[sore]*/';\r\n        }\r\n        const indent = (text, n) => {\r\n            let result = '';\r\n            for (const line of text.split('\\n')) {\r\n                if (line !== '') {\r\n                    result += '  '.repeat(n) + line + '\\n';\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        // 引数チェックの例外 #1260\r\n        const noCheckFuncs = { 'TYPEOF': true, '変数型確認': true };\r\n        // 関数呼び出しコードの構築\r\n        let argsCode;\r\n        if ((this.warnUndefinedCallingUserFunc === 0 && res.i !== 0) || (this.warnUndefinedCallingSystemFunc === 0 && res.i === 0)) {\r\n            argsCode = args.join(',');\r\n        }\r\n        else {\r\n            const argsA = [];\r\n            args.forEach((arg) => {\r\n                if (arg === '__self' || noCheckFuncs[funcName] === true) { // #1260\r\n                    argsA.push(`${arg}`);\r\n                }\r\n                else {\r\n                    // 引数のundefinedチェックのコードを入れる\r\n                    const poolIndex = this.constPools.length;\r\n                    if (res.i === 0) {\r\n                        this.constPools.push({\r\n                            msg: `命令『${funcName}』の引数にundefinedを渡しています。`,\r\n                            file: node.file,\r\n                            line: node.line\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.constPools.push({\r\n                            msg: `ユーザ関数『『${funcName}』の引数にundefinedを渡しています。`,\r\n                            file: node.file,\r\n                            line: node.line\r\n                        });\r\n                    }\r\n                    // argが空になる対策 #1315\r\n                    const argStr = (arg === '') ? '\"\"' : arg;\r\n                    argsA.push(`(__self.chk(${argStr}, ${poolIndex}))`);\r\n                }\r\n            });\r\n            argsCode = argsA.join(', ');\r\n        }\r\n        let funcCall = `${res.js}(${argsCode})`;\r\n        if (func.asyncFn) {\r\n            funcDef = `async ${funcDef}`;\r\n            funcCall = `await ${funcCall}`;\r\n            this.numAsyncFn++;\r\n            this.usedAsyncFn = true;\r\n        }\r\n        if (res.i === 0 && this.performanceMonitor.systemFunctionBody !== 0) {\r\n            let key = funcName;\r\n            if (!key) {\r\n                if (typeof this.performanceMonitor.mumeiId === 'undefined') {\r\n                    this.performanceMonitor.mumeiId = 0;\r\n                }\r\n                this.performanceMonitor.mumeiId++;\r\n                key = `anous_${this.performanceMonitor.mumeiId}`;\r\n            }\r\n            funcCall = `(${funcDef} (key, type) {\\n` +\r\n                'const sbf_start = performance.now() * 1000;\\n' +\r\n                'try {\\n' +\r\n                'return ' + funcCall + ';\\n' +\r\n                '} finally {\\n' +\r\n                'const sbl_time = performance.now() * 1000 - sbf_start;\\n' +\r\n                'if (!__self.__performance_monitor) {\\n' +\r\n                '__self.__performance_monitor={};\\n' +\r\n                '__self.__performance_monitor[key] = { called:1, totel_usec: sbl_time, min_usec: sbl_time, max_usec: sbl_time, type: type };\\n' +\r\n                '} else if (!__self.__performance_monitor[key]) {\\n' +\r\n                '__self.__performance_monitor[key] = { called:1, totel_usec: sbl_time, min_usec: sbl_time, max_usec: sbl_time, type: type };\\n' +\r\n                '} else {\\n' +\r\n                '__self.__performance_monitor[key].called++;\\n' +\r\n                '__self.__performance_monitor[key].totel_usec+=sbl_time;\\n' +\r\n                'if(__self.__performance_monitor[key].min_usec>sbl_time){__self.__performance_monitor[key].min_usec=sbl_time;}\\n' +\r\n                'if(__self.__performance_monitor[key].max_usec<sbl_time){__self.__performance_monitor[key].max_usec=sbl_time;}\\n' +\r\n                `}}})('${funcName}_body', 'sysbody')\\n`;\r\n        }\r\n        let code = '';\r\n        if (func.return_none) {\r\n            // 戻り値のない関数の場合\r\n            if (funcEnd === '') {\r\n                if (funcBegin === '') {\r\n                    code = `${funcCall};\\n`;\r\n                }\r\n                else {\r\n                    code = `${funcBegin} ${funcCall};\\n`;\r\n                }\r\n            }\r\n            else {\r\n                code = `${funcBegin}try {\\n${indent(funcCall, 1)};\\n} finally {\\n${indent(funcEnd, 1)}}\\n`;\r\n            }\r\n        }\r\n        else {\r\n            // 戻り値のある関数の場合\r\n            let sorePrefex = '';\r\n            if (this.speedMode.invalidSore === 0) {\r\n                sorePrefex = `${this.varname('それ')} = `;\r\n            }\r\n            if (funcBegin === '' && funcEnd === '') {\r\n                code = `(${sorePrefex}${funcCall})`;\r\n            }\r\n            else {\r\n                if (funcEnd === '') {\r\n                    code = `(${funcDef}(){\\n${indent(`${funcBegin};\\nreturn ${sorePrefex} ${funcCall}`, 1)}}).call(this)`;\r\n                }\r\n                else {\r\n                    code = `(${funcDef}(){\\n${indent(`${funcBegin}try {\\n${indent(`return ${sorePrefex}${funcCall};`, 1)}\\n} finally {\\n${indent(funcEnd, 1)}}`, 1)}}).call(this)`;\r\n                }\r\n            }\r\n            // ...して\r\n            if (node.josi === 'して' || (node.josi === '' && !isExpression)) {\r\n                code += ';\\n';\r\n            }\r\n        }\r\n        if (res.i === 0 && this.performanceMonitor.systemFunction !== 0) {\r\n            code = '(function (key, type) {\\n' +\r\n                'const sf_start = performance.now() * 1000;\\n' +\r\n                'try {\\n' +\r\n                'return ' + code + ';\\n' +\r\n                '} finally {\\n' +\r\n                'const sl_time = performance.now() * 1000 - sf_start;\\n' +\r\n                'if (!__self.__performance_monitor) {\\n' +\r\n                '__self.__performance_monitor={};\\n' +\r\n                '__self.__performance_monitor[key] = { called:1, totel_usec: sl_time, min_usec: sl_time, max_usec: sl_time, type: type };\\n' +\r\n                '} else if (!__self.__performance_monitor[key]) {\\n' +\r\n                '__self.__performance_monitor[key] = { called:1, totel_usec: sl_time, min_usec: sl_time, max_usec: sl_time, type: type };\\n' +\r\n                '} else {\\n' +\r\n                '__self.__performance_monitor[key].called++;\\n' +\r\n                '__self.__performance_monitor[key].totel_usec+=sl_time;\\n' +\r\n                'if(__self.__performance_monitor[key].min_usec>sl_time){__self.__performance_monitor[key].min_usec=sl_time;}\\n' +\r\n                'if(__self.__performance_monitor[key].max_usec<sl_time){__self.__performance_monitor[key].max_usec=sl_time;}\\n' +\r\n                `}}})('${funcName}_sys', 'system')\\n`;\r\n        }\r\n        return code;\r\n    }\r\n    convRenbun(node) {\r\n        const right = this._convGen(node.right, true);\r\n        const left = this._convGen(node.left, false);\r\n        this.numAsyncFn++;\r\n        this.usedAsyncFn = true;\r\n        return `/*連文*/await (async function(){ ${left}; return ${right} }).call(this)`;\r\n    }\r\n    convOp(node) {\r\n        // トークン名からJS演算子への変換 - 単純な変換が可能なものをここで定義\r\n        const OP_TBL = {\r\n            '&': '+\"\"+',\r\n            eq: '==',\r\n            noteq: '!=',\r\n            '===': '===',\r\n            '!==': '!==',\r\n            gt: '>',\r\n            lt: '<',\r\n            gteq: '>=',\r\n            lteq: '<=',\r\n            and: '&&',\r\n            or: '||',\r\n            shift_l: '<<',\r\n            shift_r: '>>',\r\n            shift_r0: '>>>',\r\n            '÷': '/'\r\n        };\r\n        let op = node.operator || ''; // 演算子\r\n        let right = this._convGen(node.right, true);\r\n        let left = this._convGen(node.left, true);\r\n        if (op === '+' && this.speedMode.implicitTypeCasting === 0) {\r\n            if (node.left && node.left.type !== 'number') {\r\n                left = `parseFloat(${left})`;\r\n            }\r\n            if (node.right && node.right.type !== 'number') {\r\n                right = `parseFloat(${right})`;\r\n            }\r\n        }\r\n        // 階乗\r\n        if (op === '^' || op === '**') {\r\n            return `(Math.pow(${left}, ${right}))`;\r\n        }\r\n        // 整数の割り算 #1152\r\n        if (op === '÷÷') {\r\n            return `(Math.floor(${left} / ${right}))`;\r\n        }\r\n        // 一般的なオペレータに変換\r\n        if (OP_TBL[op]) {\r\n            op = OP_TBL[op];\r\n        }\r\n        //\r\n        return `(${left} ${op} ${right})`;\r\n    }\r\n    convInc(node) {\r\n        // もし値が省略されていたら、変数「それ」に代入する\r\n        let value = null;\r\n        if (this.speedMode.invalidSore === 0) {\r\n            value = this.varname('それ');\r\n        }\r\n        if (node.value) {\r\n            value = this._convGen(node.value, true);\r\n        }\r\n        if (value == null) {\r\n            throw NakoSyntaxError.fromNode('加算する先の変数名がありません。', node);\r\n        }\r\n        // 配列への代入か(core#86)\r\n        let code = '';\r\n        let jsName;\r\n        const nodeName = node.name;\r\n        if (nodeName.type === '配列参照') {\r\n            jsName = this.convRefArray(nodeName);\r\n        }\r\n        else {\r\n            // 変数名\r\n            const name = nodeName.value;\r\n            let res = this.findVar(name);\r\n            if (res === null) {\r\n                this.varsSet.names.add(name);\r\n                res = this.findVar(name);\r\n                if (!res) {\r\n                    throw new Error('『増』または『減』で変数が見当たりません。');\r\n                }\r\n            }\r\n            jsName = res.js;\r\n        }\r\n        // 自動初期化するか\r\n        code += `if (typeof(${jsName}) === 'undefined') { ${jsName} = 0; }`;\r\n        code += `${jsName} += ${value}`;\r\n        return ';' + this.convLineno(node, false) + code + '\\n';\r\n    }\r\n    convLet(node) {\r\n        // もし値が省略されていたら、変数「それ」に代入する\r\n        let value = null;\r\n        if (this.speedMode.invalidSore === 0) {\r\n            value = this.varname('それ');\r\n        }\r\n        if (node.value) {\r\n            value = this._convGen(node.value, true);\r\n        }\r\n        if (value == null) {\r\n            throw NakoSyntaxError.fromNode('代入する先の変数名がありません。', node);\r\n        }\r\n        // 変数名\r\n        const name = node.name.value;\r\n        const res = this.findVar(name);\r\n        let code = '';\r\n        if (res === null) {\r\n            this.varsSet.names.add(name);\r\n            code = `${this.varname(name)} = ${value};`;\r\n        }\r\n        else {\r\n            // 定数ならエラーを出す\r\n            if (this.varslistSet[res.i].readonly.has(name)) {\r\n                throw NakoSyntaxError.fromNode(`定数『${name}』は既に定義済みなので、値を代入することはできません。`, node);\r\n            }\r\n            code = `${res.js} = ${value};`;\r\n        }\r\n        return ';' + this.convLineno(node, false) + code + '\\n';\r\n    }\r\n    convDefLocalVar(node) {\r\n        const value = (node.value === null) ? 'null' : this._convGen(node.value, true);\r\n        const name = node.name.value;\r\n        const vtype = node.vartype; // 変数 or 定数\r\n        // 二重定義？\r\n        if (this.varsSet.names.has(name)) {\r\n            throw NakoSyntaxError.fromNode(`${vtype}『${name}』の二重定義はできません。`, node);\r\n        }\r\n        //\r\n        this.varsSet.names.add(name);\r\n        if (vtype === '定数') {\r\n            this.varsSet.readonly.add(name);\r\n        }\r\n        const code = `${this.varname(name)}=${value};\\n`;\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    // #563 複数変数への代入\r\n    convDefLocalVarlist(node) {\r\n        let code = '';\r\n        const vtype = node.vartype; // 変数 or 定数\r\n        const value = (node.value === null) ? 'null' : this._convGen(node.value, true);\r\n        this.loopId++;\r\n        const varI = `$nako_i${this.loopId}`;\r\n        code += `${varI}=${value}\\n`;\r\n        code += `if (!(${varI} instanceof Array)) { ${varI}=[${varI}] }\\n`;\r\n        const names = (node.names) ? node.names : [];\r\n        for (let i = 0; i < names.length; i++) {\r\n            const nameObj = names[i];\r\n            const name = nameObj.value;\r\n            // 二重定義？\r\n            if (this.varsSet.names.has(name)) {\r\n                // 複数変数文では、二重定義も許容する #1027\r\n                // throw NakoSyntaxError.fromNode(`${vtype}『${name}』の二重定義はできません。`, node)\r\n            }\r\n            this.varsSet.names.add(name);\r\n            if (vtype === '定数') {\r\n                this.varsSet.readonly.add(name);\r\n            }\r\n            const vname = this.varname(name);\r\n            code += `${vname}=${varI}[${i}];\\n`;\r\n        }\r\n        return this.convLineno(node, false) + code;\r\n    }\r\n    convString(node) {\r\n        let value = '' + node.value;\r\n        const mode = node.mode;\r\n        value = value.replace(/\\\\/g, '\\\\\\\\');\r\n        value = value.replace(/\"/g, '\\\\\"');\r\n        value = value.replace(/\\r/g, '\\\\r');\r\n        value = value.replace(/\\n/g, '\\\\n');\r\n        if (mode === 'ex') {\r\n            const rf = (a, name) => {\r\n                return '\"+' + this.genVar(name, node) + '+\"';\r\n            };\r\n            value = value.replace(/\\{(.+?)\\}/g, rf);\r\n            value = value.replace(/｛(.+?)｝/g, rf);\r\n        }\r\n        return '\"' + value + '\"';\r\n    }\r\n    convTryExcept(node) {\r\n        const block = this._convGen(node.block, false);\r\n        const errBlock = this._convGen(node.errBlock, false);\r\n        return this.convLineno(node, false) +\r\n            `try {\\n${block}\\n} catch (e) {\\n` +\r\n            '  __v0[\"エラーメッセージ\"] = e.message;\\n' +\r\n            ';\\n' +\r\n            `${errBlock}}\\n`;\r\n    }\r\n    getUsedFuncSet() {\r\n        return this.usedFuncSet;\r\n    }\r\n    getPluginInitCode() {\r\n        // プラグインの初期化関数を実行する\r\n        let code = '';\r\n        let pluginCode = '';\r\n        for (const name in this.__self.__module) {\r\n            const initkey = `!${name}:初期化`;\r\n            if (this.varslistSet[0].names.has(initkey)) {\r\n                this.usedFuncSet.add(`!${name}:初期化`);\r\n                pluginCode += `__v0[\"!${name}:初期化\"](__self);\\n`;\r\n            }\r\n        }\r\n        if (pluginCode !== '') {\r\n            code += '__v0.line=\\'l0:プラグインの初期化\\';\\n' + pluginCode;\r\n        }\r\n        return code;\r\n    }\r\n}\r\n/**\r\n * @param com\r\n * @param ast\r\n * @param opt\r\n */\r\nexport function generateJS(com, ast, opt) {\r\n    // NakoGenのインスタンスを作成\r\n    const gen = new NakoGen(com);\r\n    // ※ [関数定義に関するコード生成のヒント]\r\n    // ※ 関数の名前だけを(1)で登録して、(2)で実際に関数のコードを生成する。\r\n    // ※ ただし(2)では生成するだけなので、(3)でプログラム冒頭に関数定義のコードを記述する。\r\n    // この順番を変えることはできない (グローバル変数が認識できなくなったり、関数定義のタイミングがずれる)\r\n    // (1) ユーザー定義関数をシステムに登録する\r\n    gen.registerFunction(ast);\r\n    // (2) JSコードを生成する\r\n    let js = gen.convGen(ast, opt);\r\n    // (3) JSコードを実行するための事前ヘッダ部分の生成\r\n    const jsInit = gen.getDefFuncCode(com, opt);\r\n    // ランダムな関数名を生成\r\n    const funcID = '' + (new Date()).getTime() + '_' + Math.floor(0xFFFFFFFF * Math.random());\r\n    // テストの実行\r\n    if (js && opt.isTest) {\r\n        js += '\\n__self._runTests(__tests);\\n';\r\n    }\r\n    // async method\r\n    if (gen.numAsyncFn > 0 || gen.debugOption.useDebug) {\r\n        const asyncMain = '__eval_nako3async_' + funcID + '__';\r\n        js = `\r\n// --------------------------------------------------\r\n// <nadesiko3::gen::async id=\"${funcID}\" times=\"${gen.numAsyncFn}\">\r\nasync function ${asyncMain}(self) {\r\n${jsInit}\r\n${js}\r\n} // end of ${asyncMain}\r\n${asyncMain}.call(self, self)\r\n.then(() => {\r\n  // ok\r\n})\r\n.catch(err => {\r\n  if (err.message === '__終わる__') { return }\r\n  self.numFailures++\r\n  // send errors to logger\r\n  let rterr = self.logger.runtimeError(err, self.__v0.line)\r\n  self.logger.error(rterr)\r\n})\r\n// </nadesiko3::gen::async id=\"${funcID}\">\r\n// --------------------------------------------------\r\n`;\r\n    }\r\n    else {\r\n        const syncMain = '__eval_nako3sync_' + funcID + '__';\r\n        js = `\r\n// --------------------------------------------------\r\n// <nadesiko3::gen::syncMode>\r\nfunction ${syncMain}(self) {\r\ntry {\r\n  ${jsInit}\r\n  ${js}\r\n} catch (err) {\r\n  if (err.message === '__終わる__') { return }\r\n  self.numFailures++\r\n  throw self.logger.runtimeError(err, self.__v0.line)\r\n}\r\n} // end of ${syncMain}\r\n${syncMain}(self)\r\n// </nadesiko3::gen::syncMode>\r\n// --------------------------------------------------\r\n`;\r\n    }\r\n    // デバッグメッセージ\r\n    com.getLogger().trace('--- generate ---\\n' + js);\r\n    let codeImportFiles = '';\r\n    const importNames = [];\r\n    for (const f of opt.importFiles) {\r\n        if (f === 'nako_errors.mjs') {\r\n            continue;\r\n        }\r\n        const ff = 'nako3runtime_' + f.replace(/\\.(js|mjs)$/, '').replace(/[^a-zA-Z0-9_]/g, '_');\r\n        importNames.push(ff);\r\n        codeImportFiles += `import ${ff} from './nako3runtime/${f}'\\n`;\r\n    }\r\n    const standaloneJSCode = `\\\r\n// <standaloneCode>\r\nimport path from 'path'\r\nimport { NakoRuntimeError } from './nako3runtime/nako_errors.mjs'\r\n${codeImportFiles}\r\nconst self = {}\r\nself.coreVersion = '${com.coreVersion}'\r\nself.version = '${com.version}'\r\nself.logger = {\r\n  error: (message) => { console.error(message) },\r\n  warn: (message) => { console.warn(message) },\r\n  send: (level, message) => { console.log(message) },\r\n};\r\nself.__varslist = [{}, {}, {}]\r\nself.__v0 = self.__varslist[0]\r\nself.initFuncList = []\r\nself.clearFuncList = []\r\n// Copy module functions\r\nfor (const mod of [${importNames.join(', ')}]) {\r\n  for (const funcName in mod) {\r\n    if (funcName === '初期化') {\r\n      self.initFuncList.push(mod[funcName].fn)\r\n      continue\r\n    }\r\n    if (funcName === '!クリア') {\r\n      self.clearFuncList.push(mod[funcName].fn)\r\n      continue\r\n    }\r\n    self.__varslist[0][funcName] = mod[funcName].fn\r\n  }\r\n}\r\nself.__vars = self.__varslist[2];\r\nself.__module = {};\r\nself.__locals = {};\r\nself.__genMode = 'sync';\r\n\r\n// プラグインの初期化コードを実行\r\nself.initFuncList.map(f => f(self))\r\n\r\ntry {\r\n${opt.codeStandalone}\r\n// <JS:standalone>\r\n${js}\r\n// </JS:standalone>\r\n  // standaloneCodeでは、即時プラグインのクリアコードを実行\r\n  self.clearFuncList.map(f => f(self))\r\n} catch (err) {\r\n  self.logger.error(err);\r\n  throw err;\r\n}\r\n// </standaloneCode>\r\n`;\r\n    // ---\r\n    const initCode = gen.getPluginInitCode();\r\n    const runtimeEnvCode = `\r\n// <runtimeEnvCode>\r\nconst self = this\r\n${opt.codeEnv}\r\n${jsInit}\r\n${initCode}\r\n${js}\r\n// </runtimeEnvCode>\r\n`;\r\n    return {\r\n        // なでしこの実行環境ありの場合(thisが有効)\r\n        runtimeEnv: runtimeEnvCode,\r\n        // JavaScript単体で動かす場合\r\n        standalone: standaloneJSCode,\r\n        // コード生成に使ったNakoGenのインスタンス\r\n        gen\r\n    };\r\n}\r\n","/**\r\n * file: nako_gen_async\r\n * パーサーが生成した中間オブジェクトを実際のJavaScriptのコードに変換する。\r\n * なお、扱いやすさ優先で、なでしこの一文を一つの関数として生成し、非同期実行する。\r\n */\r\nimport { NakoSyntaxError, NakoError, NakoRuntimeError } from './nako_errors.mjs';\r\nimport nakoVersion from './nako_core_version.mjs';\r\nimport { NakoGen } from './nako_gen.mjs';\r\n/**\r\n * なでしこのインタプリタコード\r\n */\r\nconst NakoCodeNop = 'NOP';\r\nconst NakoCodeLabel = 'LBL';\r\nconst NakoCodeEOL = 'EOL';\r\nconst NakoCodeJump = 'JMP'; // JUMP addr\r\nconst NakoCodeJumpIfTrue = 'JMP_T'; // pop and jump addr\r\nconst NakoCodeJumpIfFalse = 'JMP_F'; // pop and jump addr\r\nconst NakoCodeCall = 'CALL'; // call addr\r\nconst NakoCodeCallObj = 'CALL_OBJ'; // call addr\r\nconst NakoCodeReturn = 'RET';\r\nconst NakoCodeTry = 'TRY';\r\nconst NakoCodeCode = 'CODE';\r\nconst NakoCodeTagIsFuncpoint = 0x0F;\r\n/**\r\n * なでしこのインタプリタが用いる簡易コードを表現するクラス\r\n */\r\nclass NakoCode {\r\n    /**\r\n     * @param type\r\n     * @param value\r\n     */\r\n    constructor(type, value) {\r\n        /** Codeのタイプ\r\n         * @type {string}\r\n         */\r\n        this.type = type;\r\n        /** Codeの値 / ラベルならラベル名\r\n         * @type {string}\r\n         */\r\n        this.value = value;\r\n        /** ラベルならジャンプ先\r\n         * @type {number}\r\n         */\r\n        this.no = -1;\r\n        /** タグ\r\n         * @type {number}\r\n         */\r\n        this.tag = 0;\r\n    }\r\n}\r\n/**\r\n * 構文木からJSのコードを生成するクラス\r\n */\r\nexport class NakoGenASync {\r\n    /**\r\n     * @param com コンパイラのインスタンス\r\n     */\r\n    constructor(com) {\r\n        this.com = com;\r\n        /**\r\n         * 出力するJavaScriptコードのヘッダー部分で定義する必要のある関数。fnはjsのコード。\r\n         * プラグイン関数は含まれない。\r\n         */\r\n        this.nakoFuncList = { ...com.getNakoFuncList() };\r\n        /**\r\n         * なでしこで定義したテストの一覧\r\n         * @type {Record<string, { josi: string[][], fn: string, type: 'test_func' }>}\r\n         */\r\n        this.nakoTestList = {};\r\n        /**\r\n         * プログラム内で参照された関数のリスト。プラグインの命令を含む。\r\n         * JavaScript単体で実行するとき、このリストにある関数の定義をJavaScriptコードの先頭に付け足す。\r\n         * @type {Set<string>}\r\n         */\r\n        this.usedFuncSet = new Set();\r\n        /**\r\n         * ループ時の一時変数が被らないようにIDで管理\r\n         * @type {number}\r\n         */\r\n        this.loopId = 1;\r\n        /**\r\n         * 変換中の処理が、ループの中かどうかを判定する\r\n         * @type {boolean}\r\n         */\r\n        this.flagLoop = false;\r\n        /**\r\n         * 変換後のコード管理番号\r\n         * @type {number}\r\n         */\r\n        this.codeId = 0;\r\n        /**\r\n         * 変換後のコードを保持する配列\r\n         * @type {Array<NakoCode>}\r\n         */\r\n        this.codeArray = [];\r\n        /** @type {NakoCode | null} */\r\n        this.labelContinue = null;\r\n        /** @type {NakoCode | null} */\r\n        this.labelBreak = null;\r\n        /**\r\n         * ジャンプ先を表現するラベル\r\n         * @type {Object<string, number>}\r\n         */\r\n        this.labels = {};\r\n        // コンパイラのインスタンス\r\n        this.__self = com;\r\n        /**\r\n         * コードジェネレータの種類\r\n         * @type {string}\r\n         */\r\n        this.genMode = '非同期モード';\r\n        /**\r\n         * 行番号とファイル名が分かるときは `l123:main.nako3`、行番号だけ分かるときは `l123`、そうでなければ任意の文字列。\r\n         * @type {string | null}\r\n         */\r\n        this.lastLineNo = null;\r\n        /**\r\n         * スタック\r\n         * @type {{ isFunction: boolean, names: Set<string>, readonly: Set<string> }[]}\r\n         */\r\n        this.varslistSet = com.__varslist.map((v) => ({ isFunction: false, names: new Set(Object.keys(v)), readonly: new Set() }));\r\n        /**\r\n         * スタックトップ\r\n         * @type {{ isFunction: boolean, names: Set<string>, readonly: Set<string> }}\r\n         */\r\n        this.varsSet = { isFunction: false, names: new Set(), readonly: new Set() };\r\n        this.varslistSet[2] = this.varsSet;\r\n        // 1以上のとき高速化する。\r\n        // 実行速度優先ブロック内で1増える。\r\n        this.speedMode = {\r\n            lineNumbers: 0,\r\n            implicitTypeCasting: 0,\r\n            invalidSore: 0,\r\n            forcePure: 0 // 全てのシステム命令をpureとして扱う。命令からローカル変数への参照が出来なくなる。\r\n        };\r\n        // 1以上のとき測定をinjectする。\r\n        // パフォーマンスモニタのブロック内で1増える。\r\n        this.performanceMonitor = {\r\n            userFunction: 0,\r\n            systemFunction: 0,\r\n            systemFunctionBody: 0 // システム関数(呼び出しコードを除く)\r\n        };\r\n    }\r\n    /**\r\n     * @param com\r\n     * @param {Ast} ast\r\n     * @param {boolean | string} isTest 文字列なら1つのテストだけを実行する\r\n     */\r\n    static generate(com, ast, isTest) {\r\n        const gen = new NakoGenASync(com);\r\n        // ユーザー定義関数をシステムに登録する\r\n        gen.registerFunction(ast);\r\n        // JSコードを生成する\r\n        let js = gen.convGen(ast, !!isTest);\r\n        // JSコードを実行するための事前ヘッダ部分の生成\r\n        js = gen.getDefFuncCode(isTest) + js;\r\n        com.getLogger().trace('--- generate(非同期モード) ---\\n' + js);\r\n        // テストの実行\r\n        if (js && isTest) {\r\n            js += '\\n__self._runTests(__tests);\\n';\r\n        }\r\n        return {\r\n            // なでしこの実行環境ありの場合\r\n            runtimeEnv: js,\r\n            // JavaScript単体で動かす場合\r\n            standalone: `\\\r\nconst nakoVersion = ${JSON.stringify(nakoVersion)};\r\n${NakoError.toString()}\r\n${NakoRuntimeError.toString()}\r\nthis.logger = {\r\n  error(message) { console.error(message) },\r\n  send(level, message) { console.log(message) },\r\n};\r\nthis.__varslist = [{}, {}, {}];\r\nthis.__vars = this.__varslist[2];\r\nthis.__module = {};\r\nthis.__locals = {};\r\nthis.__labels = {};\r\nthis.__code = [];\r\nthis.__callstack = [];\r\nthis.__stack = [];\r\nthis.__genMode = '非同期モード';\r\ntry {\r\n  ${gen.getVarsCode()}\r\n  ${js}\r\n} catch (err) {\r\n  if (!(err instanceof NakoRuntimeError)) {\r\n    err = new NakoRuntimeError(err, this.__varslist[0].line);\r\n  }\r\n  this.logger.error(err);\r\n  throw err;\r\n}`,\r\n            gen // コード生成に使ったNakoGenのインスタンス\r\n        };\r\n    }\r\n    /**\r\n     * @param {import(\"./nako3\").Ast} node\r\n     * @param {boolean} forceUpdate\r\n     */\r\n    convLineno(node, forceUpdate) {\r\n        if (this.speedMode.lineNumbers > 0) {\r\n            return '';\r\n        }\r\n        /** @type {string} */\r\n        let lineNo;\r\n        if (typeof node.line !== 'number') {\r\n            lineNo = 'unknown';\r\n        }\r\n        else if (typeof node.file !== 'string') {\r\n            lineNo = `l${node.line}`;\r\n        }\r\n        else {\r\n            lineNo = `l${node.line}:${node.file}`;\r\n        }\r\n        // 強制的に行番号をアップデートするか\r\n        if (!forceUpdate) {\r\n            if (lineNo === this.lastLineNo) {\r\n                return '';\r\n            }\r\n            this.lastLineNo = lineNo;\r\n        }\r\n        // 例: __v0.line='l1:main.nako3'\r\n        return `__v0.line=${JSON.stringify(lineNo)};`;\r\n    }\r\n    /**\r\n     * ローカル変数のJavaScriptコードを生成する。\r\n     * 基本的に取得のために利用\r\n     * @param {string} name\r\n     */\r\n    varname(name) {\r\n        const keys = JSON.stringify(name);\r\n        return `sys.__vars[${keys}]`;\r\n    }\r\n    /**\r\n     * プログラムの実行に必要な関数を書き出す(システム領域)\r\n     * @returns {string}\r\n     */\r\n    getVarsCode() {\r\n        let code = '';\r\n        // プログラム中で使った関数を列挙して書き出す\r\n        for (const key of Array.from(this.usedFuncSet.values())) {\r\n            const f = this.__self.__varslist[0][key];\r\n            const name = `this.__varslist[0][\"${key}\"]`;\r\n            if (typeof (f) === 'function') {\r\n                code += name + '=' + f.toString() + ';\\n';\r\n            }\r\n            else {\r\n                code += name + '=' + JSON.stringify(f) + ';\\n';\r\n            }\r\n        }\r\n        return code;\r\n    }\r\n    /**\r\n     * プログラムの実行に必要な関数定義を書き出す(グローバル領域)\r\n     * convGenの結果を利用するため、convGenの後に呼び出すこと。\r\n     * @param {boolean | string} isTest テストかどうか。stringの場合は1つのテストのみ。\r\n     * @returns {string}\r\n     */\r\n    getDefFuncCode(isTest) {\r\n        let code = '';\r\n        // よく使う変数のショートカット\r\n        code += 'const __self = this.__self = this;\\n';\r\n        code += 'const __varslist = this.__varslist;\\n';\r\n        code += 'const __module = this.__module;\\n';\r\n        code += 'const __v0 = this.__v0 = this.__varslist[0];\\n';\r\n        code += 'const __v1 = this.__v1 = this.__varslist[1];\\n';\r\n        code += 'const __vars = this.__vars = this.__varslist[2];\\n';\r\n        code += 'const __code = this.__code;\\n';\r\n        // なでしこの関数定義を行う\r\n        let nakoFuncCode = '';\r\n        for (const key in this.nakoFuncList) {\r\n            const f = this.nakoFuncList[key].fn;\r\n            nakoFuncCode += '' +\r\n                `//[DEF_FUNC name='${key}']\\n` +\r\n                `__v1[\"${key}\"]=${f};\\n;` +\r\n                `//[/DEF_FUNC name='${key}']\\n`;\r\n        }\r\n        if (nakoFuncCode !== '') {\r\n            code += '__v0.line=\\'関数の定義\\';\\n' + nakoFuncCode;\r\n        }\r\n        // プラグインの初期化関数を実行する\r\n        let pluginCode = '';\r\n        for (const name in this.__self.__module) {\r\n            const initkey = `!${name}:初期化`;\r\n            if (this.varslistSet[0].names.has(initkey)) {\r\n                this.usedFuncSet.add(`!${name}:初期化`);\r\n                pluginCode += `__v0[\"!${name}:初期化\"](__self);\\n`;\r\n            }\r\n        }\r\n        if (pluginCode !== '') {\r\n            code += '__v0.line=\\'プラグインの初期化\\';\\n' + pluginCode;\r\n        }\r\n        // テストの定義を行う\r\n        if (isTest) {\r\n            let testCode = 'const __tests = [];\\n';\r\n            for (const key in this.nakoTestList) {\r\n                if (isTest === true || (typeof isTest === 'string' && isTest === key)) {\r\n                    const f = this.nakoTestList[key].fn;\r\n                    testCode += `${f};\\n;`;\r\n                }\r\n            }\r\n            if (testCode !== '') {\r\n                code += '__v0.line=\\'テストの定義\\';\\n';\r\n                code += testCode + '\\n';\r\n            }\r\n        }\r\n        return code;\r\n    }\r\n    /**\r\n     * プラグイン・オブジェクトを追加\r\n     * @param po プラグイン・オブジェクト\r\n     */\r\n    addPlugin(po) {\r\n        return this.__self.addPlugin(po);\r\n    }\r\n    /**\r\n     * プラグイン・オブジェクトを追加(ブラウザ向け)\r\n     * @param name オブジェクト名\r\n     * @param po 関数リスト\r\n     */\r\n    addPluginObject(name, po) {\r\n        this.__self.addPluginObject(name, po);\r\n    }\r\n    /**\r\n     * プラグイン・ファイルを追加(Node.js向け)\r\n     * @param objName オブジェクト名\r\n     * @param path ファイルパス\r\n     * @param po 登録するオブジェクト\r\n     */\r\n    addPluginFile(objName, path, po) {\r\n        this.__self.addPluginFile(objName, path, po);\r\n    }\r\n    /**\r\n     * 関数を追加する\r\n     * @param key 関数名\r\n     * @param josi 助詞\r\n     * @param fn 関数\r\n     */\r\n    addFunc(key, josi, fn) {\r\n        this.__self.addFunc(key, josi, fn);\r\n    }\r\n    /**\r\n     * プラグイン関数を参照する\r\n     * @param key プラグイン関数の関数名\r\n     * @returns プラグイン・オブジェクト\r\n     */\r\n    getFunc(key) {\r\n        return this.__self.getFunc(key);\r\n    }\r\n    /**\r\n     * 関数を先に登録してしまう\r\n     */\r\n    registerFunction(ast) {\r\n        if (ast.type !== 'block') {\r\n            throw NakoSyntaxError.fromNode('構文解析に失敗しています。構文は必ずblockが先頭になります', ast);\r\n        }\r\n        const registFunc = (node) => {\r\n            for (let i = 0; i < node.block.length; i++) {\r\n                const t = node.block[i];\r\n                if (t.type === 'def_func') {\r\n                    const name = t.name.value;\r\n                    this.usedFuncSet.add(name);\r\n                    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                    this.__self.__varslist[1][name] = function () { }; // 事前に適当な値を設定\r\n                    this.nakoFuncList[name] = {\r\n                        josi: t.name.meta.josi,\r\n                        fn: '',\r\n                        type: 'func'\r\n                    };\r\n                }\r\n                else if (t.type === 'speed_mode') {\r\n                    if (t.block.type === 'block') {\r\n                        registFunc(t.block);\r\n                    }\r\n                    else {\r\n                        registFunc(t);\r\n                    }\r\n                }\r\n                else if (t.type === 'performance_monitor') {\r\n                    if (t.block.type === 'block') {\r\n                        registFunc(t.block);\r\n                    }\r\n                    else {\r\n                        registFunc(t);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        registFunc(ast);\r\n        // __self.__varslistの変更を反映\r\n        const initialNames = new Set();\r\n        if (this.speedMode.invalidSore === 0) {\r\n            initialNames.add('それ');\r\n        }\r\n        this.varsSet = { isFunction: false, names: initialNames, readonly: new Set() };\r\n        this.varslistSet = this.__self.__varslist.map(v => ({ isFunction: false, names: new Set(Object.keys(v)), readonly: new Set() }));\r\n        this.varslistSet[2] = this.varsSet;\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     * @param {boolean} isTest\r\n     */\r\n    convGen(node, isTest) {\r\n        // convert\r\n        this._convGen(node, true);\r\n        // ラベルアドレスの解決が必要なコード一覧\r\n        const needToFixAddr = new Set([\r\n            NakoCodeJump, NakoCodeJumpIfTrue, NakoCodeJumpIfFalse, NakoCodeCall, NakoCodeTry\r\n        ]);\r\n        // コードの最適化をするか?\r\n        const optimization = true;\r\n        let codes = this.codeArray;\r\n        //\r\n        if (optimization) {\r\n            // NOPを削除\r\n            codes = codes.filter((code) => {\r\n                return code.type !== NakoCodeNop;\r\n            });\r\n            // 未参照のラベルを探す - ただし関数呼び出しは削除しない\r\n            const usedLabels = new Set();\r\n            codes.forEach((code) => {\r\n                if (needToFixAddr.has(code.type)) {\r\n                    usedLabels.add(code.value);\r\n                }\r\n            });\r\n            // 未参照のラベルを削除\r\n            codes = codes.filter((code) => {\r\n                if (code.type !== NakoCodeLabel) {\r\n                    return true;\r\n                }\r\n                if (code.tag === NakoCodeTagIsFuncpoint) {\r\n                    return true;\r\n                }\r\n                return usedLabels.has(code.value);\r\n            });\r\n            // EOLが連続していたら削除する\r\n            let i = 0;\r\n            while (i < codes.length - 1) {\r\n                if (codes[i].type === NakoCodeEOL && codes[i + 1].type === NakoCodeEOL) {\r\n                    codes.splice(i + 1, 1);\r\n                    continue;\r\n                }\r\n                i++;\r\n            }\r\n            this.codeArray = codes;\r\n        }\r\n        // ラベルアドレスの解決\r\n        codes.forEach((code, index) => {\r\n            if (code.type === NakoCodeLabel) {\r\n                this.labels[code.value] = index;\r\n            }\r\n        });\r\n        codes.forEach((code) => {\r\n            if (needToFixAddr.has(code.type)) {\r\n                if (code.no < 0) {\r\n                    code.no = this.labels[code.value];\r\n                }\r\n            }\r\n        });\r\n        let result = '';\r\n        // コードの生成\r\n        codes.forEach((code, index) => {\r\n            switch (code.type) {\r\n                case NakoCodeNop:\r\n                    result += `case ${index}: break; // [NOP] ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeLabel:\r\n                    result += `case ${index}: break; // [LABEL] ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeEOL:\r\n                    result += `case ${index}: ${code.value}; break; // [EOL]\\n`;\r\n                    break;\r\n                case NakoCodeJump:\r\n                    result += `case ${index}: sys.nextIndex = ${code.no}; break; // ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeJumpIfTrue:\r\n                    result += `case ${index}: if (sys.__stack.pop()) { sys.nextIndex = ${code.no};} break; // ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeJumpIfFalse:\r\n                    result += `case ${index}: if (!sys.__stack.pop()) { sys.nextIndex = ${code.no}} break; // ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeReturn:\r\n                    result += `case ${index}: sys.__return(sys); break;\\n`;\r\n                    break;\r\n                case NakoCodeCall:\r\n                    result += `case ${index}: sys.__call(${code.no}, sys); break; // ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeCallObj:\r\n                    result += `case ${index}: sys.__callObj('${code.value}', ${index}, sys); break; // ${code.value}\\n`;\r\n                    break;\r\n                case NakoCodeTry:\r\n                    result += `case ${index}: sys.tryIndex = ${code.no}; break; // TRY \\n`;\r\n                    break;\r\n                case NakoCodeCode:\r\n                    {\r\n                        // trim last\r\n                        const s = code.value.replace(/\\s+$/, '');\r\n                        result += `case ${index}: {\\n${s}\\n};break;\\n`;\r\n                        break;\r\n                    }\r\n                default:\r\n                    throw new Error('invalid code type');\r\n            }\r\n        });\r\n        result = `\r\n    //-------------------------\r\n    // main_code\r\n    this.__labels = ${JSON.stringify(this.labels)};\r\n    this.nextAsync = (sys) => {\r\n      if (sys.index >= sys.codeSize || sys.index < 0) {return}\r\n      const __v0 = sys.__v0\r\n      try {\r\n        sys.inLoop = true\r\n        while (sys.index < sys.codeSize && sys.index >= 0) {\r\n          // console.log('@@[run]', sys.index)\r\n          switch (sys.index) {\r\n            // --- CODE.BEGIN ---\r\n            ${result}\r\n            // --- CODE.END ---\r\n            default:\r\n              sys.inLoop = false\r\n              console.log(sys.index, sys.__stack)\r\n              throw new Error('Invalid sys.index:' + sys.index)\r\n              break\r\n          }\r\n          // check next\r\n          if (sys.nextIndex >= 0) {\r\n            sys.index = sys.nextIndex\r\n            sys.nextIndex = -1\r\n          } else {\r\n            sys.index++\r\n          }\r\n          if (sys.async) {\r\n            sys.__saveSysenv(sys)\r\n            sys.async = false\r\n            break\r\n          }\r\n        } // end of while\r\n        sys.inLoop = false\r\n      } catch (e) {\r\n        sys.__errorAsync(e, sys)\r\n      }\r\n    }\r\n    this.__errorAsync = (e, sys) => { // エラーが起きた時呼び出す\r\n      sys.__v0[\"エラーメッセージ\"] = e.message;\r\n      if (e.message == '__終わる__') {\r\n        sys.__stopAsync(sys)\r\n        return\r\n      }\r\n      if (sys.tryIndex >= 0) {\r\n        sys.index = sys.tryIndex;\r\n        setTimeout(() => {sys.nextAsync(sys)}, 1)\r\n      } else {\r\n        throw e\r\n      }\r\n    }\r\n    this.__call = (no, sys) => {\r\n      const info = {lastVars:sys.__vars, backNo: this.index + 1}\r\n      sys.__callstack.push(info);\r\n      sys.__vars = {\"それ\":\"\"}\r\n      sys.__varslist.push(sys.__vars)\r\n      sys.nextIndex = no;\r\n    }\r\n    this.__return = sys => {\r\n      if (sys.__callstack.length === 0) {\r\n        sys.__destroySysenv(sys, sys.curSysenv.envid)\r\n        sys.index = -2\r\n        sys.nextIndex = -1\r\n        return\r\n      }\r\n      const sore = sys.__vars['それ'];\r\n      sys.__varslist.pop();\r\n      const info = sys.__callstack.pop();\r\n      sys.nextIndex = info.backNo;\r\n      sys.__vars = info.lastVars;\r\n      sys.__vars['それ'] = sore\r\n      sys.__stack.push(sore);\r\n    }\r\n    this.__resetAsync = sys => {\r\n      sys.index = 0\r\n      sys.codeSize = ${codes.length};\r\n      sys.async = false\r\n      sys.nextIndex = -1\r\n      sys.tryIndex = -1\r\n    }\r\n    this.__stopAsync = sys => {\r\n      sys.__resetAsync(sys)\r\n      sys.index = -1 // force stop!!\r\n    }\r\n    this.__callNakoCode = (no, backNo, sys) => {\r\n      this.__call(backNo, sys)\r\n      sys.nextIndex = no\r\n      const sysenv = sys.setAsync(sys)\r\n      setTimeout(() => {\r\n        // console.log('//__callNakoCode, back=', backNo, 'no=', no)\r\n        sys.compAsync(sys, sysenv)\r\n      } ,1)\r\n    }\r\n    this.__callNakoCodeEntry = (no, sys) => {\r\n      sys.__saveSysenv(sys)\r\n      sys.curSysenv = sys.__generateSysenv(sys)\r\n      sys.__restoreSysenv(sys)\r\n      sys.__vars = {\"それ\":\"\"}\r\n      sys.__varslist.push(sys.__vars)\r\n      sys.index = no;\r\n      sys.nextAsync(sys)\r\n    }\r\n    this.__callObj = (vname, curNo, sys) => {\r\n      if (sys.__vars[vname]) {\r\n        const fname = sys.__vars[vname]\r\n        // console.log(sys.__labels)\r\n        if (fname && sys.__labels[fname]) {\r\n          const no = sys.__labels[fname]\r\n          sys.__call(no, sys)\r\n          return\r\n        } else {\r\n          console.log('vname=', vname, 'label=', fname)\r\n        }\r\n      }\r\n      throw new Error('async error in __callObj::', vname)\r\n    }\r\n    this.__generateSysenv = sys => {\r\n      sys.envid = ( sys.envid == null ? 0 : sys.envid ) + 1\r\n      const sysenv = {\r\n        callstack: [],\r\n        varstack: [],\r\n        varslist: [sys.__varslist[0], sys.__varslist[1], sys.__varslist[2]],\r\n        index: -1,\r\n        nextIndex: -1,\r\n        tryIndex: -1,\r\n        envid: sys.envid\r\n      }\r\n      sysenv.vars = sysenv.varslist[2]\r\n      if (sys.sysenvs == null) { sys.sysenvs={} }\r\n      sys.sysenvs[sys.envid] = sysenv\r\n      // console.log('generete envid '+sys.envid)\r\n      return sysenv\r\n    }\r\n    this.__destroySysenv = (sys, envid) => {\r\n      delete sys.sysenvs[envid]\r\n      // console.log('destroy envid '+envid)\r\n    }\r\n    this.__saveSysenv = sys => {\r\n      const sysenv = sys.curSysenv\r\n      sysenv.callstack = sys.__callstack\r\n      sysenv.varstack = sys.__stack\r\n      sysenv.varslist = sys.__varslist\r\n      sysenv.vars = sys.__vars\r\n      sysenv.index = sys.index\r\n      sysenv.nextIndex = sys.nextIndex\r\n      sysenv.tryIndex = sys.tryIndex\r\n    }\r\n    this.__restoreSysenv = sys => {\r\n      const sysenv = sys.curSysenv\r\n      sys.__callstack = sysenv.callstack\r\n      sys.__stack = sysenv.varstack\r\n      sys.__varslist = sysenv.varslist\r\n      sys.__vars = sysenv.vars\r\n      ___vars = sys.__vars\r\n      sys.index = sysenv.index\r\n      sys.nextIndex = sysenv.nextIndex\r\n      sys.tryIndex = sysenv.tryIndex\r\n    }\r\n    this.setAsync = sys => {\r\n      sys.async = true\r\n      return sys.curSysenv\r\n    }\r\n    this.compAsync = (sys,sysenv) => {\r\n      if (sys.async && sys.curSysenv != null && sysenv != null && sys.curSysenv.envid === sysenv.envid) {\r\n        sys.async = false\r\n      } else {\r\n        if (sys.curSysenv == null || sysenv == null || sys.curSysenv.envid !== sysenv.envid) {\r\n          sys.__saveSysenv(sys)\r\n          const envid = sys.curSysenv.envid\r\n          sys.curSysenv = sysenv\r\n          sys.__restoreSysenv(sys)\r\n          // console.log('switch envid '+envid+' to '+sys.curSysenv.envid)\r\n        }\r\n        sys.nextAsync(sys)\r\n      }\r\n    }\r\n\r\n    this.__resetAsync(this)\r\n    this.curSysenv = this.__generateSysenv(this)\r\n    this.nextAsync(this)\r\n    //-------------------------\r\n    `;\r\n        if (isTest) {\r\n            return '';\r\n        }\r\n        else {\r\n            return result;\r\n        }\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     */\r\n    _convGen(node, isExpression) {\r\n        let code = '';\r\n        if (node instanceof Array) {\r\n            for (let i = 0; i < node.length; i++) {\r\n                const n = node[i];\r\n                code += this._convGen(n, isExpression);\r\n            }\r\n            return code;\r\n        }\r\n        if (node === null) {\r\n            return 'null';\r\n        }\r\n        if (node === undefined) {\r\n            return 'undefined';\r\n        }\r\n        if (typeof (node) !== 'object') {\r\n            return '' + node;\r\n        }\r\n        // switch\r\n        switch (node.type) {\r\n            // === NOP ===\r\n            case 'nop':\r\n                break;\r\n            case 'comment':\r\n                if (!node.value) {\r\n                    node.value = '';\r\n                }\r\n                this.addCode(new NakoCode(NakoCodeNop, node.value));\r\n                break;\r\n            case 'eol':\r\n                this.addCode(new NakoCode(NakoCodeEOL, this.convLineno(node, true)));\r\n                break;\r\n            // === 単純なコード変換 ===\r\n            case 'number':\r\n                this.addCodeStr(`sys.__stack.push(${node.value});//number`);\r\n                break;\r\n            case 'string':\r\n                this.convString(node);\r\n                break;\r\n            case 'word':\r\n            case 'variable':\r\n                this.convGetVar(node);\r\n                break;\r\n            case 'op':\r\n            case 'calc':\r\n                this.convOp(node);\r\n                break;\r\n            case 'renbun':\r\n                this.convRenbun(node);\r\n                break;\r\n            case 'not':\r\n                this._convGen(node.value, true);\r\n                this.addCodeStr('if (sys.__stack.length==0) throw new Error(\\'NOTでスタックに値がありません\\');' +\r\n                    'sys.__stack[sys.__stack.length-1] = (sys.__stack[sys.__stack.length-1]) ? 0:1');\r\n                break;\r\n            case '配列参照':\r\n                this.convRefArray(node);\r\n                break;\r\n            case 'json_array':\r\n                this.convJsonArray(node);\r\n                break;\r\n            case 'json_obj':\r\n                this.convJsonObj(node);\r\n                break;\r\n            case 'bool':\r\n                {\r\n                    const b = (node.value) ? 'true' : 'false';\r\n                    this.addCodeStr(`sys.__stack.push(${b})`);\r\n                    break;\r\n                }\r\n            case 'null':\r\n                this.addCodeStr('sys.__stack.push(null)');\r\n                break;\r\n            case 'func':\r\n            case 'func_pointer':\r\n            case 'calc_func':\r\n                this.convFunc(node, isExpression); // 関数の呼び出し\r\n                break;\r\n            // === 文の変換 ===\r\n            case 'let':\r\n                this.convLet(node);\r\n                break;\r\n            case 'let_array':\r\n                this.convLetArray(node);\r\n                break;\r\n            case 'block':\r\n                for (let i = 0; i < node.block.length; i++) {\r\n                    const b = node.block[i];\r\n                    this._convGen(b, false);\r\n                }\r\n                break;\r\n            case 'if':\r\n                this.convIf(node);\r\n                break;\r\n            case 'repeat_times':\r\n                this.convRepeatTimes(node);\r\n                break;\r\n            case 'break':\r\n                this.addCodeStr(this.convCheckLoop(node, 'break'));\r\n                break;\r\n            case 'continue':\r\n                this.addCodeStr(this.convCheckLoop(node, 'continue'));\r\n                break;\r\n            case 'for':\r\n                this.convFor(node);\r\n                break;\r\n            case 'foreach':\r\n                this.convForeach(node);\r\n                break;\r\n            case 'while':\r\n                this.convWhile(node);\r\n                break;\r\n            case 'switch':\r\n                this.convSwitch(node);\r\n                break;\r\n            case 'return':\r\n                this.convReturn(node);\r\n                break;\r\n            case 'end':\r\n                code += this.addCodeStr('__varslist[0][\\'終\\']();');\r\n                break;\r\n            case 'def_local_var':\r\n                this.convDefLocalVar(node);\r\n                break;\r\n            case 'def_local_varlist':\r\n                code += this.addCodeStr(this.convDefLocalVarlist(node));\r\n                break;\r\n            case 'tikuji':\r\n                throw NakoSyntaxError.fromNode('「逐次実行」構文は「!非同期モード」では使えません。', node);\r\n            case 'speed_mode':\r\n                throw NakoSyntaxError.fromNode('「速度有線」構文は「!非同期モード」では使えません。', node);\r\n            case 'performance_monitor':\r\n                this.convPerformanceMonitor(node, isExpression);\r\n                break;\r\n            case 'func_obj':\r\n                this.convFuncObj(node);\r\n                break;\r\n            case 'def_test':\r\n                this.convDefTest(node);\r\n                break;\r\n            case 'def_func':\r\n                code += this.addCodeStr(this.convDefFunc(node));\r\n                break;\r\n            // TODO\r\n            case 'try_except':\r\n                code += this.convTryExcept(node);\r\n                break;\r\n            case 'require':\r\n                code += this.convRequire(node);\r\n                break;\r\n            default:\r\n                throw new Error('System Error: unknown_type=' + node.type);\r\n        }\r\n        return code;\r\n    }\r\n    convRequire(node) {\r\n        const gen = new NakoGen(this.com);\r\n        this.addCodeStr(gen.convRequire(node));\r\n        return '';\r\n    }\r\n    /**\r\n     * add code to array\r\n     * @param {string} codeStr\r\n     * @returns {string}\r\n     */\r\n    addCodeStr(codeStr) {\r\n        if (codeStr === '') {\r\n            return '';\r\n        }\r\n        const a = codeStr.split('\\n');\r\n        const a2 = a.map((row) => '  ' + row.replace(/\\s+$/, ''));\r\n        const c = new NakoCode(NakoCodeCode, a2.join('\\n'));\r\n        return this.addCode(c);\r\n    }\r\n    /**\r\n     * add code to array\r\n     * @param {NakoCode} code\r\n     * @returns {string}\r\n     */\r\n    addCode(code) {\r\n        this.codeArray[this.codeId] = code;\r\n        this.codeId++;\r\n        return '';\r\n    }\r\n    /**\r\n     * make label for jump\r\n     * @param {string} name\r\n     * @returns {NakoCode}\r\n     */\r\n    makeLabel(name) {\r\n        const uniqLabel = name + '_' + (this.loopId++);\r\n        return this.makeLabelDirectly(uniqLabel);\r\n    }\r\n    /**\r\n     * make label for function\r\n     * @param {string} labelName\r\n     * @returns {NakoCode}\r\n     */\r\n    makeLabelDirectly(labelName) {\r\n        const c = new NakoCode(NakoCodeLabel, labelName);\r\n        this.labels[labelName] = -1;\r\n        return c;\r\n    }\r\n    /**\r\n     * make Jump\r\n     * @param {NakoCode} label\r\n     * @returns {NakoCode}\r\n     */\r\n    makeJump(label) {\r\n        return new NakoCode(NakoCodeJump, label.value);\r\n    }\r\n    /**\r\n     * make Jump if true\r\n     * @param {NakoCode} label\r\n     * @returns {NakoCode}\r\n     */\r\n    makeJumpIfTrue(label) {\r\n        return new NakoCode(NakoCodeJumpIfTrue, label.value);\r\n    }\r\n    /**\r\n     * make Jump if false\r\n     * @param {NakoCode} label\r\n     * @returns {NakoCode}\r\n     */\r\n    makeJumpIfFalse(label) {\r\n        return new NakoCode(NakoCodeJumpIfFalse, label.value);\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     */\r\n    convIf(node) {\r\n        const labelBegin = this.makeLabel('もし:ここから');\r\n        const labelEnd = this.makeLabel('もし:ここまで');\r\n        const labelIfFalse = this.makeLabel('もし:違えば');\r\n        //\r\n        this.addCode(labelBegin);\r\n        this._convGen(node.expr, true);\r\n        this.addCode(this.makeJumpIfFalse(labelIfFalse));\r\n        this._convGen(node.block, false);\r\n        this.addCode(this.makeJump(labelEnd));\r\n        this.addCode(labelIfFalse);\r\n        if (node.falseBlock) {\r\n            this._convGen(node.falseBlock, false);\r\n        }\r\n        this.addCode(labelEnd);\r\n        return '';\r\n    }\r\n    convRepeatTimes(node) {\r\n        this.flagLoop = true;\r\n        this.varsSet.names.add('回数');\r\n        this.varsSet.readonly.add('回数');\r\n        // ループ管理変数を作成\r\n        const loopVar = `sys.__tmp_i${this.loopId}`;\r\n        this.loopId++;\r\n        // ループ回数を取得\r\n        const loopCount = `sys.__tmp_count${this.loopId}`;\r\n        this.loopId++;\r\n        this._convGen(node.value, true);\r\n        this.addCodeStr(`${loopCount} = sys.__stack.pop(); ${loopVar} = 0;`);\r\n        const labelCheck = this.makeLabel('回:条件チェック');\r\n        this.addCode(labelCheck);\r\n        const labelEnd = this.makeLabel('回:ここまで');\r\n        this.labelBreak = labelEnd;\r\n        this.labelContinue = labelCheck;\r\n        // 繰り返し判定\r\n        const kaisu = 'sys.__vars[\"回数\"]';\r\n        const cond = `${kaisu} = ++${loopVar}\\n` +\r\n            `sys.__stack.push(${loopVar} > ${loopCount})\\n`;\r\n        this.addCodeStr(cond);\r\n        this.addCode(this.makeJumpIfTrue(labelEnd));\r\n        this.convGenLoop(node.block); // read block\r\n        this.addCode(this.makeJump(labelCheck));\r\n        this.addCode(labelEnd);\r\n        this.flagLoop = false;\r\n        return '';\r\n    }\r\n    /**\r\n     * @param {string} name\r\n     * @returns {{i: number, name: string, isTop: boolean, js: string} | null}\r\n     */\r\n    findVar(name) {\r\n        // __vars ? (ローカル変数)\r\n        if (this.varsSet.names.has(name)) {\r\n            return { i: this.varslistSet.length - 1, name, isTop: true, js: `sys.__vars[${JSON.stringify(name)}]` };\r\n        }\r\n        // __varslist ?\r\n        for (let i = 2; i >= 0; i--) {\r\n            if (this.varslistSet[i].names.has(name)) {\r\n                return { i, name, isTop: false, js: `sys.__varslist[${i}][${JSON.stringify(name)}]` };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 定義済みの変数の参照\r\n     * @param {string} name\r\n     * @param {Ast} position\r\n     */\r\n    genVar(name, position) {\r\n        const res = this.findVar(name);\r\n        const lno = position.line;\r\n        if (res === null) {\r\n            // 定義されていない名前の参照は変数の定義とみなす。\r\n            // 多くの場合はundefined値を持つ変数であり分かりづらいバグを引き起こすが、\r\n            // 「ナデシコする」などの命令の中で定義された変数の参照の場合があるため警告に留める。\r\n            // ただし、自動的に定義される変数『引数』『それ』などは例外 #952\r\n            if (name === '引数' || name === 'それ' || name === '対象' || name === '対象キー' || name === '回数') {\r\n                // デフォルト定義されている変数名\r\n            }\r\n            else {\r\n                this.__self.getLogger().warn(`変数『${name}』は定義されていません。`, position);\r\n            }\r\n            this.varsSet.names.add(name);\r\n            return this.varname(name);\r\n        }\r\n        const i = res.i;\r\n        // システム関数・変数の場合\r\n        if (i === 0) {\r\n            const pv = this.__self.getFunc(name);\r\n            if (!pv) {\r\n                return `${res.js}/*err:${lno}*/`;\r\n            }\r\n            if (pv.type === 'const' || pv.type === 'var') {\r\n                return res.js;\r\n            }\r\n            if (pv.type === 'func') {\r\n                if (!pv.josi) {\r\n                    throw new Error('[System Error]');\r\n                }\r\n                if (pv.josi.length === 0) {\r\n                    return `(${res.js}())`;\r\n                }\r\n                throw NakoSyntaxError.fromNode(`『${name}』が複文で使われました。単文で記述してください。(v1非互換)`, position);\r\n            }\r\n            throw NakoSyntaxError.fromNode(`『${name}』は関数であり参照できません。`, position);\r\n        }\r\n        return res.js;\r\n    }\r\n    convGetVar(node) {\r\n        const name = node.value;\r\n        let varName = `sys.__vars[${JSON.stringify(name)}]`;\r\n        const o = this.findVar(name);\r\n        if (o != null) {\r\n            varName = o.js;\r\n        }\r\n        this.addCodeStr(`sys.__stack.push(${varName});`);\r\n    }\r\n    convComment(node) {\r\n        let commentSrc = String(node.value);\r\n        commentSrc = commentSrc.replace(/\\n/g, '¶');\r\n        const lineNo = this.convLineno(node, false);\r\n        if (commentSrc === '' && lineNo === '') {\r\n            return ';';\r\n        }\r\n        if (commentSrc === '') {\r\n            return ';' + lineNo + '\\n';\r\n        }\r\n        return ';' + lineNo + '//' + commentSrc + '\\n';\r\n    }\r\n    convReturn(node) {\r\n        // 関数の中であれば利用可能\r\n        if (this.varsSet.names.has('!関数')) {\r\n            throw NakoSyntaxError.fromNode('『戻る』がありますが、関数定義内のみで使用可能です。', node);\r\n        }\r\n        if (node.value) {\r\n            this._convGen(node.value, true);\r\n            this.addCodeStr('sys.__vars[\"それ\"] = sys.__stack.pop()');\r\n        }\r\n        this.addCode(new NakoCode(NakoCodeReturn, ''));\r\n        return '';\r\n    }\r\n    convCheckLoop(node, cmd) {\r\n        // ループの中であれば利用可能\r\n        if (!this.flagLoop) {\r\n            const cmdj = (cmd === 'continue') ? '続ける' : '抜ける';\r\n            throw NakoSyntaxError.fromNode(`『${cmdj}』文がありますが、それは繰り返しの中で利用してください。`, node);\r\n        }\r\n        if (cmd === 'continue') {\r\n            if (this.labelContinue) {\r\n                this.addCode(this.makeJump(this.labelContinue));\r\n            }\r\n        }\r\n        else {\r\n            if (this.labelBreak) {\r\n                this.addCode(this.makeJump(this.labelBreak));\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    convDefFuncCommon(node, name) {\r\n        // deffunc_code\r\n        const isMumeiFunc = (name === '');\r\n        let funcName = name;\r\n        if (isMumeiFunc) {\r\n            funcName = `無名関数:${this.loopId++}`;\r\n        }\r\n        const labelEnd = this.makeLabel(`関数「${funcName}」:ここまで`);\r\n        this.addCode(this.makeJump(labelEnd));\r\n        const labelBegin = this.makeLabelDirectly(funcName);\r\n        labelBegin.tag = NakoCodeTagIsFuncpoint; // 削除対象からはずすため\r\n        this.addCode(labelBegin);\r\n        //\r\n        const initialNames = new Set();\r\n        this.varsSet = { isFunction: true, names: initialNames, readonly: new Set() };\r\n        this.varsSet.names.add('それ');\r\n        // ローカル変数をPUSHする\r\n        this.varslistSet.push(this.varsSet);\r\n        // JSの引数と引数をバインド\r\n        const meta = isMumeiFunc ? node.meta : node.name.meta;\r\n        let code = '';\r\n        let codeCall = '';\r\n        code += `//関数『${funcName}』の初期化処理\\n`;\r\n        // 宣言済みの名前を保存\r\n        // const varsDeclared = Array.from(this.varsSet.names.values())\r\n        // 引数をローカル変数に設定 (スタックの末尾から取得する必要があるので、逆順に値を得る)\r\n        code += '// 引数をローカル変数として登録\\n';\r\n        for (let i = meta.varnames.length - 1; i >= 0; i--) {\r\n            const word = meta.varnames[i];\r\n            code += `  ${this.varname(word)} = sys.__stack.pop();\\n`;\r\n            this.varsSet.names.add(word);\r\n            codeCall += ''; //  sys.__stack.push(arguments[${i}]);\\n\r\n        }\r\n        code += '// ここまで:引数をローカル変数として登録\\n';\r\n        this.addCodeStr(code);\r\n        // 関数定義は、グローバル領域で。\r\n        this.usedFuncSet.add(funcName);\r\n        this.varslistSet[1].names.add(funcName);\r\n        this.nakoFuncList[funcName] = {\r\n            josi: meta.josi,\r\n            fn: '(function(){\\n' +\r\n                '  const sys = (arguments.length > 0) ? arguments[arguments.length-1] : {}; \\n' +\r\n                '  if (sys.newenv) { \\n' +\r\n                '    sys.newenv = false\\n' +\r\n                `    sys.__callNakoCodeEntry(sys.__labels['${funcName}'], sys);` + '\\n' +\r\n                '  } else {\\n' +\r\n                '  ' + codeCall + '\\n' +\r\n                `    sys.__callNakoCode(sys.__labels['${funcName}'], sys.nextIndex, sys);` + '\\n' +\r\n                '    if (!sys.inLoop) { sys.nextAsync(sys) }\\n' +\r\n                '  }  })',\r\n            type: 'func'\r\n        };\r\n        // ブロックを解析\r\n        this._convGen(node.block, false);\r\n        this.varslistSet.pop();\r\n        this.varsSet = this.varslistSet[this.varslistSet.length - 1];\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.__self.__varslist[1][funcName] = function () { };\r\n        this.addCode(new NakoCode(NakoCodeReturn, ''));\r\n        this.addCode(labelEnd);\r\n        // 無名関数の定義であれば無名関数をPUSH\r\n        if (!name) {\r\n            this.addCodeStr(`sys.__stack.push('${funcName}')`);\r\n        }\r\n        return '';\r\n    }\r\n    convDefTest(node) {\r\n        throw NakoSyntaxError.fromNode('テスト構文は!非同期モードでは使えません。', node);\r\n    }\r\n    convDefFunc(node) {\r\n        const name = NakoGen.getFuncName(node.name.value);\r\n        this.convDefFuncCommon(node, name);\r\n        // ★この時点では関数のコードを生成しない★\r\n        // プログラム冒頭でコード生成時に関数定義を行う\r\n        return '';\r\n    }\r\n    convFuncObj(node) {\r\n        return this.convDefFuncCommon(node, '');\r\n    }\r\n    convJsonObj(node) {\r\n        const list = node.value;\r\n        const objName = `sys.__tmp_obj${this.loopId++}`;\r\n        this.addCodeStr(objName + '={}; // convJsonObj::ここから');\r\n        list.forEach((e) => {\r\n            this._convGen(e.value, true);\r\n            this._convGen(e.key, true);\r\n            this.addCodeStr(`${objName}[sys.__stack.pop()]=sys.__stack.pop()`);\r\n        });\r\n        this.addCodeStr(`this.__stack.push(${objName}); delete $objName; // convJsonObj::ここまで`);\r\n        return '';\r\n    }\r\n    convJsonArray(node) {\r\n        const list = node.value;\r\n        this.addCode(this.makeLabel('convJsonArray::ここから'));\r\n        list.forEach((e) => this._convGen(e, true));\r\n        const size = list.length;\r\n        this.addCodeStr(`sys.__stack.push(sys.__stack.splice(sys.__stack.length-${size},${size}))`);\r\n        return '';\r\n    }\r\n    convRefArray(node) {\r\n        // 名前をPUSH\r\n        this._convGen(node.name, true);\r\n        const list = node.index;\r\n        for (let i = 0; i < list.length; i++) {\r\n            // push index\r\n            this._convGen(list[i], true);\r\n            // pop index & push value\r\n            this.addCodeStr('const idx = sys.__stack.pop();\\n' +\r\n                'const obj = sys.__stack.pop();\\n' +\r\n                'sys.__stack.push(obj[idx]);');\r\n        }\r\n        return '';\r\n    }\r\n    convLetArray(node) {\r\n        // 代入する値をPUSH\r\n        this._convGen(node.value, true);\r\n        // 変数を取得\r\n        this._convGen(node.name, true);\r\n        const list = node.index;\r\n        for (let i = 0; i < list.length; i++) {\r\n            this._convGen(list[i], true);\r\n            if (i === list.length - 1) { // 代入\r\n                this.addCodeStr('const idx = this.__stack.pop();' +\r\n                    'const obj = this.__stack.pop();' +\r\n                    'const val = this.__stack.pop();' +\r\n                    'obj[idx]=val;');\r\n                break;\r\n            }\r\n            // index アクセス\r\n            this.addCodeStr('const idx = sys.__stack.pop();\\n' +\r\n                'const obj = sys.__stack.pop();\\n' +\r\n                'sys.__stack.push(obj[idx]);');\r\n        }\r\n        return '';\r\n    }\r\n    convGenLoop(node) {\r\n        const tmpflag = this.flagLoop;\r\n        this.flagLoop = true;\r\n        try {\r\n            return this._convGen(node, false);\r\n        }\r\n        finally {\r\n            this.flagLoop = tmpflag;\r\n        }\r\n    }\r\n    convFor(node) {\r\n        this.flagLoop = true;\r\n        // ループ変数について\r\n        let word;\r\n        if (node.word !== null) { // ループ変数を使う時\r\n            const varName = node.word.value;\r\n            this.varsSet.names.add(varName);\r\n            word = this.varname(varName);\r\n        }\r\n        else {\r\n            this.varsSet.names.add('dummy');\r\n            word = this.varname('dummy');\r\n        }\r\n        const sore = this.varname('それ');\r\n        const idLoop = this.loopId++;\r\n        const varI = `sys.__tmp__i${idLoop}`;\r\n        // ループ条件を変数に入れる用\r\n        const varTo = `sys.__tmp__to${idLoop}`;\r\n        // ループ条件を確認\r\n        this._convGen(node.from, true);\r\n        this._convGen(node.to, true);\r\n        this.addCodeStr(`${varTo}=sys.__stack.pop();${varI}=sys.__stack.pop();`);\r\n        // ループ変数を初期化\r\n        this.addCodeStr(`${sore} = ${word} = ${varI}`);\r\n        // 繰り返し判定\r\n        const labelCheck = this.makeLabel('繰返:条件確認');\r\n        const labelInc = this.makeLabel('繰返:加算');\r\n        this.addCode(labelCheck);\r\n        const labelEnd = this.makeLabel('繰返:ここまで');\r\n        this.addCodeStr(`sys.__stack.push(${word} <= ${varTo})`);\r\n        this.addCode(this.makeJumpIfFalse(labelEnd));\r\n        this.labelContinue = labelInc;\r\n        this.labelBreak = labelEnd;\r\n        // ループ内のブロック内容を得る\r\n        this.convGenLoop(node.block); // block\r\n        this.addCode(labelInc);\r\n        this.addCodeStr(`${sore} = ++${word};`);\r\n        this.addCode(this.makeJump(labelCheck));\r\n        this.addCode(labelEnd);\r\n        this.addCodeStr(`delete ${varI};delete ${varTo};//繰返:掃除`);\r\n        this.flagLoop = false;\r\n        return '';\r\n    }\r\n    convForeach(node) {\r\n        this.flagLoop = true;\r\n        // 対象を用意する\r\n        let taisyo = '__v0[\"対象\"]';\r\n        const taisyoKey = '__v0[\"対象キー\"]';\r\n        if (node.name) {\r\n            taisyo = this.varname(node.name.value);\r\n            this.varsSet.names.add(node.name.value);\r\n        }\r\n        // 反復対象を調べる\r\n        const target = node.target;\r\n        if (target === null) {\r\n            throw NakoSyntaxError.fromNode('『反復』の対象がありません。', node);\r\n        }\r\n        const sore = this.varname('それ');\r\n        const targetArray = `sys.__tmp__target${this.loopId++}`;\r\n        const targetKeys = `sys.__tmp__keys${this.loopId++}`;\r\n        const loopVar = `sys.__tmp__i${this.loopId++}`;\r\n        const loopCount = `sys.__tmp__count${this.loopId++}`;\r\n        // 反復対象を評価\r\n        this._convGen(node.target, true);\r\n        // どのように反復するか判定\r\n        const initCode = '// 反復: 初期化\\n' +\r\n            `${targetArray} = sys.__stack.pop();\\n` +\r\n            `${loopVar} = 0;\\n` +\r\n            // 文字列や数値なら反復できるように配列に入れる\r\n            `if (typeof(${targetArray}) == 'string' || typeof(${targetArray}) == 'number') { ${targetArray} = [${targetArray}]; }\\n` +\r\n            // Objectならキー一覧を得る\r\n            `if (${targetArray} instanceof Array) { ${loopCount} = ${targetArray}.length; }\\n` +\r\n            'else { // キーの一覧を得る\\n' +\r\n            `  ${targetKeys} = Object.keys(${targetArray}); \\n` +\r\n            '  // hasOwnPropertyがfalseならばkeyを消す処理\\n' +\r\n            `  ${targetKeys} = ${targetKeys}.filter((key)=>{ return ${targetArray}.hasOwnProperty(key) })\\n` +\r\n            `  ${loopCount} = ${targetKeys}.length;\\n` +\r\n            '}\\n';\r\n        this.addCodeStr(initCode);\r\n        const labelCheck = this.makeLabel('反復:条件確認');\r\n        const labelInc = this.makeLabel('反復:加算');\r\n        const labelEnd = this.makeLabel('反復:ここまで');\r\n        this.labelBreak = labelEnd;\r\n        this.labelContinue = labelInc;\r\n        this.addCode(labelCheck);\r\n        const setTarget = `if (${targetArray} instanceof Array) {\\n` +\r\n            // eslint-disable-next-line no-irregular-whitespace\r\n            `  ${taisyo} = ${sore} = ${targetArray}[${loopVar}];　${taisyoKey} = ${loopVar};\\n` +\r\n            '} else {\\n' +\r\n            `  ${taisyoKey} = ${targetKeys}[${loopVar}]; ${taisyo} = ${sore} = ${targetArray}[${taisyoKey}];\\n` +\r\n            '}\\n';\r\n        this.addCodeStr(`${setTarget}\\nsys.__stack.push(${loopVar} < ${loopCount});`);\r\n        this.addCode(this.makeJumpIfFalse(labelEnd));\r\n        // 反復ブロックを定義\r\n        this.convGenLoop(node.block); // block\r\n        // 加算\r\n        this.addCode(labelInc);\r\n        this.addCodeStr(`${loopVar}++`);\r\n        this.addCode(this.makeJump(labelCheck));\r\n        this.addCode(labelEnd);\r\n        this.flagLoop = false;\r\n        return '';\r\n    }\r\n    convWhile(node) {\r\n        this.flagLoop = true;\r\n        const labelBegin = this.makeLabel('間:ここから');\r\n        const labelEnd = this.makeLabel('間:ここまで');\r\n        this.labelContinue = labelBegin;\r\n        this.labelBreak = labelEnd;\r\n        this.addCode(labelBegin);\r\n        // 条件をスタックに\r\n        this._convGen(node.cond, true);\r\n        this.addCode(this.makeJumpIfFalse(labelEnd));\r\n        // ブロックを追加\r\n        this.convGenLoop(node.block);\r\n        this.addCode(this.makeJump(labelBegin));\r\n        this.addCode(labelEnd);\r\n        this.flagLoop = false;\r\n        return '';\r\n    }\r\n    /**\r\n     * @param {Ast} _node\r\n     * @param {boolean} _isExpression\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    convSpeedMode(_node, _isExpression) {\r\n        return '';\r\n    }\r\n    /**\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     */\r\n    convPerformanceMonitor(node, isExpression) {\r\n        const prev = { ...this.performanceMonitor };\r\n        if (node.options['ユーザ関数']) {\r\n            this.performanceMonitor.userFunction++;\r\n        }\r\n        if (node.options['システム関数本体']) {\r\n            this.performanceMonitor.systemFunctionBody++;\r\n        }\r\n        if (node.options['システム関数']) {\r\n            this.performanceMonitor.systemFunction++;\r\n        }\r\n        this._convGen(node.block, isExpression);\r\n        this.performanceMonitor = prev;\r\n    }\r\n    convSwitch(node) {\r\n        // 値をPUSH\r\n        this._convGen(node.value, true);\r\n        const varValue = `sys.__tmp__i${this.loopId++}`;\r\n        this.addCodeStr(`${varValue} = sys.__stack.pop()`);\r\n        const labelEnd = this.makeLabel('条件分岐:ここまで');\r\n        const cases = node.cases;\r\n        for (let i = 0; i < cases.length; i++) {\r\n            const cvalue = cases[i][0];\r\n            if (cvalue.type === '違えば') {\r\n                this.convGenLoop(cases[i][1]);\r\n            }\r\n            else {\r\n                const nextLabel = this.makeLabel('条件分岐:次');\r\n                this._convGen(cvalue, true);\r\n                this.addCodeStr(`sys.__stack.push(sys.__stack.pop() == ${varValue})`);\r\n                this.addCode(this.makeJumpIfFalse(nextLabel));\r\n                this.convGenLoop(cases[i][1]);\r\n                this.addCode(this.makeJump(labelEnd));\r\n                this.addCode(nextLabel);\r\n            }\r\n        }\r\n        this.addCode(labelEnd);\r\n        this.addCodeStr(`delete ${varValue}//条件分岐:掃除`);\r\n        return '';\r\n    }\r\n    convFuncGetArgsCalcType(funcName, func, node) {\r\n        const opts = {};\r\n        for (let i = 0; i < node.args.length; i++) {\r\n            const arg = node.args[i];\r\n            if (i === 0 && arg === null) {\r\n                this.addCodeStr('sys.__stack.push(sys.__vars[\\'それ\\'])');\r\n                opts.sore = true;\r\n            }\r\n            else {\r\n                // 関数の引数を評価\r\n                this._convGen(arg, true);\r\n            }\r\n        }\r\n        return opts;\r\n    }\r\n    getPluginList() {\r\n        const r = [];\r\n        for (const name in this.__self.__module) {\r\n            r.push(name);\r\n        }\r\n        return r;\r\n    }\r\n    /**\r\n     * 関数の呼び出し\r\n     * @param {Ast} node\r\n     * @param {boolean} isExpression\r\n     * @returns string コード\r\n     */\r\n    convFunc(node, isExpression) {\r\n        let isJSFunc = false;\r\n        let isMumeiFunc = false;\r\n        const funcName = NakoGen.getFuncName(node.name);\r\n        const res = this.findVar(funcName);\r\n        if (res === null) {\r\n            throw NakoSyntaxError.fromNode(`関数『${funcName}』が見当たりません。有効プラグイン=[` + this.getPluginList().join(', ') + ']', node);\r\n        }\r\n        let func;\r\n        if (res.i === 0) { // plugin function\r\n            func = this.__self.getFunc(funcName);\r\n            if (func.type !== 'func') {\r\n                throw NakoSyntaxError.fromNode(`『${funcName}』は関数ではありません。`, node);\r\n            }\r\n            isJSFunc = true;\r\n        }\r\n        else {\r\n            func = this.nakoFuncList[funcName];\r\n            // 無名関数の可能性\r\n            if (func === undefined) {\r\n                isMumeiFunc = true;\r\n                func = { return_none: false };\r\n            }\r\n        }\r\n        // 関数の参照渡しか？\r\n        if (node.type === 'func_pointer') {\r\n            return res.js;\r\n        }\r\n        // 関数の参照渡しでない場合\r\n        // 関数定義より助詞を一つずつ調べる\r\n        const argsOpts = this.convFuncGetArgsCalcType(funcName, func, node);\r\n        // function\r\n        this.usedFuncSet.add(funcName);\r\n        let funcBegin = '';\r\n        let funcEnd = '';\r\n        // setter?\r\n        if (node.setter) {\r\n            funcBegin += ';__self.isSetter = true;\\n';\r\n            funcEnd += ';__self.isSetter = false;\\n';\r\n        }\r\n        // 変数「それ」が補完されていることをヒントとして出力\r\n        if (argsOpts.sore) {\r\n            funcBegin += '/*[sore]*/';\r\n        }\r\n        // 引数をスタックに積む\r\n        const arcCount = node.args.length;\r\n        // 必要な引数分だけスタックから下ろして呼び出す\r\n        let code = '';\r\n        if (isJSFunc) {\r\n            code += funcBegin;\r\n            code += `const args = sys.__stack.splice(sys.__stack.length - ${arcCount}, ${arcCount});\\n`;\r\n            // code += `console.log(\"call:${funcName}\", args, 'sys');\\n`\r\n            code += 'args.push(sys);\\n';\r\n            code += `const ret = ${res.js}.apply(sys, args);\\n`;\r\n            if (!func.return_none) {\r\n                code += 'sys.__vars[\\'それ\\'] = ret;\\n';\r\n                if (isExpression) {\r\n                    code += 'sys.__stack.push(ret);\\n';\r\n                }\r\n            }\r\n            code += funcEnd;\r\n            this.addCodeStr(code);\r\n        }\r\n        else {\r\n            if (isMumeiFunc) {\r\n                this.addCode(new NakoCode(NakoCodeCallObj, funcName));\r\n            }\r\n            else {\r\n                this.addCode(new NakoCode(NakoCodeCall, funcName));\r\n            }\r\n            if (!isExpression) {\r\n                this.addCodeStr('sys.__stack.pop();// 戻り値を利用しない関数呼出');\r\n            }\r\n        }\r\n    }\r\n    convRenbun(node) {\r\n        this._convGen(node.left, false);\r\n        this._convGen(node.right, true);\r\n    }\r\n    convOp(node) {\r\n        const OP_TBL = {\r\n            '&': '+\"\"+',\r\n            eq: '==',\r\n            noteq: '!=',\r\n            '===': '===',\r\n            '!==': '!==',\r\n            gt: '>',\r\n            lt: '<',\r\n            gteq: '>=',\r\n            lteq: '<=',\r\n            and: '&&',\r\n            or: '||',\r\n            shift_l: '<<',\r\n            shift_r: '>>',\r\n            shift_r0: '>>>',\r\n            '÷': '/'\r\n        };\r\n        const op = node.operator; // 演算子\r\n        // 値はスタックに載せられる\r\n        // left\r\n        this._convGen(node.left, true);\r\n        // right\r\n        this._convGen(node.right, true);\r\n        // calc\r\n        let code = 'const rv = sys.__stack.pop();\\n' +\r\n            'const lv = sys.__stack.pop();\\n';\r\n        if (op === '^') {\r\n            code += 'const v = (Math.pow(lv, rv))\\n';\r\n        }\r\n        else {\r\n            const op2 = OP_TBL[op] || op;\r\n            code += `const v = ((lv) ${op2} (rv));\\n`;\r\n        }\r\n        // code += `if (isNaN(v) && '${op}' != '&') { console.log('ERROR:${op}', lv, rv) }\\n`\r\n        code += `sys.__stack.push(v); //op:${op}\\n`;\r\n        this.addCodeStr(code);\r\n    }\r\n    convLet(node) {\r\n        let code = '';\r\n        // 値をスタックに載せる\r\n        if (node.value === null) {\r\n            // 値が省略されたら「それ」を載せる\r\n            this.addCodeStr('sys.__stack.push(sys.__vars[\\'それ\\'])');\r\n        }\r\n        else {\r\n            // 値がある場合\r\n            this._convGen(node.value, true);\r\n        }\r\n        // 変数名\r\n        const name = node.name.value;\r\n        const res = this.findVar(name);\r\n        if (res === null) {\r\n            this.varsSet.names.add(name);\r\n            code = `${this.varname(name)}=sys.__stack.pop();`;\r\n        }\r\n        else {\r\n            // 定数ならエラーを出す\r\n            if (this.varslistSet[res.i].readonly.has(name)) {\r\n                throw NakoSyntaxError.fromNode(`定数『${name}』は既に定義済みなので、値を代入することはできません。`, node);\r\n            }\r\n            code = `${res.js}=sys.__stack.pop();`;\r\n        }\r\n        this.addCodeStr(code + '//let');\r\n    }\r\n    convDefLocalVar(node) {\r\n        if (node.value === null) {\r\n            this.addCodeStr('sys.__stack.push(null)');\r\n        }\r\n        else {\r\n            this._convGen(node.value, true);\r\n        }\r\n        const name = node.name.value;\r\n        const vtype = node.vartype; // 変数 or 定数\r\n        // 二重定義？\r\n        if (this.varsSet.names.has(name)) {\r\n            throw NakoSyntaxError.fromNode(`${vtype}『${name}』の二重定義はできません。`, node);\r\n        }\r\n        this.varsSet.names.add(name);\r\n        // 定数?\r\n        if (vtype === '定数') {\r\n            this.varsSet.readonly.add(name);\r\n        }\r\n        this.addCodeStr(`${this.varname(name)}=sys.__stack.pop()`);\r\n        return '';\r\n    }\r\n    // #563 複数変数への代入\r\n    convDefLocalVarlist(node) {\r\n        const vtype = node.vartype; // 変数 or 定数\r\n        if (node.value === null) {\r\n            this.addCodeStr('sys.__stack.push(null)');\r\n        }\r\n        else {\r\n            this._convGen(node.value, true);\r\n        }\r\n        const varI = `sys.__tmp_i${this.loopId}`;\r\n        this.loopId++;\r\n        this.addCodeStr(`${varI}=sys.__stack.pop();if (!(${varI} instanceof Array)) { ${varI}=[${varI}] }`);\r\n        for (const nameObj of node.names) {\r\n            const name = nameObj.value;\r\n            // 二重定義？\r\n            if (this.varsSet.names.has(name)) {\r\n                throw NakoSyntaxError.fromNode(`${vtype}『${name}』の二重定義はできません。`, node);\r\n            }\r\n            //\r\n            this.varsSet.names.add(name);\r\n            if (vtype === '定数') {\r\n                this.varsSet.readonly.add(name);\r\n            }\r\n            const vname = this.varname(name);\r\n            this.addCodeStr(`${vname}=${varI}.pop()`);\r\n        }\r\n        this.addCodeStr(`delete ${varI}//複数代入:掃除`);\r\n        return '';\r\n    }\r\n    convString(node) {\r\n        let value = '' + node.value;\r\n        const mode = node.mode;\r\n        value = value.replace(/\\\\/g, '\\\\\\\\');\r\n        value = value.replace(/\"/g, '\\\\\"');\r\n        value = value.replace(/\\r/g, '\\\\r');\r\n        value = value.replace(/\\n/g, '\\\\n');\r\n        if (mode === 'ex') {\r\n            throw new Error('[システムエラー] ジェネレーターでの文字列の展開はサポートしていません');\r\n        }\r\n        this.addCodeStr(`sys.__stack.push(\"${value}\")//string`);\r\n        return '\"' + value + '\"';\r\n    }\r\n    convTryExcept(node) {\r\n        const labelExcept = this.makeLabel('エラー監視:ならば');\r\n        const labelEnd = this.makeLabel('エラー監視:ここまで');\r\n        // エラーをひっかけるように設定\r\n        this.addCode(new NakoCode(NakoCodeTry, labelExcept.value));\r\n        this._convGen(node.block, false);\r\n        this.addCode(this.makeJump(labelEnd));\r\n        this.addCode(labelExcept);\r\n        this._convGen(node.errBlock, false);\r\n        this.addCode(labelEnd);\r\n    }\r\n}\r\n// ブラウザに登録する\r\nif (typeof (navigator) === 'object' && typeof (navigator.nako3) === 'object') {\r\n    // Webブラウザの場合\r\n    const nako3 = navigator.nako3;\r\n    if (nako3.addCodeGenerator) {\r\n        nako3.addCodeGenerator('非同期モード', NakoGenASync);\r\n    }\r\n}\r\n","/**\r\n * 助詞の一覧\r\n */\r\nexport const josiList = [\r\n    'について', 'くらい', 'なのか', 'までを', 'までの', 'による',\r\n    'とは', 'から', 'まで', 'だけ', 'より', 'ほど', 'など',\r\n    'いて', 'えて', 'きて', 'けて', 'して', 'って', 'にて', 'みて',\r\n    'めて', 'ねて', 'では', 'には', 'は~', 'んで', 'ずつ',\r\n    'は', 'を', 'に', 'へ', 'で', 'と', 'が', 'の'\r\n];\r\n// 「もし」文で使う助詞\r\nexport const tararebaJosiList = [\r\n    'でなければ', 'なければ', 'ならば', 'なら', 'たら', 'れば'\r\n];\r\n// 意味のない助詞(削除する) #936 #939 #974\r\nexport const removeJosiList = [\r\n    'こと', 'である', 'です', 'します', 'でした'\r\n];\r\n/**\r\n * 「もし」文で使う「たら」「れば」などの一覧をプログラムで扱いやすいようマップに変換したもの\r\n */\r\nexport const tararebaMap = {};\r\ntararebaJosiList.forEach(josi => {\r\n    josiList.push(josi);\r\n    tararebaMap[josi] = true;\r\n});\r\n/**\r\n * 意味のない助詞(削除する)をマップに変換したもの\r\n */\r\nexport const removeJosiMap = {};\r\nremoveJosiList.forEach(josi => {\r\n    josiList.push(josi);\r\n    removeJosiMap[josi] = true;\r\n});\r\n// 文字数の長い順に並び替え\r\njosiList.sort((a, b) => b.length - a.length);\r\n// 正規表現で助詞をマッチできるようにする\r\nexport const josiRE = new RegExp('^[\\\\t ]*(' + josiList.join('|') + ')');\r\n","/** 予約語 */\r\nconst reserved = {\r\n    '回': '回',\r\n    '回繰返': '回',\r\n    '間': '間',\r\n    '間繰返': '間',\r\n    '繰返': '繰返',\r\n    '増繰返': '増繰返',\r\n    '減繰返': '減繰返',\r\n    '後判定': '後判定',\r\n    '反復': '反復',\r\n    '抜': '抜ける',\r\n    '続': '続ける',\r\n    '戻': '戻る',\r\n    '先': '先に',\r\n    '次': '次に',\r\n    '代入': '代入',\r\n    '実行速度優先': '実行速度優先',\r\n    'パフォーマンスモニタ適用': 'パフォーマンスモニタ適用',\r\n    '定': '定める',\r\n    '逐次実行': '逐次実行',\r\n    '条件分岐': '条件分岐',\r\n    '増': '増',\r\n    '減': '減',\r\n    '変数': '変数',\r\n    '定数': '定数',\r\n    'エラー監視': 'エラー監視',\r\n    'エラー': 'エラー',\r\n    'それ': 'word',\r\n    'そう': 'word',\r\n    '関数': 'def_func',\r\n    'インデント構文': 'インデント構文',\r\n    '非同期モード': '非同期モード',\r\n    'DNCLモード': 'DNCLモード',\r\n    'モード設定': 'モード設定',\r\n    '取込': '取込'\r\n};\r\nexport default reserved;\r\n","import { NakoRuntimeError } from './nako_errors.mjs';\r\nexport default {\r\n    'meta': {\r\n        type: 'const',\r\n        value: {\r\n            pluginName: 'plugin_system',\r\n            pluginVersion: '3.4.5',\r\n            nakoRuntime: ['wnako', 'cnako', 'phpnako'],\r\n            nakoVersion: '^3.4.5' // 要求なでしこバージョン\r\n        }\r\n    },\r\n    '初期化': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: false,\r\n        fn: function (sys) {\r\n            // 言語バージョンを設定\r\n            sys.isDebug = false;\r\n            sys.__v0['ナデシコバージョン'] = sys.version;\r\n            sys.__v0['ナデシコ言語バージョン'] = sys.coreVersion;\r\n            sys.__namespaceList = [];\r\n            // なでしこの関数や変数を探して返す\r\n            sys.__findVar = function (nameStr, def) {\r\n                if (typeof nameStr === 'function') {\r\n                    return nameStr;\r\n                }\r\n                if (sys.__locals[nameStr]) {\r\n                    return sys.__locals[nameStr];\r\n                }\r\n                // 名前空間が指定されている場合\r\n                if (nameStr.indexOf('__') >= 0) {\r\n                    for (let i = 2; i >= 0; i--) {\r\n                        const varScope = sys.__varslist[i];\r\n                        if (varScope[nameStr]) {\r\n                            return varScope[nameStr];\r\n                        }\r\n                    }\r\n                    return def;\r\n                }\r\n                // 名前空間を参照して関数・変数名を解決する\r\n                const modList = sys.__modList ? sys.__modList : [sys.__modName];\r\n                for (const modName of modList) {\r\n                    const gname = modName + '__' + nameStr;\r\n                    for (let i = 2; i >= 0; i--) {\r\n                        const scope = sys.__varslist[i];\r\n                        if (scope[gname]) {\r\n                            return scope[gname];\r\n                        }\r\n                    }\r\n                }\r\n                return def;\r\n            };\r\n            // 文字列から関数を探す\r\n            sys.__findFunc = function (nameStr, parentFunc) {\r\n                const f = sys.__findVar(nameStr);\r\n                if (typeof f === 'function') {\r\n                    return f;\r\n                }\r\n                throw new Error(`『${parentFunc}』に実行できない関数が指定されました。`);\r\n            };\r\n            // システム関数を実行\r\n            sys.__exec = function (func, params) {\r\n                // システム命令を優先\r\n                const f0 = sys.__v0[func];\r\n                if (f0) {\r\n                    return f0.apply(this, params);\r\n                }\r\n                // グローバル・ローカルを探す\r\n                const f = sys.__findVar(func);\r\n                if (!f) {\r\n                    throw new Error('システム関数でエイリアスの指定ミス:' + func);\r\n                }\r\n                return f.apply(this, params);\r\n            };\r\n            // タイマーに関する処理(タイマーは「!クリア」で全部停止する)\r\n            sys.__timeout = [];\r\n            sys.__interval = [];\r\n            // 日付処理などに使う\r\n            const z2 = sys.__zero2 = (s) => {\r\n                s = '00' + s;\r\n                return s.substring(s.length - 2);\r\n            };\r\n            sys.__zero = (s, keta) => {\r\n                let zeroS = '';\r\n                for (let i = 0; i < keta; i++) {\r\n                    zeroS += '0';\r\n                }\r\n                s = zeroS + s;\r\n                return s.substring(s.length - keta);\r\n            };\r\n            sys.__formatDate = (t) => {\r\n                return t.getFullYear() + '/' + z2(t.getMonth() + 1) + '/' + z2(t.getDate());\r\n            };\r\n            sys.__formatTime = (t) => {\r\n                return z2(t.getHours()) + ':' + z2(t.getSeconds()) + ':' + z2(t.getMinutes());\r\n            };\r\n            sys.__formatDateTime = (t, fmt) => {\r\n                const dateStr = t.getFullYear() + '/' + z2(t.getMonth() + 1) + '/' + z2(t.getDate());\r\n                const timeStr = z2(t.getHours()) + ':' + z2(t.getMinutes()) + ':' + z2(t.getSeconds());\r\n                if (fmt.match(/^\\d+\\/\\d+\\/\\d+\\s+\\d+:\\d+:\\d+$/)) {\r\n                    return dateStr + ' ' + timeStr;\r\n                }\r\n                if (fmt.match(/^\\d+\\/\\d+\\/\\d+$/)) {\r\n                    return dateStr;\r\n                }\r\n                if (fmt.match(/^\\d+:\\d+:\\d+$/)) {\r\n                    return timeStr;\r\n                }\r\n                return dateStr + ' ' + timeStr;\r\n            };\r\n            sys.__str2date = (s) => {\r\n                // trim\r\n                s = ('' + s).replace(/(^\\s+|\\s+$)/, '');\r\n                // is unix time\r\n                if (s.match(/^(\\d+|\\d+\\.\\d+)$/)) {\r\n                    return new Date(parseFloat(s) * 1000);\r\n                }\r\n                // is time ?\r\n                if (s.match(/^\\d+:\\d+(:\\d+)?$/)) {\r\n                    const t = new Date();\r\n                    const a = (s + ':0').split(':');\r\n                    return new Date(t.getFullYear(), t.getMonth(), t.getDate(), parseInt(a[0]), parseInt(a[1]), parseInt(a[2]));\r\n                }\r\n                // replace splitter to '/'\r\n                s = s.replace(/[\\s:-]/g, '/');\r\n                s += '/0/0/0'; // 日付だけのときのために時間分を足す\r\n                const a = s.split('/');\r\n                return new Date(parseInt(a[0]), parseInt(a[1]) - 1, parseInt(a[2]), parseInt(a[3]), parseInt(a[4]), parseInt(a[5]));\r\n            };\r\n            // 『継続表示』のための一時変数(『表示』実行で初期化)\r\n            sys.__printPool = '';\r\n            // undefinedチェック\r\n            sys.chk = (value, constId) => {\r\n                if (typeof value === 'undefined') {\r\n                    const cp = sys.constPools[constId];\r\n                    sys.logger.warn(cp.msg, { file: cp.file, line: cp.line });\r\n                }\r\n                return value;\r\n            };\r\n        }\r\n    },\r\n    '!クリア': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: false,\r\n        fn: function (sys) {\r\n            if (sys.__exec) {\r\n                sys.__exec('全タイマー停止', [sys]);\r\n            }\r\n            if (sys.__genMode === '非同期モード') {\r\n                sys.__stopAsync(sys);\r\n            }\r\n            sys.__v0['表示ログ'] = '';\r\n        }\r\n    },\r\n    // @システム定数\r\n    'ナデシコバージョン': { type: 'const', value: '?' },\r\n    'ナデシコ言語バージョン': { type: 'const', value: '?' },\r\n    'ナデシコエンジン': { type: 'const', value: 'nadesi.com/v3' },\r\n    'ナデシコ種類': { type: 'const', value: '?' },\r\n    'はい': { type: 'const', value: 1 },\r\n    'いいえ': { type: 'const', value: 0 },\r\n    '真': { type: 'const', value: 1 },\r\n    '偽': { type: 'const', value: 0 },\r\n    '永遠': { type: 'const', value: 1 },\r\n    'オン': { type: 'const', value: 1 },\r\n    'オフ': { type: 'const', value: 0 },\r\n    '改行': { type: 'const', value: '\\n' },\r\n    'タブ': { type: 'const', value: '\\t' },\r\n    'カッコ': { type: 'const', value: '「' },\r\n    'カッコ閉': { type: 'const', value: '」' },\r\n    '波カッコ': { type: 'const', value: '{' },\r\n    '波カッコ閉': { type: 'const', value: '}' },\r\n    'OK': { type: 'const', value: true },\r\n    'NG': { type: 'const', value: false },\r\n    'キャンセル': { type: 'const', value: 0 },\r\n    'TRUE': { type: 'const', value: true },\r\n    'FALSE': { type: 'const', value: false },\r\n    'PI': { type: 'const', value: Math.PI },\r\n    '空': { type: 'const', value: '' },\r\n    'NULL': { type: 'const', value: null },\r\n    'undefined': { type: 'const', value: undefined },\r\n    '未定義': { type: 'const', value: undefined },\r\n    'エラーメッセージ': { type: 'const', value: '' },\r\n    '対象': { type: 'const', value: '' },\r\n    '対象キー': { type: 'const', value: '' },\r\n    '回数': { type: 'const', value: '' },\r\n    'CR': { type: 'const', value: '\\r' },\r\n    'LF': { type: 'const', value: '\\n' },\r\n    '非数': { type: 'const', value: NaN },\r\n    '無限大': { type: 'const', value: Infinity },\r\n    '空配列': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            return [];\r\n        }\r\n    },\r\n    '空辞書': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            return {};\r\n        }\r\n    },\r\n    '空ハッシュ': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            return {};\r\n        }\r\n    },\r\n    '空オブジェクト': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: false,\r\n        fn: function (sys) {\r\n            return sys.__exec('空ハッシュ', [sys]);\r\n        }\r\n    },\r\n    // @標準出力\r\n    '表示': {\r\n        type: 'func',\r\n        josi: [['を', 'と']],\r\n        pure: true,\r\n        fn: function (s, sys) {\r\n            // 継続表示の一時プールを出力\r\n            s = sys.__printPool + s;\r\n            sys.__printPool = '';\r\n            //\r\n            sys.__varslist[0]['表示ログ'] += (s + '\\n');\r\n            sys.logger.send('stdout', s + '');\r\n        },\r\n        return_none: true\r\n    },\r\n    '継続表示': {\r\n        type: 'func',\r\n        josi: [['を', 'と']],\r\n        pure: true,\r\n        fn: function (s, sys) {\r\n            sys.__printPool += s;\r\n        },\r\n        return_none: true\r\n    },\r\n    '連続表示': {\r\n        type: 'func',\r\n        josi: [['と', 'を']],\r\n        isVariableJosi: true,\r\n        pure: true,\r\n        fn: function (...a) {\r\n            const sys = a.pop();\r\n            const v = a.join('');\r\n            sys.__exec('表示', [v, sys]);\r\n        },\r\n        return_none: true\r\n    },\r\n    '連続無改行表示': {\r\n        type: 'func',\r\n        josi: [['と', 'を']],\r\n        isVariableJosi: true,\r\n        pure: true,\r\n        fn: function (...a) {\r\n            const sys = a.pop();\r\n            const v = a.join('');\r\n            sys.__exec('継続表示', [v, sys]);\r\n        },\r\n        return_none: true\r\n    },\r\n    '表示ログ': { type: 'const', value: '' },\r\n    '表示ログクリア': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            sys.__varslist[0]['表示ログ'] = '';\r\n        },\r\n        return_none: true\r\n    },\r\n    '言': {\r\n        type: 'func',\r\n        josi: [['を', 'と']],\r\n        pure: true,\r\n        fn: function (s, sys) {\r\n            sys.logger.send('stdout', s + '');\r\n        },\r\n        return_none: true\r\n    },\r\n    'コンソール表示': {\r\n        type: 'func',\r\n        josi: [['を', 'と']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            console.log(s);\r\n        },\r\n        return_none: true\r\n    },\r\n    // @四則演算\r\n    '足': {\r\n        type: 'func',\r\n        josi: [['に', 'と'], ['を']],\r\n        isVariableJosi: false,\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return a + b;\r\n        }\r\n    },\r\n    '引': {\r\n        type: 'func',\r\n        josi: [['から'], ['を']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return a - b;\r\n        }\r\n    },\r\n    '掛': {\r\n        type: 'func',\r\n        josi: [['に', 'と'], ['を']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            // 数値の掛け算\r\n            if (typeof a === 'number') {\r\n                return a * b;\r\n            }\r\n            // 文字列の掛け算(文字列の繰り返し)\r\n            if (typeof a === 'string') {\r\n                let s = '';\r\n                for (let i = 0; i < parseInt(b); i++) {\r\n                    s += a;\r\n                }\r\n                return s;\r\n            }\r\n            // 配列の繰り返し\r\n            if (a instanceof Array) {\r\n                const aa = [];\r\n                for (let i = 0; i < parseInt(b); i++) {\r\n                    aa.push(...a);\r\n                }\r\n                return aa;\r\n            }\r\n            return a * b;\r\n        }\r\n    },\r\n    '倍': {\r\n        type: 'func',\r\n        josi: [['の', 'を'], ['']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return a * b;\r\n        }\r\n    },\r\n    '割': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return a / b;\r\n        }\r\n    },\r\n    '割余': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return a % b;\r\n        }\r\n    },\r\n    '偶数': {\r\n        type: 'func',\r\n        josi: [['が']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return (parseInt(a) % 2 === 0);\r\n        }\r\n    },\r\n    '奇数': {\r\n        type: 'func',\r\n        josi: [['が']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return (parseInt(a) % 2 === 1);\r\n        }\r\n    },\r\n    '二乗': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return a * a;\r\n        }\r\n    },\r\n    'べき乗': {\r\n        type: 'func',\r\n        josi: [['の'], ['の']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return Math.pow(a, b);\r\n        }\r\n    },\r\n    '以上': {\r\n        type: 'func',\r\n        josi: [['が'], ['']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return a >= b;\r\n        }\r\n    },\r\n    '以下': {\r\n        type: 'func',\r\n        josi: [['が'], ['']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return a <= b;\r\n        }\r\n    },\r\n    '未満': {\r\n        type: 'func',\r\n        josi: [['が'], ['']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return a < b;\r\n        }\r\n    },\r\n    '超': {\r\n        type: 'func',\r\n        josi: [['が'], ['']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return a > b;\r\n        }\r\n    },\r\n    '等': {\r\n        type: 'func',\r\n        josi: [['が'], ['と']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return a === b;\r\n        }\r\n    },\r\n    '等無': {\r\n        type: 'func',\r\n        josi: [['が'], ['と']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return a !== b;\r\n        }\r\n    },\r\n    '一致': {\r\n        type: 'func',\r\n        josi: [['が'], ['と']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            // オブジェクトの場合、JSONに変換して比較\r\n            if (typeof (a) === 'object') {\r\n                const jsonA = JSON.stringify(a);\r\n                const jsonB = JSON.stringify(b);\r\n                return jsonA === jsonB;\r\n            }\r\n            return a === b;\r\n        }\r\n    },\r\n    '不一致': {\r\n        type: 'func',\r\n        josi: [['が'], ['と']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            // オブジェクトの場合、JSONに変換して比較\r\n            if (typeof (a) === 'object') {\r\n                const jsonA = JSON.stringify(a);\r\n                const jsonB = JSON.stringify(b);\r\n                return jsonA !== jsonB;\r\n            }\r\n            return a !== b;\r\n        }\r\n    },\r\n    '範囲内': {\r\n        type: 'func',\r\n        josi: [['が'], ['から'], ['の', 'までの']],\r\n        pure: true,\r\n        fn: function (v, a, b) {\r\n            return (a <= v) && (v <= b);\r\n        }\r\n    },\r\n    '連続加算': {\r\n        type: 'func',\r\n        josi: [['を'], ['に', 'と']],\r\n        isVariableJosi: true,\r\n        pure: true,\r\n        fn: function (b, ...a) {\r\n            a.pop(); // 必ず末尾に sys があるので、末尾のシステム変数を除外\r\n            a.push(b);\r\n            return a.reduce((p, c) => p + c);\r\n        }\r\n    },\r\n    // @敬語\r\n    'ください': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            if (!sys.__reisetu) {\r\n                sys.__reisetu = 0;\r\n            }\r\n            sys.__reisetu++;\r\n        },\r\n        return_none: true\r\n    },\r\n    'お願': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            if (!sys.__reisetu) {\r\n                sys.__reisetu = 0;\r\n            }\r\n            sys.__reisetu++;\r\n        },\r\n        return_none: true\r\n    },\r\n    'です': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            if (!sys.__reisetu) {\r\n                sys.__reisetu = 0;\r\n            }\r\n            sys.__reisetu++;\r\n        },\r\n        return_none: true\r\n    },\r\n    '拝啓': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            sys.__reisetu = 0;\r\n        },\r\n        return_none: true\r\n    },\r\n    '敬具': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            sys.__reisetu += 100; // bonus point\r\n        },\r\n        return_none: true\r\n    },\r\n    '礼節レベル取得': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            if (!sys.__reisetu) {\r\n                sys.__reisetu = 0;\r\n            }\r\n            return sys.__reisetu;\r\n        }\r\n    },\r\n    // @特殊命令\r\n    'JS実行': {\r\n        type: 'func',\r\n        josi: [['を', 'で']],\r\n        pure: true,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        fn: function (src, sys) {\r\n            // [メモ] ↑のsys は eval の中でも有効なので消さない!!\r\n            // https://github.com/kujirahand/nadesiko3/issues/1237\r\n            return eval(src); // eslint-disable-line\r\n        }\r\n    },\r\n    'JSオブジェクト取得': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: false,\r\n        fn: function (name, sys) {\r\n            return sys.__findVar(name, null);\r\n        }\r\n    },\r\n    'JS関数実行': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        fn: function (name, args) {\r\n            // nameが文字列ならevalして関数を得る\r\n            // eslint-disable-next-line no-eval\r\n            if (typeof name === 'string') {\r\n                name = eval(name);\r\n            }\r\n            if (typeof name !== 'function') {\r\n                throw new Error('JS関数取得で実行できません。');\r\n            }\r\n            // argsがArrayでなければArrayに変換する\r\n            if (!(args instanceof Array)) {\r\n                args = [args];\r\n            }\r\n            // 実行\r\n            // eslint-disable-next-line prefer-spread\r\n            return name.apply(null, args);\r\n        }\r\n    },\r\n    'ASYNC': {\r\n        type: 'func',\r\n        josi: [],\r\n        asyncFn: true,\r\n        fn: async function () {\r\n            // empty\r\n        },\r\n        return_none: true\r\n    },\r\n    'AWAIT実行': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        asyncFn: true,\r\n        fn: async function (f, args, sys) {\r\n            // nameが文字列ならevalして関数を得る\r\n            if (typeof f === 'string') {\r\n                f = sys.__findFunc(f, 'AWAIT実行');\r\n            }\r\n            if (!(f instanceof Function)) {\r\n                throw new Error('『AWAIT実行』の第一引数はなでしこ関数名かFunction型で指定してください。');\r\n            }\r\n            // 実行\r\n            return await f(...args);\r\n        }\r\n    },\r\n    'JSメソッド実行': {\r\n        type: 'func',\r\n        josi: [['の'], ['を'], ['で']],\r\n        fn: function (obj, m, args) {\r\n            // objが文字列ならevalして関数を得る\r\n            // eslint-disable-next-line no-eval\r\n            if (typeof obj === 'string') {\r\n                obj = eval(obj);\r\n            }\r\n            if (typeof obj !== 'object') {\r\n                throw new Error('JSオブジェクトを取得できませんでした。');\r\n            }\r\n            // method を求める\r\n            if (typeof m !== 'function') {\r\n                m = obj[m];\r\n            }\r\n            // argsがArrayでなければArrayに変換する\r\n            if (!(args instanceof Array)) {\r\n                args = [args];\r\n            }\r\n            // 実行\r\n            return m.apply(obj, args);\r\n        }\r\n    },\r\n    'ナデシコ': {\r\n        type: 'func',\r\n        josi: [['を', 'で']],\r\n        pure: false,\r\n        fn: function (code, sys) {\r\n            if (sys.__genMode === '非同期モード') {\r\n                throw new Error('非同期モードでは「ナデシコ」は利用できません。');\r\n            }\r\n            sys.__varslist[0]['表示ログ'] = '';\r\n            sys.__self.runEx(code, sys.__modName, { resetEnv: false, resetLog: true });\r\n            const out = sys.__varslist[0]['表示ログ'] + '';\r\n            if (out) {\r\n                sys.logger.trace(out);\r\n            }\r\n            return out;\r\n        }\r\n    },\r\n    'ナデシコ続': {\r\n        type: 'func',\r\n        josi: [['を', 'で']],\r\n        fn: function (code, sys) {\r\n            if (sys.__genMode === '非同期モード') {\r\n                throw new Error('非同期モードでは「ナデシコ続」は利用できません。');\r\n            }\r\n            sys.__self.runEx(code, sys.__modName, { resetEnv: false, resetAll: false });\r\n            const out = sys.__varslist[0]['表示ログ'] + '';\r\n            if (out) {\r\n                sys.logger.trace(out);\r\n            }\r\n            return out;\r\n        }\r\n    },\r\n    '実行': {\r\n        type: 'func',\r\n        josi: [['を', 'に', 'で']],\r\n        pure: false,\r\n        fn: function (f, sys) {\r\n            // #938 の規則に従って処理\r\n            // 引数が関数なら実行\r\n            if (typeof f === 'function') {\r\n                return f(sys);\r\n            }\r\n            // 文字列なら関数に変換できるか判定して実行\r\n            if (typeof f === 'string') {\r\n                const tf = sys.__findFunc(f, '実行');\r\n                if (typeof tf === 'function') {\r\n                    return tf(sys);\r\n                }\r\n            }\r\n            // それ以外ならそのまま値を返す\r\n            return f;\r\n        }\r\n    },\r\n    '実行時間計測': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: false,\r\n        fn: function (f, sys) {\r\n            if (typeof f === 'string') {\r\n                f = sys.__findFunc(f, '実行時間計測');\r\n            }\r\n            //\r\n            if (performance && performance.now) {\r\n                const t1 = performance.now();\r\n                f(sys);\r\n                const t2 = performance.now();\r\n                return (t2 - t1);\r\n            }\r\n            else {\r\n                const t1 = Date.now();\r\n                f(sys);\r\n                const t2 = Date.now();\r\n                return (t2 - t1);\r\n            }\r\n        }\r\n    },\r\n    '終': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            // デバッグモードでなければ例外を投げることでプログラムを終了させる\r\n            sys.__v0.forceClose = true;\r\n            if (!sys.__v0.useDebug) {\r\n                throw new Error('__終わる__');\r\n            }\r\n        }\r\n    },\r\n    // @型変換\r\n    '変数型確認': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return (typeof v);\r\n        }\r\n    },\r\n    'TYPEOF': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return (typeof v);\r\n        }\r\n    },\r\n    '文字列変換': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return String(v);\r\n        }\r\n    },\r\n    'TOSTR': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return String(v);\r\n        }\r\n    },\r\n    '整数変換': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return parseInt(v);\r\n        }\r\n    },\r\n    'TOINT': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return parseInt(v);\r\n        }\r\n    },\r\n    '実数変換': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return parseFloat(v);\r\n        }\r\n    },\r\n    'TOFLOAT': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return parseFloat(v);\r\n        }\r\n    },\r\n    'INT': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return parseInt(v);\r\n        }\r\n    },\r\n    'FLOAT': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return parseFloat(v);\r\n        }\r\n    },\r\n    'NAN判定': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return isNaN(v);\r\n        }\r\n    },\r\n    '非数判定': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            // https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\r\n            return Number.isNaN(v);\r\n        }\r\n    },\r\n    'HEX': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return parseInt(a).toString(16);\r\n        }\r\n    },\r\n    '進数変換': {\r\n        type: 'func',\r\n        josi: [['を', 'の'], ['']],\r\n        pure: true,\r\n        fn: function (v, n) {\r\n            return parseInt(v).toString(n);\r\n        }\r\n    },\r\n    '二進': {\r\n        type: 'func',\r\n        josi: [['を', 'の', 'から']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return parseInt(v).toString(2);\r\n        }\r\n    },\r\n    '二進表示': {\r\n        type: 'func',\r\n        josi: [['を', 'の', 'から']],\r\n        pure: true,\r\n        fn: function (v, sys) {\r\n            const s = parseInt(v).toString(2);\r\n            sys.__exec('表示', [s, sys]);\r\n        }\r\n    },\r\n    'RGB': {\r\n        type: 'func',\r\n        josi: [['と'], ['の'], ['で']],\r\n        pure: true,\r\n        fn: function (r, g, b) {\r\n            const z2 = (v) => {\r\n                const v2 = '00' + (parseInt('' + v).toString(16));\r\n                return v2.substring(v2.length - 2, v2.length);\r\n            };\r\n            return '#' + z2(r) + z2(g) + z2(b);\r\n        }\r\n    },\r\n    // @論理演算\r\n    '論理OR': {\r\n        type: 'func',\r\n        josi: [['と'], ['の']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return (a || b);\r\n        }\r\n    },\r\n    '論理AND': {\r\n        type: 'func',\r\n        josi: [['と'], ['の']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return (a && b);\r\n        }\r\n    },\r\n    '論理NOT': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return (!v) ? 1 : 0;\r\n        }\r\n    },\r\n    // @ビット演算\r\n    'OR': {\r\n        type: 'func',\r\n        josi: [['と'], ['の']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return (a | b);\r\n        }\r\n    },\r\n    'AND': {\r\n        type: 'func',\r\n        josi: [['と'], ['の']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return (a & b);\r\n        }\r\n    },\r\n    'XOR': {\r\n        type: 'func',\r\n        josi: [['と'], ['の']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return (a ^ b);\r\n        }\r\n    },\r\n    'NOT': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return (~v);\r\n        }\r\n    },\r\n    'SHIFT_L': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return (a << b);\r\n        }\r\n    },\r\n    'SHIFT_R': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return (a >> b);\r\n        }\r\n    },\r\n    'SHIFT_UR': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return (a >>> b);\r\n        }\r\n    },\r\n    // @文字列処理\r\n    '文字数': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            if (!Array.from) {\r\n                return String(v).length;\r\n            }\r\n            return Array.from(v).length;\r\n        }\r\n    },\r\n    '何文字目': {\r\n        type: 'func',\r\n        josi: [['で', 'の'], ['が']],\r\n        pure: true,\r\n        fn: function (s, a) {\r\n            return String(s).indexOf(a) + 1;\r\n        }\r\n    },\r\n    'CHR': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            if (!String.fromCodePoint) {\r\n                return String.fromCharCode(v);\r\n            }\r\n            return String.fromCodePoint(v);\r\n        }\r\n    },\r\n    'ASC': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            if (!String.prototype.codePointAt) {\r\n                return String(v).charCodeAt(0);\r\n            }\r\n            return String(v).codePointAt(0);\r\n        }\r\n    },\r\n    '文字挿入': {\r\n        type: 'func',\r\n        josi: [['で', 'の'], ['に', 'へ'], ['を']],\r\n        pure: true,\r\n        fn: function (s, i, a) {\r\n            if (i <= 0) {\r\n                i = 1;\r\n            }\r\n            const ss = String(s);\r\n            const mae = ss.substring(0, i - 1);\r\n            const usi = ss.substring(i - 1);\r\n            return mae + a + usi;\r\n        }\r\n    },\r\n    '文字検索': {\r\n        type: 'func',\r\n        josi: [['で', 'の'], ['から'], ['を']],\r\n        pure: true,\r\n        fn: function (s, a, b) {\r\n            let str = String(s);\r\n            str = str.substring(a);\r\n            const res = str.indexOf(b);\r\n            if (res === -1) {\r\n                return 0;\r\n            }\r\n            return res + 1 + a;\r\n        }\r\n    },\r\n    '追加': {\r\n        type: 'func',\r\n        josi: [['で', 'に', 'へ'], ['を']],\r\n        pure: true,\r\n        fn: function (s, a) {\r\n            if (s instanceof Array) {\r\n                s.push(a);\r\n                return s;\r\n            }\r\n            return String(s) + String(a);\r\n        }\r\n    },\r\n    '一行追加': {\r\n        type: 'func',\r\n        josi: [['で', 'に', 'へ'], ['を']],\r\n        pure: true,\r\n        fn: function (s, a) {\r\n            if (s instanceof Array) {\r\n                s.push(a);\r\n                return s;\r\n            }\r\n            return String(s) + String(a) + '\\n';\r\n        }\r\n    },\r\n    '文字列分解': {\r\n        type: 'func',\r\n        josi: [['を', 'の', 'で']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            if (!Array.from) {\r\n                return String(v).split('');\r\n            }\r\n            return Array.from(v);\r\n        }\r\n    },\r\n    'リフレイン': {\r\n        type: 'func',\r\n        josi: [['を', 'の'], ['で']],\r\n        pure: true,\r\n        fn: function (v, cnt) {\r\n            let s = '';\r\n            for (let i = 0; i < cnt; i++) {\r\n                s += String(v);\r\n            }\r\n            return s;\r\n        }\r\n    },\r\n    '出現回数': {\r\n        type: 'func',\r\n        josi: [['で'], ['の']],\r\n        pure: true,\r\n        fn: function (s, a) {\r\n            s = '' + s;\r\n            a = '' + a;\r\n            return s.split(a).length - 1;\r\n        }\r\n    },\r\n    'MID': {\r\n        type: 'func',\r\n        josi: [['で', 'の'], ['から'], ['を']],\r\n        pure: true,\r\n        fn: function (s, a, cnt) {\r\n            cnt = cnt || 1;\r\n            return (String(s).substring(a - 1, a + cnt - 1));\r\n        }\r\n    },\r\n    '文字抜出': {\r\n        type: 'func',\r\n        josi: [['で', 'の'], ['から'], ['を', '']],\r\n        pure: true,\r\n        fn: function (s, a, cnt) {\r\n            cnt = cnt || 1;\r\n            return (String(s).substring(a - 1, a + cnt - 1));\r\n        }\r\n    },\r\n    'LEFT': {\r\n        type: 'func',\r\n        josi: [['の', 'で'], ['だけ']],\r\n        pure: true,\r\n        fn: function (s, cnt) {\r\n            return (String(s).substring(0, cnt));\r\n        }\r\n    },\r\n    '文字左部分': {\r\n        type: 'func',\r\n        josi: [['の', 'で'], ['だけ', '']],\r\n        pure: true,\r\n        fn: function (s, cnt) {\r\n            return (String(s).substring(0, cnt));\r\n        }\r\n    },\r\n    'RIGHT': {\r\n        type: 'func',\r\n        josi: [['の', 'で'], ['だけ']],\r\n        pure: true,\r\n        fn: function (s, cnt) {\r\n            s = '' + s;\r\n            return (s.substring(s.length - cnt, s.length));\r\n        }\r\n    },\r\n    '文字右部分': {\r\n        type: 'func',\r\n        josi: [['の', 'で'], ['だけ', '']],\r\n        pure: true,\r\n        fn: function (s, cnt) {\r\n            s = '' + s;\r\n            return (s.substring(s.length - cnt, s.length));\r\n        }\r\n    },\r\n    '区切': {\r\n        type: 'func',\r\n        josi: [['の', 'を'], ['で']],\r\n        pure: true,\r\n        fn: function (s, a) {\r\n            return ('' + s).split('' + a);\r\n        }\r\n    },\r\n    '文字列分割': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (s, a) {\r\n            s = '' + s;\r\n            a = '' + a;\r\n            const i = s.indexOf(a);\r\n            if (i < 0) {\r\n                return [s];\r\n            }\r\n            return [s.substring(0, i), s.substring(i + a.length)];\r\n        }\r\n    },\r\n    '切取': {\r\n        type: 'func',\r\n        josi: [['から', 'の'], ['まで', 'を']],\r\n        pure: true,\r\n        fn: function (s, a, sys) {\r\n            s = String(s);\r\n            const i = s.indexOf(a);\r\n            if (i < 0) {\r\n                sys.__v0['対象'] = '';\r\n                return s;\r\n            }\r\n            sys.__v0['対象'] = s.substring(i + a.length);\r\n            return s.substring(0, i);\r\n        }\r\n    },\r\n    '文字削除': {\r\n        type: 'func',\r\n        josi: [['の'], ['から'], ['だけ', 'を', '']],\r\n        pure: true,\r\n        fn: function (s, a, b) {\r\n            s = '' + s;\r\n            const mae = s.substring(0, a - 1);\r\n            const usi = s.substring((a - 1 + b));\r\n            return mae + usi;\r\n        }\r\n    },\r\n    // @置換・トリム\r\n    '置換': {\r\n        type: 'func',\r\n        josi: [['の', 'で'], ['を', 'から'], ['に', 'へ']],\r\n        pure: true,\r\n        fn: function (s, a, b) {\r\n            return String(s).split(a).join(b);\r\n        }\r\n    },\r\n    '単置換': {\r\n        type: 'func',\r\n        josi: [['の', 'で'], ['を'], ['に', 'へ']],\r\n        pure: true,\r\n        fn: function (s, a, b) {\r\n            // replaceは最初の一度だけ置換する\r\n            return String(s).replace(a, b);\r\n        }\r\n    },\r\n    'トリム': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            s = String(s).replace(/^\\s+/, '').replace(/\\s+$/, '');\r\n            return s;\r\n        }\r\n    },\r\n    '空白除去': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            s = String(s).replace(/^\\s+/, '').replace(/\\s+$/, '');\r\n            return s;\r\n        }\r\n    },\r\n    // @文字変換\r\n    '大文字変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            return String(s).toUpperCase();\r\n        }\r\n    },\r\n    '小文字変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            return String(s).toLowerCase();\r\n        }\r\n    },\r\n    '平仮名変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            const kanaToHira = (str) => {\r\n                return String(str).replace(/[\\u30a1-\\u30f6]/g, function (m) {\r\n                    const chr = m.charCodeAt(0) - 0x60;\r\n                    return String.fromCharCode(chr);\r\n                });\r\n            };\r\n            return kanaToHira('' + s);\r\n        }\r\n    },\r\n    'カタカナ変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            const hiraToKana = (str) => {\r\n                return String(str).replace(/[\\u3041-\\u3096]/g, function (m) {\r\n                    const chr = m.charCodeAt(0) + 0x60;\r\n                    return String.fromCharCode(chr);\r\n                });\r\n            };\r\n            return hiraToKana('' + s);\r\n        }\r\n    },\r\n    '英数全角変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            return String(s).replace(/[A-Za-z0-9]/g, function (v) {\r\n                return String.fromCharCode(v.charCodeAt(0) + 0xFEE0);\r\n            });\r\n        }\r\n    },\r\n    '英数半角変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            return String(s).replace(/[Ａ-Ｚａ-ｚ０-９]/g, function (v) {\r\n                return String.fromCharCode(v.charCodeAt(0) - 0xFEE0);\r\n            });\r\n        }\r\n    },\r\n    '英数記号全角変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            return String(s).replace(/[\\x20-\\x7F]/g, function (v) {\r\n                return String.fromCharCode(v.charCodeAt(0) + 0xFEE0);\r\n            });\r\n        }\r\n    },\r\n    '英数記号半角変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            return String(s).replace(/[\\uFF00-\\uFF5F]/g, function (v) {\r\n                return String.fromCharCode(v.charCodeAt(0) - 0xFEE0);\r\n            });\r\n        }\r\n    },\r\n    'カタカナ全角変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (s, sys) {\r\n            // 半角カタカナ\r\n            const zen1 = sys.__v0['全角カナ一覧'];\r\n            const han1 = sys.__v0['半角カナ一覧'];\r\n            const zen2 = sys.__v0['全角カナ濁音一覧'];\r\n            const han2 = sys.__v0['半角カナ濁音一覧'];\r\n            let str = '';\r\n            let i = 0;\r\n            while (i < s.length) {\r\n                // 濁点の変換\r\n                const c2 = s.substring(i, i + 2);\r\n                const n2 = han2.indexOf(c2);\r\n                if (n2 >= 0) {\r\n                    str += zen2.charAt(n2 / 2);\r\n                    i += 2;\r\n                    continue;\r\n                }\r\n                // 濁点以外の変換\r\n                const c = s.charAt(i);\r\n                const n = han1.indexOf(c);\r\n                if (n >= 0) {\r\n                    str += zen1.charAt(n);\r\n                    i++;\r\n                    continue;\r\n                }\r\n                str += c;\r\n                i++;\r\n            }\r\n            return str;\r\n        }\r\n    },\r\n    'カタカナ半角変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (s, sys) {\r\n            // 半角カタカナ\r\n            const zen1 = sys.__v0['全角カナ一覧'];\r\n            const han1 = sys.__v0['半角カナ一覧'];\r\n            const zen2 = sys.__v0['全角カナ濁音一覧'];\r\n            const han2 = sys.__v0['半角カナ濁音一覧'];\r\n            return s.split('').map((c) => {\r\n                const i = zen1.indexOf(c);\r\n                if (i >= 0) {\r\n                    return han1.charAt(i);\r\n                }\r\n                const j = zen2.indexOf(c);\r\n                if (j >= 0) {\r\n                    return han2.substring(j * 2, j * 2 + 2);\r\n                }\r\n                return c;\r\n            }).join('');\r\n        }\r\n    },\r\n    '全角変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: false,\r\n        fn: function (s, sys) {\r\n            let result = s;\r\n            result = sys.__exec('カタカナ全角変換', [result, sys]);\r\n            result = sys.__exec('英数記号全角変換', [result, sys]);\r\n            return result;\r\n        }\r\n    },\r\n    '半角変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: false,\r\n        fn: function (s, sys) {\r\n            let result = s;\r\n            result = sys.__exec('カタカナ半角変換', [result, sys]);\r\n            result = sys.__exec('英数記号半角変換', [result, sys]);\r\n            return result;\r\n        }\r\n    },\r\n    '全角カナ一覧': { type: 'const', value: 'アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンァィゥェォャュョッ、。ー「」' },\r\n    '全角カナ濁音一覧': { type: 'const', value: 'ガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポ' },\r\n    '半角カナ一覧': { type: 'const', value: 'ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝｧｨｩｪｫｬｭｮｯ､｡ｰ｢｣ﾞﾟ' },\r\n    '半角カナ濁音一覧': { type: 'const', value: 'ｶﾞｷﾞｸﾞｹﾞｺﾞｻﾞｼﾞｽﾞｾﾞｿﾞﾀﾞﾁﾞﾂﾞﾃﾞﾄﾞﾊﾞﾋﾞﾌﾞﾍﾞﾎﾞﾊﾟﾋﾟﾌﾟﾍﾟﾎﾟ' },\r\n    // @JSON\r\n    'JSONエンコード': {\r\n        type: 'func',\r\n        josi: [['を', 'の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return JSON.stringify(v);\r\n        }\r\n    },\r\n    'JSONエンコード整形': {\r\n        type: 'func',\r\n        josi: [['を', 'の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return JSON.stringify(v, null, 2);\r\n        }\r\n    },\r\n    'JSONデコード': {\r\n        type: 'func',\r\n        josi: [['を', 'の', 'から']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            return JSON.parse(s);\r\n        }\r\n    },\r\n    // @正規表現\r\n    '正規表現マッチ': {\r\n        type: 'func',\r\n        josi: [['を', 'が'], ['で', 'に']],\r\n        pure: true,\r\n        fn: function (a, b, sys) {\r\n            let re;\r\n            const f = ('' + b).match(/^\\/(.+)\\/([a-zA-Z]*)$/);\r\n            // パターンがない場合\r\n            if (f === null) {\r\n                re = new RegExp(b, 'g');\r\n            }\r\n            else {\r\n                re = new RegExp(f[1], f[2]);\r\n            }\r\n            const sa = sys.__varslist[0]['抽出文字列'] = [];\r\n            const m = String(a).match(re);\r\n            let result = m;\r\n            if (re.global) {\r\n                // no groups\r\n            }\r\n            else if (m) {\r\n                // has group?\r\n                if (m.length > 0) {\r\n                    result = m[0];\r\n                    for (let i = 1; i < m.length; i++) {\r\n                        sa[i - 1] = m[i];\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    },\r\n    '抽出文字列': { type: 'const', value: [] },\r\n    '正規表現置換': {\r\n        type: 'func',\r\n        josi: [['の'], ['を', 'から'], ['で', 'に', 'へ']],\r\n        pure: true,\r\n        fn: function (s, a, b) {\r\n            let re;\r\n            const f = a.match(/^\\/(.+)\\/([a-zA-Z]*)/);\r\n            if (f === null) {\r\n                re = new RegExp(a, 'g');\r\n            }\r\n            else {\r\n                re = new RegExp(f[1], f[2]);\r\n            }\r\n            return String(s).replace(re, b);\r\n        }\r\n    },\r\n    '正規表現区切': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (s, a) {\r\n            let re;\r\n            const f = a.match(/^\\/(.+)\\/([a-zA-Z]*)/);\r\n            if (f === null) {\r\n                re = new RegExp(a, 'g');\r\n            }\r\n            else {\r\n                re = new RegExp(f[1], f[2]);\r\n            }\r\n            return String(s).split(re);\r\n        }\r\n    },\r\n    // @指定形式\r\n    '通貨形式': {\r\n        type: 'func',\r\n        josi: [['を', 'の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return String(v).replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,');\r\n        }\r\n    },\r\n    'ゼロ埋': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (v, a) {\r\n            v = String(v);\r\n            let z = '0';\r\n            for (let i = 0; i < a; i++) {\r\n                z += '0';\r\n            }\r\n            a = parseInt(a);\r\n            if (a < v.length) {\r\n                a = v.length;\r\n            }\r\n            const s = z + String(v);\r\n            return s.substring(s.length - a, s.length);\r\n        }\r\n    },\r\n    '空白埋': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (v, a) {\r\n            v = String(v);\r\n            let z = ' ';\r\n            for (let i = 0; i < a; i++) {\r\n                z += ' ';\r\n            }\r\n            a = parseInt(a);\r\n            if (a < v.length) {\r\n                a = v.length;\r\n            }\r\n            const s = z + String(v);\r\n            return s.substring(s.length - a, s.length);\r\n        }\r\n    },\r\n    // @文字種類\r\n    'かなか判定': {\r\n        type: 'func',\r\n        josi: [['を', 'の', 'が']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            const c = String(s).charCodeAt(0);\r\n            return (c >= 0x3041 && c <= 0x309F);\r\n        }\r\n    },\r\n    'カタカナ判定': {\r\n        type: 'func',\r\n        josi: [['を', 'の', 'が']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            const c = String(s).charCodeAt(0);\r\n            return (c >= 0x30A1 && c <= 0x30FA);\r\n        }\r\n    },\r\n    '数字判定': {\r\n        type: 'func',\r\n        josi: [['を', 'が']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            const c = String(s).charAt(0);\r\n            return ((c >= '0' && c <= '9') || (c >= '０' && c <= '９'));\r\n        }\r\n    },\r\n    '数列判定': {\r\n        type: 'func',\r\n        josi: [['を', 'が']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            const checkerRE = /^[+\\-＋－]?([0-9０-９]*)(([.．][0-9０-９]+)?|([.．][0-9０-９]+[eEｅＥ][+\\-＋－]?[0-9０-９]+)?)$/;\r\n            return String(s).match(checkerRE) !== null;\r\n        }\r\n    },\r\n    // @配列操作\r\n    '配列結合': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (a, s) {\r\n            // 配列ならOK\r\n            if (a instanceof Array) {\r\n                return a.join('' + s);\r\n            }\r\n            const a2 = String(a).split('\\n'); // 配列でなければ無理矢理改行で区切ってみる\r\n            return a2.join('' + s);\r\n        }\r\n    },\r\n    '配列検索': {\r\n        type: 'func',\r\n        josi: [['の', 'から'], ['を']],\r\n        pure: true,\r\n        fn: function (a, s) {\r\n            if (a instanceof Array) {\r\n                return a.indexOf(s);\r\n            } // 配列ならOK\r\n            return -1;\r\n        }\r\n    },\r\n    '配列要素数': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            if (a instanceof Array) {\r\n                return a.length;\r\n            } // 配列ならOK\r\n            if (a instanceof Object) {\r\n                return Object.keys(a).length;\r\n            }\r\n            return 1;\r\n        }\r\n    },\r\n    '要素数': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: false,\r\n        fn: function (a, sys) {\r\n            return sys.__exec('配列要素数', [a]);\r\n        }\r\n    },\r\n    '配列挿入': {\r\n        type: 'func',\r\n        josi: [['の'], ['に', 'へ'], ['を']],\r\n        pure: true,\r\n        fn: function (a, i, s) {\r\n            if (a instanceof Array) {\r\n                return a.splice(i, 0, s);\r\n            } // 配列ならOK\r\n            throw new Error('『配列挿入』で配列以外の要素への挿入。');\r\n        }\r\n    },\r\n    '配列一括挿入': {\r\n        type: 'func',\r\n        josi: [['の'], ['に', 'へ'], ['を']],\r\n        pure: true,\r\n        fn: function (a, i, b) {\r\n            if (a instanceof Array && b instanceof Array) { // 配列ならOK\r\n                for (let j = 0; j < b.length; j++) {\r\n                    a.splice(i + j, 0, b[j]);\r\n                }\r\n                return a;\r\n            }\r\n            throw new Error('『配列一括挿入』で配列以外の要素への挿入。');\r\n        }\r\n    },\r\n    '配列ソート': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            if (a instanceof Array) {\r\n                return a.sort();\r\n            } // 配列ならOK\r\n            throw new Error('『配列ソート』で配列以外が指定されました。');\r\n        }\r\n    },\r\n    '配列数値ソート': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            // 配列ならOK\r\n            if (a instanceof Array) {\r\n                return a.sort((a, b) => {\r\n                    return parseFloat(a) - parseFloat(b);\r\n                });\r\n            }\r\n            throw new Error('『配列数値ソート』で配列以外が指定されました。');\r\n        }\r\n    },\r\n    '配列カスタムソート': {\r\n        type: 'func',\r\n        josi: [['で'], ['の', 'を']],\r\n        pure: false,\r\n        fn: function (f, a, sys) {\r\n            let ufunc = f;\r\n            if (typeof f === 'string') {\r\n                ufunc = sys.__findFunc(f, '配列カスタムソート');\r\n            }\r\n            if (a instanceof Array) {\r\n                return a.sort(ufunc);\r\n            }\r\n            throw new Error('『配列カスタムソート』で配列以外が指定されました。');\r\n        }\r\n    },\r\n    '配列逆順': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            if (a instanceof Array) {\r\n                return a.reverse();\r\n            } // 配列ならOK\r\n            throw new Error('『配列ソート』で配列以外が指定されました。');\r\n        }\r\n    },\r\n    '配列シャッフル': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            if (a instanceof Array) { // 配列ならOK\r\n                for (let i = a.length - 1; i > 0; i--) {\r\n                    const r = Math.floor(Math.random() * (i + 1));\r\n                    const tmp = a[i];\r\n                    a[i] = a[r];\r\n                    a[r] = tmp;\r\n                }\r\n                return a;\r\n            }\r\n            throw new Error('『配列シャッフル』で配列以外が指定されました。');\r\n        }\r\n    },\r\n    '配列削除': {\r\n        type: 'func',\r\n        josi: [['の', 'から'], ['を']],\r\n        pure: false,\r\n        fn: function (a, i, sys) {\r\n            return sys.__exec('配列切取', [a, i, sys]);\r\n        }\r\n    },\r\n    '配列切取': {\r\n        type: 'func',\r\n        josi: [['の', 'から'], ['を']],\r\n        pure: true,\r\n        fn: function (a, i) {\r\n            // 配列変数のとき\r\n            if (a instanceof Array) {\r\n                const b = a.splice(i, 1);\r\n                if (b instanceof Array) {\r\n                    return b[0];\r\n                } // 切り取った戻り値は必ずArrayになるので。\r\n                return null;\r\n            }\r\n            // 辞書型変数のとき\r\n            if (a instanceof Object && typeof (i) === 'string') { // 辞書型変数も許容\r\n                if (a[i]) {\r\n                    const old = a[i];\r\n                    delete a[i];\r\n                    return old;\r\n                }\r\n                return undefined;\r\n            }\r\n            throw new Error('『配列切取』で配列以外を指定。');\r\n        }\r\n    },\r\n    '配列取出': {\r\n        type: 'func',\r\n        josi: [['の'], ['から'], ['を']],\r\n        pure: true,\r\n        fn: function (a, i, cnt) {\r\n            if (a instanceof Array) {\r\n                return a.splice(i, cnt);\r\n            }\r\n            throw new Error('『配列取出』で配列以外を指定。');\r\n        }\r\n    },\r\n    '配列ポップ': {\r\n        type: 'func',\r\n        josi: [['の', 'から']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            if (a instanceof Array) {\r\n                return a.pop();\r\n            }\r\n            throw new Error('『配列ポップ』で配列以外の処理。');\r\n        }\r\n    },\r\n    '配列プッシュ': {\r\n        type: 'func',\r\n        josi: [['に', 'へ'], ['を']],\r\n        pure: true,\r\n        fn: function (a, b, sys) {\r\n            return sys.__exec('配列追加', [a, b, sys]);\r\n        }\r\n    },\r\n    '配列追加': {\r\n        type: 'func',\r\n        josi: [['に', 'へ'], ['を']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            if (a instanceof Array) { // 配列ならOK\r\n                a.push(b);\r\n                return a;\r\n            }\r\n            throw new Error('『配列追加』で配列以外の処理。');\r\n        }\r\n    },\r\n    '配列複製': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return JSON.parse(JSON.stringify(a));\r\n        }\r\n    },\r\n    '配列足': {\r\n        type: 'func',\r\n        josi: [['に', 'へ', 'と'], ['を']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            if (a instanceof Array) {\r\n                return a.concat(b);\r\n            }\r\n            return JSON.parse(JSON.stringify(a));\r\n        }\r\n    },\r\n    '配列最大値': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return a.reduce((x, y) => Math.max(x, y));\r\n        }\r\n    },\r\n    '配列最小値': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return a.reduce((x, y) => Math.min(x, y));\r\n        }\r\n    },\r\n    '配列合計': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            if (a instanceof Array) {\r\n                let v = 0;\r\n                a.forEach((n) => {\r\n                    const nn = parseFloat(n);\r\n                    if (isNaN(nn)) {\r\n                        return;\r\n                    }\r\n                    v += nn;\r\n                });\r\n                return v;\r\n            }\r\n            throw new Error('『配列合計』で配列変数以外の値が指定されました。');\r\n        }\r\n    },\r\n    '配列入替': {\r\n        type: 'func',\r\n        josi: [['の'], ['と'], ['を']],\r\n        pure: true,\r\n        fn: function (a, i, j) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『配列入替』の第1引数には配列を指定してください。');\r\n            }\r\n            const tmp = a[i];\r\n            a[i] = a[j];\r\n            a[j] = tmp;\r\n            return a;\r\n        }\r\n    },\r\n    '配列連番作成': {\r\n        type: 'func',\r\n        josi: [['から'], ['までの', 'まで', 'の']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            const result = [];\r\n            for (let i = a; i <= b; i++) {\r\n                result.push(i);\r\n            }\r\n            return result;\r\n        }\r\n    },\r\n    '配列要素作成': {\r\n        type: 'func',\r\n        josi: [['を'], ['だけ']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            const result = [];\r\n            for (let i = 0; i < b; i++) {\r\n                result.push(a);\r\n            }\r\n            return result;\r\n        }\r\n    },\r\n    '配列関数適用': {\r\n        type: 'func',\r\n        josi: [['を'], ['へ', 'に']],\r\n        pure: true,\r\n        fn: function (f, a, sys) {\r\n            let ufunc = f;\r\n            if (typeof f === 'string') {\r\n                ufunc = sys.__findFunc(f, '配列関数適用');\r\n            }\r\n            const result = [];\r\n            for (const e of a) {\r\n                result.push(ufunc(e));\r\n            }\r\n            return result;\r\n        }\r\n    },\r\n    '配列マップ': {\r\n        type: 'func',\r\n        josi: [['を'], ['へ', 'に']],\r\n        pure: true,\r\n        fn: function (f, a, sys) {\r\n            return sys.__exec('配列関数適用', [f, a, sys]);\r\n        }\r\n    },\r\n    '配列フィルタ': {\r\n        type: 'func',\r\n        josi: [['で', 'の'], ['を', 'について']],\r\n        pure: true,\r\n        fn: function (f, a, sys) {\r\n            let ufunc = f;\r\n            if (typeof f === 'string') {\r\n                ufunc = sys.__findFunc(f, '配列フィルタ');\r\n            }\r\n            const result = [];\r\n            for (const e of a) {\r\n                if (ufunc(e)) {\r\n                    result.push(e);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    },\r\n    // @二次元配列処理\r\n    '表ソート': {\r\n        type: 'func',\r\n        josi: [['の'], ['を']],\r\n        pure: true,\r\n        fn: function (a, no) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表ソート』には配列を指定する必要があります。');\r\n            }\r\n            a.sort((n, m) => {\r\n                const ns = n[no];\r\n                const ms = m[no];\r\n                if (ns === ms) {\r\n                    return 0;\r\n                }\r\n                else if (ns < ms) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            });\r\n            return a;\r\n        }\r\n    },\r\n    '表数値ソート': {\r\n        type: 'func',\r\n        josi: [['の'], ['を']],\r\n        pure: true,\r\n        fn: function (a, no) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表数値ソート』には配列を指定する必要があります。');\r\n            }\r\n            a.sort((n, m) => {\r\n                const ns = n[no];\r\n                const ms = m[no];\r\n                return ns - ms;\r\n            });\r\n            return a;\r\n        }\r\n    },\r\n    '表ピックアップ': {\r\n        type: 'func',\r\n        josi: [['の'], ['から'], ['を', 'で']],\r\n        pure: true,\r\n        fn: function (a, no, s) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表ピックアップ』には配列を指定する必要があります。');\r\n            }\r\n            return a.filter((row) => String(row[no]).indexOf(s) >= 0);\r\n        }\r\n    },\r\n    '表完全一致ピックアップ': {\r\n        type: 'func',\r\n        josi: [['の'], ['から'], ['を', 'で']],\r\n        pure: true,\r\n        fn: function (a, no, s) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表完全ピックアップ』には配列を指定する必要があります。');\r\n            }\r\n            return a.filter((row) => row[no] === s);\r\n        }\r\n    },\r\n    '表検索': {\r\n        type: 'func',\r\n        josi: [['の'], ['で', 'に'], ['から'], ['を']],\r\n        pure: true,\r\n        fn: function (a, col, row, s) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表検索』には配列を指定する必要があります。');\r\n            }\r\n            for (let i = row; i < a.length; i++) {\r\n                if (a[i][col] === s) {\r\n                    return i;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n    },\r\n    '表列数': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表列数』には配列を指定する必要があります。');\r\n            }\r\n            let cols = 1;\r\n            for (let i = 0; i < a.length; i++) {\r\n                if (a[i].length > cols) {\r\n                    cols = a[i].length;\r\n                }\r\n            }\r\n            return cols;\r\n        }\r\n    },\r\n    '表行数': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表行数』には配列を指定する必要があります。');\r\n            }\r\n            return a.length;\r\n        }\r\n    },\r\n    '表行列交換': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: false,\r\n        fn: function (a, sys) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表行列交換』には配列を指定する必要があります。');\r\n            }\r\n            const cols = sys.__exec('表列数', [a]);\r\n            const rows = a.length;\r\n            const res = [];\r\n            for (let r = 0; r < cols; r++) {\r\n                const row = [];\r\n                res.push(row);\r\n                for (let c = 0; c < rows; c++) {\r\n                    row[c] = (a[c][r] !== undefined) ? a[c][r] : '';\r\n                }\r\n            }\r\n            return res;\r\n        }\r\n    },\r\n    '表右回転': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: false,\r\n        fn: function (a, sys) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表右回転』には配列を指定する必要があります。');\r\n            }\r\n            const cols = sys.__exec('表列数', [a]);\r\n            const rows = a.length;\r\n            const res = [];\r\n            for (let r = 0; r < cols; r++) {\r\n                const row = [];\r\n                res.push(row);\r\n                for (let c = 0; c < rows; c++) {\r\n                    row[c] = a[rows - c - 1][r];\r\n                }\r\n            }\r\n            return res;\r\n        }\r\n    },\r\n    '表重複削除': {\r\n        type: 'func',\r\n        josi: [['の'], ['を', 'で']],\r\n        pure: true,\r\n        fn: function (a, i) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表重複削除』には配列を指定する必要があります。');\r\n            }\r\n            const res = [];\r\n            const keys = {};\r\n            for (let n = 0; n < a.length; n++) {\r\n                const k = a[n][i];\r\n                if (undefined === keys[k]) {\r\n                    keys[k] = true;\r\n                    res.push(a[n]);\r\n                }\r\n            }\r\n            return res;\r\n        }\r\n    },\r\n    '表列取得': {\r\n        type: 'func',\r\n        josi: [['の'], ['を']],\r\n        pure: true,\r\n        fn: function (a, i) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表列取得』には配列を指定する必要があります。');\r\n            }\r\n            const res = a.map(row => row[i]);\r\n            return res;\r\n        }\r\n    },\r\n    '表列挿入': {\r\n        type: 'func',\r\n        josi: [['の'], ['に', 'へ'], ['を']],\r\n        pure: true,\r\n        fn: function (a, i, s) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表列挿入』には配列を指定する必要があります。');\r\n            }\r\n            const res = [];\r\n            a.forEach((row, idx) => {\r\n                let nr = [];\r\n                if (i > 0) {\r\n                    nr = nr.concat(row.slice(0, i));\r\n                }\r\n                nr.push(s[idx]);\r\n                nr = nr.concat(row.slice(i));\r\n                res.push(nr);\r\n            });\r\n            return res;\r\n        }\r\n    },\r\n    '表列削除': {\r\n        type: 'func',\r\n        josi: [['の'], ['を']],\r\n        pure: true,\r\n        fn: function (a, i) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表列削除』には配列を指定する必要があります。');\r\n            }\r\n            const res = [];\r\n            a.forEach((row) => {\r\n                const nr = row.slice(0);\r\n                nr.splice(i, 1);\r\n                res.push(nr);\r\n            });\r\n            return res;\r\n        }\r\n    },\r\n    '表列合計': {\r\n        type: 'func',\r\n        josi: [['の'], ['を', 'で']],\r\n        pure: true,\r\n        fn: function (a, i) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表列合計』には配列を指定する必要があります。');\r\n            }\r\n            let sum = 0;\r\n            a.forEach((row) => { sum += row[i]; });\r\n            return sum;\r\n        }\r\n    },\r\n    '表曖昧検索': {\r\n        type: 'func',\r\n        josi: [['の'], ['から'], ['で'], ['を']],\r\n        pure: true,\r\n        fn: function (a, row, col, s) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表曖昧検索』には配列を指定する必要があります。');\r\n            }\r\n            const re = new RegExp(s);\r\n            for (let i = row; i < a.length; i++) {\r\n                const line = a[i];\r\n                if (re.test(line[col])) {\r\n                    return i;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n    },\r\n    '表正規表現ピックアップ': {\r\n        type: 'func',\r\n        josi: [['の', 'で'], ['から'], ['を']],\r\n        pure: true,\r\n        fn: function (a, col, s) {\r\n            if (!(a instanceof Array)) {\r\n                throw new Error('『表正規表現ピックアップ』には配列を指定する必要があります。');\r\n            }\r\n            const re = new RegExp(s);\r\n            const res = [];\r\n            for (let i = 0; i < a.length; i++) {\r\n                const row = a[i];\r\n                if (re.test(row[col])) {\r\n                    res.push(row.slice(0));\r\n                }\r\n            }\r\n            return res;\r\n        }\r\n    },\r\n    // @辞書型変数の操作\r\n    '辞書キー列挙': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            const keys = [];\r\n            if (a instanceof Object) { // オブジェクトのキーを返す\r\n                for (const key in a) {\r\n                    keys.push(key);\r\n                }\r\n                return keys;\r\n            }\r\n            if (a instanceof Array) { // 配列なら数字を返す\r\n                for (let i = 0; i < a.length; i++) {\r\n                    keys.push(i);\r\n                }\r\n                return keys;\r\n            }\r\n            throw new Error('『辞書キー列挙』でハッシュ以外が与えられました。');\r\n        }\r\n    },\r\n    '辞書キー削除': {\r\n        type: 'func',\r\n        josi: [['から', 'の'], ['を']],\r\n        pure: true,\r\n        fn: function (a, key) {\r\n            if (a instanceof Object) { // オブジェクトのキーを返す\r\n                if (key in a) {\r\n                    delete a[key];\r\n                }\r\n                return a;\r\n            }\r\n            throw new Error('『辞書キー削除』でハッシュ以外が与えられました。');\r\n        }\r\n    },\r\n    '辞書キー存在': {\r\n        type: 'func',\r\n        josi: [['の', 'に'], ['が']],\r\n        pure: true,\r\n        fn: function (a, key) {\r\n            return key in a;\r\n        }\r\n    },\r\n    // @ハッシュ\r\n    'ハッシュキー列挙': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: false,\r\n        fn: function (a, sys) {\r\n            return sys.__exec('辞書キー列挙', [a, sys]);\r\n        }\r\n    },\r\n    'ハッシュ内容列挙': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            const body = [];\r\n            if (a instanceof Object) { // オブジェクトのキーを返す\r\n                for (const key in a) {\r\n                    body.push(a[key]);\r\n                }\r\n                return body;\r\n            }\r\n            throw new Error('『ハッシュ内容列挙』でハッシュ以外が与えられました。');\r\n        }\r\n    },\r\n    'ハッシュキー削除': {\r\n        type: 'func',\r\n        josi: [['から', 'の'], ['を']],\r\n        pure: false,\r\n        fn: function (a, key, sys) {\r\n            return sys.__exec('辞書キー削除', [a, key, sys]);\r\n        }\r\n    },\r\n    'ハッシュキー存在': {\r\n        type: 'func',\r\n        josi: [['の', 'に'], ['が']],\r\n        pure: true,\r\n        fn: function (a, key) {\r\n            return key in a;\r\n        }\r\n    },\r\n    // @タイマー\r\n    '秒待': {\r\n        type: 'func',\r\n        josi: [['']],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: function (n, sys) {\r\n            return new Promise((resolve, reject) => {\r\n                try {\r\n                    // タイマーを仕掛ける\r\n                    const timerId = setTimeout(() => {\r\n                        // タイマー使用中リストに追加したIDを削除\r\n                        const i = sys.__timeout.indexOf(timerId);\r\n                        if (i >= 0) {\r\n                            sys.__timeout.splice(i, 1);\r\n                        }\r\n                        // Promiseを終了\r\n                        resolve();\r\n                    }, parseFloat(n) * 1000);\r\n                    // タイマー使用中リストに追加\r\n                    sys.__timeout.push(timerId);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            });\r\n        },\r\n        return_none: true\r\n    },\r\n    '秒待機': {\r\n        type: 'func',\r\n        josi: [['']],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: async function (n, sys) {\r\n            const p = sys.__exec('秒待', [n, sys]);\r\n            return await p;\r\n        },\r\n        return_none: true\r\n    },\r\n    '秒逐次待機': {\r\n        type: 'func',\r\n        josi: [['']],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: async function (n, sys) {\r\n            const p = sys.__exec('秒待', [n, sys]);\r\n            return await p;\r\n        },\r\n        return_none: true\r\n    },\r\n    '秒後': {\r\n        type: 'func',\r\n        josi: [['を'], ['']],\r\n        pure: false,\r\n        fn: function (f, n, sys) {\r\n            // 文字列で指定された関数をオブジェクトに変換\r\n            if (typeof f === 'string') {\r\n                f = sys.__findFunc(f, '秒後');\r\n            }\r\n            // 1回限りのタイマーをセット\r\n            const timerId = setTimeout(() => {\r\n                // 使用中リストに追加したIDを削除\r\n                const i = sys.__timeout.indexOf(timerId);\r\n                if (i >= 0) {\r\n                    sys.__timeout.splice(i, 1);\r\n                }\r\n                if (sys.__genMode === '非同期モード') {\r\n                    sys.newenv = true;\r\n                }\r\n                try {\r\n                    f(timerId, sys);\r\n                }\r\n                catch (e) {\r\n                    let err = e;\r\n                    if (!(e instanceof NakoRuntimeError)) {\r\n                        err = new NakoRuntimeError(e, sys.__varslist[0].line);\r\n                    }\r\n                    sys.logger.error(err);\r\n                }\r\n            }, parseFloat(n) * 1000);\r\n            sys.__timeout.unshift(timerId);\r\n            sys.__v0['対象'] = timerId;\r\n            return timerId;\r\n        }\r\n    },\r\n    '秒毎': {\r\n        type: 'func',\r\n        josi: [['を'], ['']],\r\n        pure: false,\r\n        fn: function (f, n, sys) {\r\n            // 文字列で指定された関数をオブジェクトに変換\r\n            if (typeof f === 'string') {\r\n                f = sys.__findFunc(f, '秒毎');\r\n            }\r\n            // タイマーをセット\r\n            const timerId = setInterval(() => {\r\n                if (sys.__genMode === '非同期モード') {\r\n                    sys.newenv = true;\r\n                }\r\n                f(timerId, sys);\r\n            }, parseFloat(n) * 1000);\r\n            // タイマーIDを追加\r\n            sys.__interval.unshift(timerId);\r\n            sys.__v0['対象'] = timerId;\r\n            return timerId;\r\n        }\r\n    },\r\n    '秒タイマー開始時': {\r\n        type: 'func',\r\n        josi: [['を'], ['']],\r\n        pure: false,\r\n        fn: function (f, n, sys) {\r\n            return sys.__exec('秒毎', [f, n, sys]);\r\n        }\r\n    },\r\n    'タイマー停止': {\r\n        type: 'func',\r\n        josi: [['の', 'で']],\r\n        pure: true,\r\n        fn: function (timerId, sys) {\r\n            const i = sys.__interval.indexOf(timerId);\r\n            if (i >= 0) {\r\n                sys.__interval.splice(i, 1);\r\n                clearInterval(timerId);\r\n                return true;\r\n            }\r\n            const j = sys.__timeout.indexOf(timerId);\r\n            if (j >= 0) {\r\n                sys.__timeout.splice(j, 1);\r\n                clearTimeout(timerId);\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        return_none: false\r\n    },\r\n    '全タイマー停止': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            // clearInterval\r\n            for (let i = 0; i < sys.__interval.length; i++) {\r\n                const timerId = sys.__interval[i];\r\n                clearInterval(timerId);\r\n            }\r\n            sys.__interval = [];\r\n            // clearTimeout\r\n            for (let i = 0; i < sys.__timeout.length; i++) {\r\n                const timerId = sys.__timeout[i];\r\n                clearTimeout(timerId);\r\n            }\r\n            sys.__timeout = [];\r\n        },\r\n        return_none: true\r\n    },\r\n    // @日時処理(簡易)\r\n    '元号データ': { type: 'const', value: [{ '元号': '令和', '改元日': '2019/05/01' }, { '元号': '平成', '改元日': '1989/01/08' }, { '元号': '昭和', '改元日': '1926/12/25' }, { '元号': '大正', '改元日': '1912/07/30' }, { '元号': '明治', '改元日': '1868/10/23' }] },\r\n    '今': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            const z2 = (n) => {\r\n                n = '00' + n;\r\n                return n.substring(n.length - 2, n.length);\r\n            };\r\n            const t = new Date();\r\n            return z2(t.getHours()) + ':' + z2(t.getMinutes()) + ':' + z2(t.getSeconds());\r\n        }\r\n    },\r\n    'システム時間': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            const now = new Date();\r\n            return Math.floor(now.getTime() / 1000);\r\n        }\r\n    },\r\n    'システム時間ミリ秒': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            const now = new Date();\r\n            return now.getTime();\r\n        }\r\n    },\r\n    '今日': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            return sys.__formatDate(new Date());\r\n        }\r\n    },\r\n    '明日': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            const t = Date.now() + (24 * 60 * 60 * 1000);\r\n            return sys.__formatDate(new Date(t));\r\n        }\r\n    },\r\n    '昨日': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            const t = Date.now() - (24 * 60 * 60 * 1000);\r\n            return sys.__formatDate(new Date(t));\r\n        }\r\n    },\r\n    '今年': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            return (new Date()).getFullYear();\r\n        }\r\n    },\r\n    '来年': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            return (new Date()).getFullYear() + 1;\r\n        }\r\n    },\r\n    '去年': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            return (new Date()).getFullYear() - 1;\r\n        }\r\n    },\r\n    '今月': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            return (new Date()).getMonth() + 1;\r\n        }\r\n    },\r\n    '来月': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            return (new Date()).getMonth() + 2;\r\n        }\r\n    },\r\n    '先月': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            return (new Date()).getMonth();\r\n        }\r\n    },\r\n    '曜日': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (s, sys) {\r\n            const d = sys.__str2date(s);\r\n            return '日月火水木金土'.charAt(d.getDay() % 7);\r\n        }\r\n    },\r\n    '曜日番号取得': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            const a = s.split('/');\r\n            const t = new Date(a[0], a[1] - 1, a[2]);\r\n            return t.getDay();\r\n        }\r\n    },\r\n    'UNIXTIME変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を', 'から']],\r\n        pure: true,\r\n        fn: function (s, sys) {\r\n            const d = sys.__str2date(s);\r\n            return d.getTime() / 1000;\r\n        }\r\n    },\r\n    'UNIX時間変換': {\r\n        type: 'func',\r\n        josi: [['の', 'を', 'から']],\r\n        pure: true,\r\n        fn: function (s, sys) {\r\n            const d = sys.__str2date(s);\r\n            return d.getTime() / 1000;\r\n        }\r\n    },\r\n    '日時変換': {\r\n        type: 'func',\r\n        josi: [['を', 'から']],\r\n        pure: true,\r\n        fn: function (tm, sys) {\r\n            const t = tm * 1000;\r\n            return sys.__formatDateTime(new Date(t), '2022/01/01 00:00:00');\r\n        }\r\n    },\r\n    '日時書式変換': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (tm, fmt, sys) {\r\n            const t = sys.__str2date(tm);\r\n            fmt = fmt.replace(/(YYYY|ccc|WWW|MMM|YY|MM|DD|HH|mm|ss|[MDHmsW])/g, (m) => {\r\n                switch (m) {\r\n                    case 'YYYY': return t.getFullYear();\r\n                    case 'YY': return ('' + t.getFullYear()).substring(2);\r\n                    case 'MM': return sys.__zero2(t.getMonth() + 1);\r\n                    case 'DD': return sys.__zero2(t.getDate());\r\n                    case 'M': return (t.getMonth() + 1);\r\n                    case 'D': return (t.getDate());\r\n                    case 'HH': return sys.__zero2(t.getHours());\r\n                    case 'mm': return sys.__zero2(t.getMinutes());\r\n                    case 'ss': return sys.__zero2(t.getSeconds());\r\n                    case 'ccc': return sys.__zero(t.getMilliseconds(), 3);\r\n                    case 'H': return (t.getHours());\r\n                    case 'm': return (t.getMinutes());\r\n                    case 's': return (t.getSeconds());\r\n                    case 'W': return '日月火水木金土'.charAt(t.getDay() % 7);\r\n                    case 'WWW': return ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][t.getDay() % 7];\r\n                    case 'MMM': return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][t.getMonth()];\r\n                }\r\n                return m;\r\n            });\r\n            return fmt;\r\n        }\r\n    },\r\n    '和暦変換': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (s, sys) {\r\n            const d = sys.__str2date(s);\r\n            const t = d.getTime();\r\n            for (const era of sys.__v0['元号データ']) {\r\n                const gengo = era['元号'];\r\n                const d2 = sys.__str2date(era['改元日']);\r\n                const t2 = d2.getTime();\r\n                if (t2 <= t) {\r\n                    let y = (d.getFullYear() - d2.getFullYear()) + 1;\r\n                    if (y === 1) {\r\n                        y = '元';\r\n                    }\r\n                    return gengo + y + '年' + sys.__zero2(d.getMonth() + 1) + '月' + sys.__zero2(d.getDate()) + '日';\r\n                }\r\n            }\r\n            throw new Error('『和暦変換』は明示以前の日付には対応していません。');\r\n        }\r\n    },\r\n    '年数差': {\r\n        type: 'func',\r\n        josi: [['と', 'から'], ['の', 'までの']],\r\n        pure: true,\r\n        fn: function (a, b, sys) {\r\n            const t1 = sys.__str2date(a);\r\n            const t2 = sys.__str2date(b);\r\n            return (t2.getFullYear() - t1.getFullYear());\r\n        }\r\n    },\r\n    '月数差': {\r\n        type: 'func',\r\n        josi: [['と', 'から'], ['の', 'までの']],\r\n        pure: true,\r\n        fn: function (a, b, sys) {\r\n            const t1 = sys.__str2date(a);\r\n            const t2 = sys.__str2date(b);\r\n            return ((t2.getFullYear() * 12 + t2.getMonth()) -\r\n                (t1.getFullYear() * 12 + t1.getMonth()));\r\n        }\r\n    },\r\n    '日数差': {\r\n        type: 'func',\r\n        josi: [['と', 'から'], ['の', 'までの']],\r\n        pure: true,\r\n        fn: function (a, b, sys) {\r\n            const t1 = Math.ceil(sys.__str2date(a).getTime() / 1000);\r\n            const t2 = Math.ceil(sys.__str2date(b).getTime() / 1000);\r\n            const days = Math.ceil((t2 - t1) / (60 * 60 * 24));\r\n            return days;\r\n        }\r\n    },\r\n    '時間差': {\r\n        type: 'func',\r\n        josi: [['と', 'から'], ['の', 'までの']],\r\n        pure: true,\r\n        fn: function (a, b, sys) {\r\n            const t1 = Math.ceil(sys.__str2date(a).getTime() / 1000);\r\n            const t2 = Math.ceil(sys.__str2date(b).getTime() / 1000);\r\n            const hours = Math.ceil((t2 - t1) / (60 * 60));\r\n            return hours;\r\n        }\r\n    },\r\n    '分差': {\r\n        type: 'func',\r\n        josi: [['と', 'から'], ['の', 'までの']],\r\n        pure: true,\r\n        fn: function (a, b, sys) {\r\n            const t1 = Math.ceil(sys.__str2date(a).getTime() / 1000);\r\n            const t2 = Math.ceil(sys.__str2date(b).getTime() / 1000);\r\n            const min = Math.ceil((t2 - t1) / (60));\r\n            return min;\r\n        }\r\n    },\r\n    '秒差': {\r\n        type: 'func',\r\n        josi: [['と', 'から'], ['の', 'までの']],\r\n        pure: true,\r\n        fn: function (a, b, sys) {\r\n            const t1 = Math.ceil(sys.__str2date(a).getTime() / 1000);\r\n            const t2 = Math.ceil(sys.__str2date(b).getTime() / 1000);\r\n            const sec = Math.ceil((t2 - t1));\r\n            return sec;\r\n        }\r\n    },\r\n    '日時差': {\r\n        type: 'func',\r\n        josi: [['と', 'から'], ['の', 'までの'], ['による']],\r\n        pure: true,\r\n        fn: function (a, b, unit, sys) {\r\n            switch (unit) {\r\n                case '年': return sys.__exec('年数差', [a, b, sys]);\r\n                case '月': return sys.__exec('月数差', [a, b, sys]);\r\n                case '日': return sys.__exec('日数差', [a, b, sys]);\r\n                case '時間': return sys.__exec('時間差', [a, b, sys]);\r\n                case '分': return sys.__exec('分差', [a, b, sys]);\r\n                case '秒': return sys.__exec('秒差', [a, b, sys]);\r\n            }\r\n            throw new Error('『日時差』で不明な単位です。');\r\n        }\r\n    },\r\n    '時間加算': {\r\n        type: 'func',\r\n        josi: [['に'], ['を']],\r\n        pure: true,\r\n        fn: function (s, a, sys) {\r\n            const op = a.charAt(0);\r\n            if (op === '-' || op === '+') {\r\n                a = a.substring(1);\r\n            }\r\n            const d = sys.__str2date(s);\r\n            const aa = (a + ':0:0').split(':');\r\n            let sec = parseInt(aa[0]) * 60 * 60 +\r\n                parseInt(aa[1]) * 60 +\r\n                parseInt(aa[2]);\r\n            if (op === '-') {\r\n                sec *= -1;\r\n            }\r\n            const rd = new Date(d.getTime() + (sec * 1000));\r\n            return sys.__formatDateTime(rd, s);\r\n        }\r\n    },\r\n    '日付加算': {\r\n        type: 'func',\r\n        josi: [['に'], ['を']],\r\n        pure: true,\r\n        fn: function (s, a, sys) {\r\n            let op = 1;\r\n            const opc = a.charAt(0);\r\n            if (opc === '-' || opc === '+') {\r\n                a = a.substring(1);\r\n                if (opc === '-') {\r\n                    op *= -1;\r\n                }\r\n            }\r\n            const d = sys.__str2date(s);\r\n            const aa = (a + '/0/0').split('/');\r\n            const addY = parseInt(aa[0]) * op;\r\n            const addM = parseInt(aa[1]) * op;\r\n            const addD = parseInt(aa[2]) * op;\r\n            d.setFullYear(d.getFullYear() + addY);\r\n            d.setMonth(d.getMonth() + addM);\r\n            d.setDate(d.getDate() + addD);\r\n            return sys.__formatDateTime(d, s);\r\n        }\r\n    },\r\n    '日時加算': {\r\n        type: 'func',\r\n        josi: [['に'], ['を']],\r\n        pure: true,\r\n        fn: function (s, a, sys) {\r\n            const r = ('' + a).match(/([+|-]?)(\\d+)(年|ヶ月|日|週間|時間|分|秒)$/);\r\n            if (!r) {\r\n                throw new Error('『日付加算』は『(+｜-)1(年|ヶ月|日|時間|分|秒)』の書式で指定します。');\r\n            }\r\n            switch (r[3]) {\r\n                case '年': return sys.__exec('日付加算', [s, `${r[1]}${r[2]}/0/0`, sys]);\r\n                case 'ヶ月': return sys.__exec('日付加算', [s, `${r[1]}0/${r[2]}/0`, sys]);\r\n                case '週間': return sys.__exec('日付加算', [s, `${r[1]}0/0/${parseInt(r[2]) * 7}`, sys]);\r\n                case '日': return sys.__exec('日付加算', [s, `${r[1]}0/0/${r[2]}`, sys]);\r\n                case '時間': return sys.__exec('時間加算', [s, `${r[1]}${r[2]}:0:0`, sys]);\r\n                case '分': return sys.__exec('時間加算', [s, `${r[1]}0:${r[2]}:0`, sys]);\r\n                case '秒': return sys.__exec('時間加算', [s, `${r[1]}0:0:${r[2]}`, sys]);\r\n            }\r\n        }\r\n    },\r\n    '時間ミリ秒取得': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            if (performance && performance.now) {\r\n                return performance.now();\r\n            }\r\n            else if (Date.now) {\r\n                return Date.now();\r\n            }\r\n            else {\r\n                const now = new Date();\r\n                return now.getTime();\r\n            }\r\n        }\r\n    },\r\n    // @デバッグ支援\r\n    'エラー発生': {\r\n        type: 'func',\r\n        josi: [['の', 'で']],\r\n        pure: true,\r\n        fn: function (s) {\r\n            throw new Error(s);\r\n        }\r\n    },\r\n    '__DEBUG': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            sys.isDebug = true;\r\n            console.log(sys);\r\n        }\r\n    },\r\n    '__DEBUG強制待機': { type: 'const', value: 0 },\r\n    '__DEBUGブレイクポイント一覧': { type: 'const', value: [] },\r\n    '__DEBUG待機フラグ': { type: 'const', value: 0 },\r\n    '__DEBUG_BP_WAIT': {\r\n        type: 'func',\r\n        josi: [['で']],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: function (curLine, sys) {\r\n            return new Promise((resolve) => {\r\n                const breakpoints = sys.__v0['__DEBUGブレイクポイント一覧'];\r\n                const forceLine = sys.__v0['__DEBUG強制待機'];\r\n                sys.__v0['__DEBUG強制待機'] = 0;\r\n                // ブレイクポイント or __DEBUG強制待機 が指定されたか？\r\n                if (breakpoints.indexOf(curLine) >= 0 || forceLine) {\r\n                    console.log('@STOP!!!! cur=', curLine);\r\n                    const timerId = setInterval(() => {\r\n                        if (sys.__v0['__DEBUG待機フラグ'] === 1) {\r\n                            sys.__v0['__DEBUG待機フラグ'] = 0;\r\n                            clearInterval(timerId);\r\n                            resolve(curLine);\r\n                        }\r\n                    }, 500);\r\n                }\r\n                else {\r\n                    resolve(curLine);\r\n                }\r\n            });\r\n        }\r\n    },\r\n    'グローバル関数一覧取得': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            const vars = sys.__varslist[1];\r\n            const res = [];\r\n            for (const key in vars) {\r\n                if (Object.prototype.hasOwnProperty.call(vars, key)) {\r\n                    res.push(key);\r\n                }\r\n            }\r\n            return res;\r\n        }\r\n    },\r\n    'システム関数一覧取得': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            const vars = sys.__varslist[0];\r\n            const res = [];\r\n            for (const key in vars) {\r\n                if (Object.prototype.hasOwnProperty.call(vars, key)) {\r\n                    res.push(key);\r\n                }\r\n            }\r\n            return res;\r\n        }\r\n    },\r\n    'システム関数存在': {\r\n        type: 'func',\r\n        josi: [['が', 'の']],\r\n        pure: true,\r\n        fn: function (fname, sys) {\r\n            return (typeof sys.__v0[fname] !== 'undefined');\r\n        }\r\n    },\r\n    'プラグイン一覧取得': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            const a = [];\r\n            for (const f in sys.pluginfiles) {\r\n                a.push(f);\r\n            }\r\n            return a;\r\n        }\r\n    },\r\n    'モジュール一覧取得': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            const a = [];\r\n            for (const f in sys.__module) {\r\n                a.push(f);\r\n            }\r\n            return a;\r\n        }\r\n    },\r\n    '助詞一覧取得': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: function () {\r\n            return new Promise((resolve, reject) => {\r\n                import('./nako_josi_list.mjs')\r\n                    .then((mod) => {\r\n                    const obj = Object.assign({}, mod);\r\n                    resolve(obj.josiList);\r\n                })\r\n                    .catch((err) => {\r\n                    reject(err);\r\n                });\r\n            });\r\n        }\r\n    },\r\n    '予約語一覧取得': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: function () {\r\n            // const words = require('./nako_reserved_words.mjs')\r\n            return new Promise((resolve, reject) => {\r\n                import('./nako_reserved_words.mjs')\r\n                    .then((mod) => {\r\n                    const obj = Object.assign({}, mod);\r\n                    const w = [];\r\n                    for (const key in obj.default) {\r\n                        w.push(key);\r\n                    }\r\n                    resolve(w);\r\n                })\r\n                    .catch((err) => {\r\n                    reject(err);\r\n                });\r\n            });\r\n        }\r\n    },\r\n    // @プラグイン管理\r\n    'プラグイン名': { type: 'const', value: 'メイン' },\r\n    'プラグイン名設定': {\r\n        type: 'func',\r\n        josi: [['に', 'へ']],\r\n        pure: true,\r\n        fn: function (s, sys) {\r\n            sys.__v0['プラグイン名'] = s;\r\n        },\r\n        return_none: true\r\n    },\r\n    '名前空間': { type: 'const', value: '' },\r\n    '名前空間設定': {\r\n        type: 'func',\r\n        josi: [['に', 'へ']],\r\n        pure: true,\r\n        fn: function (s, sys) {\r\n            // push namespace\r\n            sys.__namespaceList.push([sys.__v0['名前空間'], sys.__v0['プラグイン名']]);\r\n            sys.__v0['名前空間'] = s;\r\n        },\r\n        return_none: true\r\n    },\r\n    '名前空間ポップ': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            // pop namespace\r\n            const a = sys.__namespaceList.pop();\r\n            if (a) {\r\n                sys.__v0['名前空間'] = a[0];\r\n                sys.__v0['プラグイン名'] = a[1];\r\n            }\r\n        },\r\n        return_none: true\r\n    },\r\n    // @URLエンコードとパラメータ\r\n    'URLエンコード': {\r\n        type: 'func',\r\n        josi: [['を', 'から']],\r\n        pure: true,\r\n        fn: function (text) {\r\n            return encodeURIComponent(text);\r\n        }\r\n    },\r\n    'URLデコード': {\r\n        type: 'func',\r\n        josi: [['を', 'へ', 'に']],\r\n        pure: true,\r\n        fn: function (text) {\r\n            return decodeURIComponent(text);\r\n        }\r\n    },\r\n    'URLパラメータ解析': {\r\n        type: 'func',\r\n        josi: [['を', 'の', 'から']],\r\n        pure: true,\r\n        fn: function (url, sys) {\r\n            const res = {};\r\n            if (typeof url !== 'string') {\r\n                return res;\r\n            }\r\n            const p = url.split('?');\r\n            if (p.length <= 1) {\r\n                return res;\r\n            }\r\n            const params = p[1].split('&');\r\n            for (const line of params) {\r\n                const line2 = line + '=';\r\n                const kv = line2.split('=');\r\n                const k = sys.__exec('URLデコード', [kv[0]]);\r\n                res[k] = sys.__exec('URLデコード', [kv[1]]);\r\n            }\r\n            return res;\r\n        }\r\n    },\r\n    // @BASE64\r\n    'BASE64エンコード': {\r\n        type: 'func',\r\n        josi: [['を', 'から']],\r\n        pure: true,\r\n        fn: function (text) {\r\n            // browser?\r\n            if (typeof (window) !== 'undefined' && window.btoa) {\r\n                const u8a = new TextEncoder().encode(text);\r\n                const utf8str = String.fromCharCode.apply(null, u8a);\r\n                return btoa(utf8str);\r\n            }\r\n            // Node?\r\n            if (typeof (Buffer) !== 'undefined') {\r\n                return Buffer.from(text).toString('base64');\r\n            }\r\n            throw new Error('『BASE64エンコード』は利用できません。');\r\n        }\r\n    },\r\n    'BASE64デコード': {\r\n        type: 'func',\r\n        josi: [['を', 'へ', 'に']],\r\n        pure: true,\r\n        fn: function (text) {\r\n            if (typeof (window) !== 'undefined' && window.atob) {\r\n                const decodedUtf8str = atob(text);\r\n                const dec = Array.prototype.map.call(decodedUtf8str, c => c.charCodeAt());\r\n                const decodedArray = new Uint8Array(dec);\r\n                return new TextDecoder('UTF-8').decode(decodedArray);\r\n            }\r\n            // Node?\r\n            if (typeof (Buffer) !== 'undefined') {\r\n                return Buffer.from(text, 'base64').toString();\r\n            }\r\n            throw new Error('『BASE64デコード』は利用できません。');\r\n        }\r\n    }\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable quote-props */\r\nexport const opPriority = {\r\n    // and or\r\n    'and': 1,\r\n    'or': 1,\r\n    // compare\r\n    'eq': 2,\r\n    'noteq': 2,\r\n    '===': 2,\r\n    '!==': 2,\r\n    'gt': 2,\r\n    'gteq': 2,\r\n    'lt': 2,\r\n    'lteq': 2,\r\n    '&': 3,\r\n    // + - << >> >>>\r\n    '+': 4,\r\n    '-': 4,\r\n    'shift_l': 4,\r\n    'shift_r': 4,\r\n    'shift_r0': 4,\r\n    // * /\r\n    '*': 5,\r\n    '/': 5,\r\n    '÷': 5,\r\n    '÷÷': 5,\r\n    '%': 5,\r\n    // ^\r\n    '^': 6,\r\n    '**': 6\r\n};\r\nexport const RenbunJosi = [\r\n    'いて', 'えて', 'きて', 'けて', 'して', 'って', 'にて', 'みて', 'めて', 'ねて', 'には', 'んで'\r\n];\r\nexport const operatorList = [];\r\nfor (const key in opPriority) {\r\n    operatorList.push(key);\r\n}\r\n","/**\r\n * なでしこ3 の TypeScript のための型定義\r\n */\r\nexport function NewEmptyToken(type = '?', value = '', indent = -1, line = 0, file = 'main.nako3') {\r\n    return {\r\n        type,\r\n        value,\r\n        indent,\r\n        line,\r\n        column: 0,\r\n        file,\r\n        josi: ''\r\n    };\r\n}\r\n","import { NewEmptyToken } from './nako_types.mjs';\r\n/**\r\n * なでしこの構文解析のためのユーティリティクラス\r\n */\r\nexport class NakoParserBase {\r\n    constructor(logger) {\r\n        this.logger = logger;\r\n        this.stackList = []; // 関数定義の際にスタックが混乱しないように整理する\r\n        this.tokens = [];\r\n        this.usedFuncs = new Set();\r\n        /** @type {import('./nako3.mjs').Ast[]} */\r\n        this.stack = [];\r\n        this.index = 0;\r\n        /** トークン出現チェック(accept関数)に利用する\r\n         * @type {import('./nako3.mjs').Ast[]}\r\n         */\r\n        this.y = [];\r\n        /** モジュル名 @type {string} */\r\n        this.modName = 'inline';\r\n        this.namespaceStack = [];\r\n        /**\r\n         * 利用するモジュールの名前一覧\r\n         * @type {Array<string>}\r\n         */\r\n        this.modList = [];\r\n        /** グローバル変数・関数の確認用 */\r\n        this.funclist = {};\r\n        this.funcLevel = 0;\r\n        this.usedAsyncFn = false; // asyncFnの呼び出しがあるかどうか\r\n        /**\r\n         * ローカル変数の確認用\r\n         * @type {Object.<string,Object>}\r\n         */\r\n        this.localvars = { 'それ': { type: 'var', value: '' } };\r\n        /** コード生成器の名前 @type {string} */\r\n        this.genMode = 'sync'; // #637\r\n        /** 配列のインデックスが先頭要素(#1140) @type {int} */\r\n        this.arrayIndexFrom = 0;\r\n        /** 配列のインデックス順序を反対にするか(#1140) @type {boolean} */\r\n        this.flagReverseArrayIndex = false;\r\n        /** 配列を自動的に初期化するか(#1140) @type {boolean} */\r\n        this.flagCheckArrayInit = false;\r\n        /** 最近呼び出した関数(余剰エラーの報告に使う) */\r\n        this.recentlyCalledFunc = [];\r\n        this.init();\r\n    }\r\n    init() {\r\n        this.funclist = {}; // 関数の一覧\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.tokens = []; // 字句解析済みのトークンの一覧を保存\r\n        this.index = 0; // tokens[] のどこまで読んだかを管理する\r\n        this.stack = []; // 計算用のスタック ... 直接は操作せず、pushStack() popStack() を介して使う\r\n        this.y = []; // accept()で解析済みのトークンを配列で得るときに使う\r\n        this.genMode = 'sync'; // #637, #1056\r\n    }\r\n    setFuncList(funclist) {\r\n        this.funclist = funclist;\r\n    }\r\n    /**\r\n     * 特定の助詞を持つ要素をスタックから一つ下ろす、指定がなければ末尾を下ろす\r\n     * @param {string[]} josiList 下ろしたい助詞の配列\r\n     */\r\n    popStack(josiList = undefined) {\r\n        if (!josiList) {\r\n            const t = this.stack.pop();\r\n            if (t) {\r\n                return t;\r\n            }\r\n            return null;\r\n        }\r\n        // josiList にマッチする助詞を探す\r\n        for (let i = this.stack.length - 1; i >= 0; i--) {\r\n            const t = this.stack[i];\r\n            if (josiList.length === 0 || josiList.indexOf(t.josi) >= 0) {\r\n                this.stack.splice(i, 1); // remove stack\r\n                this.logger.trace('POP :' + JSON.stringify(t));\r\n                return t;\r\n            }\r\n        }\r\n        // 該当する助詞が見つからなかった場合\r\n        return null;\r\n    }\r\n    /**\r\n     * saveStack と loadStack は対で使う。\r\n     * 関数定義などでスタックが混乱しないように配慮するためのもの\r\n     */\r\n    saveStack() {\r\n        this.stackList.push(this.stack);\r\n        this.stack = [];\r\n    }\r\n    loadStack() {\r\n        this.stack = this.stackList.pop();\r\n    }\r\n    /** 変数名を探す\r\n     * @param {string} name\r\n     * @returns {any}変数名の情報\r\n     */\r\n    findVar(name) {\r\n        // ローカル変数？\r\n        if (this.localvars[name]) {\r\n            return {\r\n                name,\r\n                scope: 'local',\r\n                info: this.localvars[name]\r\n            };\r\n        }\r\n        // モジュール名を含んでいる?\r\n        if (name.indexOf('__') >= 0) {\r\n            if (this.funclist[name]) {\r\n                return {\r\n                    name,\r\n                    scope: 'global',\r\n                    info: this.funclist[name]\r\n                };\r\n            }\r\n            else {\r\n                return undefined;\r\n            }\r\n        }\r\n        // グローバル変数（自身）？\r\n        const gnameSelf = `${this.modName}__${name}`;\r\n        if (this.funclist[gnameSelf]) {\r\n            return {\r\n                name: gnameSelf,\r\n                scope: 'global',\r\n                info: this.funclist[gnameSelf]\r\n            };\r\n        }\r\n        // グローバル変数（モジュールを検索）？\r\n        for (const mod of this.modList) {\r\n            const gname = `${mod}__${name}`;\r\n            if (this.funclist[gname]) {\r\n                return {\r\n                    name: gname,\r\n                    scope: 'global',\r\n                    info: this.funclist[gname]\r\n                };\r\n            }\r\n        }\r\n        // システム変数 (funclistを普通に検索)\r\n        if (this.funclist[name]) {\r\n            return {\r\n                name,\r\n                scope: 'system',\r\n                info: this.funclist[name]\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * 計算用に要素をスタックに積む\r\n     */\r\n    pushStack(item) {\r\n        this.logger.trace('PUSH:' + JSON.stringify(item));\r\n        this.stack.push(item);\r\n    }\r\n    /**\r\n     * トークンの末尾に達したか\r\n     */\r\n    isEOF() {\r\n        return (this.index >= this.tokens.length);\r\n    }\r\n    getIndex() {\r\n        return this.index;\r\n    }\r\n    /**\r\n     * カーソル位置にある単語の型を確かめる\r\n     */\r\n    check(ttype) {\r\n        return (this.tokens[this.index].type === ttype);\r\n    }\r\n    /**\r\n     * カーソル位置以降にある単語の型を確かめる 2単語以上に対応\r\n     * @param a [単語1の型, 単語2の型, ... ]\r\n     */\r\n    check2(a) {\r\n        for (let i = 0; i < a.length; i++) {\r\n            const idx = i + this.index;\r\n            if (this.tokens.length <= idx) {\r\n                return false;\r\n            }\r\n            if (a[i] === '*') {\r\n                continue;\r\n            } // ワイルドカード(どんなタイプも許容)\r\n            const t = this.tokens[idx];\r\n            if (a[i] instanceof Array) {\r\n                if (a[i].indexOf(t.type) < 0) {\r\n                    return false;\r\n                }\r\n                continue;\r\n            }\r\n            if (t.type !== a[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * カーソル位置の型を確認するが、複数の種類を確かめられる\r\n     */\r\n    checkTypes(a) {\r\n        const type = this.tokens[this.index].type;\r\n        return (a.indexOf(type) >= 0);\r\n    }\r\n    /**\r\n     * check2の高度なやつ、型名の他にコールバック関数を指定できる\r\n     * 型にマッチしなければ false を返し、カーソルを巻き戻す\r\n     */\r\n    accept(types) {\r\n        const y = [];\r\n        const tmpIndex = this.index;\r\n        const rollback = () => {\r\n            this.index = tmpIndex;\r\n            return false;\r\n        };\r\n        for (let i = 0; i < types.length; i++) {\r\n            if (this.isEOF()) {\r\n                return rollback();\r\n            }\r\n            const type = types[i];\r\n            if (type == null) {\r\n                return rollback();\r\n            }\r\n            if (typeof type === 'string') {\r\n                const token = this.get();\r\n                if (token && token.type !== type) {\r\n                    return rollback();\r\n                }\r\n                y[i] = token;\r\n                continue;\r\n            }\r\n            if (typeof type === 'function') {\r\n                const f = type.bind(this);\r\n                const r = f(y);\r\n                if (r === null) {\r\n                    return rollback();\r\n                }\r\n                y[i] = r;\r\n                continue;\r\n            }\r\n            if (type instanceof Array) {\r\n                if (!this.checkTypes(type)) {\r\n                    return rollback();\r\n                }\r\n                y[i] = this.get();\r\n                continue;\r\n            }\r\n            throw new Error('System Error : accept broken : ' + typeof type);\r\n        }\r\n        this.y = y;\r\n        return true;\r\n    }\r\n    /**\r\n     * カーソル語句を取得して、カーソルを後ろに移動する\r\n     */\r\n    get() {\r\n        if (this.isEOF()) {\r\n            return null;\r\n        }\r\n        return this.tokens[this.index++];\r\n    }\r\n    /** カーソル語句を取得してカーソルを進める、取得できなければエラーを出す */\r\n    getCur() {\r\n        if (this.isEOF()) {\r\n            throw new Error('トークンが取得できません。');\r\n        }\r\n        const t = this.tokens[this.index++];\r\n        if (!t) {\r\n            throw new Error('トークンが取得できません。');\r\n        }\r\n        return t;\r\n    }\r\n    unget() {\r\n        if (this.index > 0) {\r\n            this.index--;\r\n        }\r\n    }\r\n    /** 解析中のトークンを返す */\r\n    peek(i = 0) {\r\n        if (this.isEOF()) {\r\n            return null;\r\n        }\r\n        return this.tokens[this.index + i];\r\n    }\r\n    /** 解析中のトークンを返す、無理なら def を返す */\r\n    peekDef(def = null) {\r\n        if (this.isEOF()) {\r\n            if (!def) {\r\n                def = NewEmptyToken();\r\n            }\r\n            return def;\r\n        }\r\n        return this.tokens[this.index];\r\n    }\r\n    /**\r\n     * 現在のカーソル語句のソースコード上の位置を取得する。\r\n     */\r\n    peekSourceMap() {\r\n        const token = this.peek();\r\n        if (token === null) {\r\n            return { startOffset: undefined, endOffset: undefined, file: undefined, line: 0, column: 0 };\r\n        }\r\n        return { startOffset: token.startOffset, endOffset: token.endOffset, file: token.file, line: token.line, column: token.column };\r\n    }\r\n    /**\r\n     * depth: 表示する深さ\r\n     * typeName: 先頭のtypeの表示を上書きする場合に設定する\r\n     * @param {{ depth: number, typeName?: string }} opts\r\n     * @param {boolean} debugMode\r\n     */\r\n    nodeToStr(node, opts, debugMode) {\r\n        const depth = opts.depth - 1;\r\n        const typeName = (name) => (opts.typeName !== undefined) ? opts.typeName : name;\r\n        const debug = debugMode ? (' debug: ' + JSON.stringify(node, null, 2)) : '';\r\n        if (!node) {\r\n            return '(NULL)';\r\n        }\r\n        switch (node.type) {\r\n            case 'not':\r\n                if (depth >= 0) {\r\n                    const subNode = node.value;\r\n                    return `${typeName('')}『${this.nodeToStr(subNode, { depth }, debugMode)}に演算子『not』を適用した式${debug}』`;\r\n                }\r\n                else {\r\n                    return `${typeName('演算子')}『not』`;\r\n                }\r\n            case 'op': {\r\n                const node2 = node;\r\n                let operator = node2.operator || '';\r\n                const table = { eq: '＝', not: '!', gt: '>', lt: '<', and: 'かつ', or: 'または' };\r\n                if (operator in table) {\r\n                    operator = table[operator];\r\n                }\r\n                if (depth >= 0) {\r\n                    const left = this.nodeToStr(node2.left, { depth }, debugMode);\r\n                    const right = this.nodeToStr(node2.right, { depth }, debugMode);\r\n                    if (node2.operator === 'eq') {\r\n                        return `${typeName('')}『${left}と${right}が等しいかどうかの比較${debug}』`;\r\n                    }\r\n                    return `${typeName('')}『${left}と${right}に演算子『${operator}』を適用した式${debug}』`;\r\n                }\r\n                else {\r\n                    return `${typeName('演算子')}『${operator}${debug}』`;\r\n                }\r\n            }\r\n            case 'number':\r\n                return `${typeName('数値')}${node.value}`;\r\n            case 'string':\r\n                return `${typeName('文字列')}『${node.value}${debug}』`;\r\n            case 'word':\r\n                return `${typeName('単語')}『${node.value}${debug}』`;\r\n            case 'func':\r\n                return `${typeName('関数')}『${node.name || node.value}${debug}』`;\r\n            case 'eol':\r\n                return '行の末尾';\r\n            case 'eof':\r\n                return 'ファイルの末尾';\r\n            default: {\r\n                let name = node.name;\r\n                if (name) {\r\n                    name = node.value;\r\n                }\r\n                if (typeof name !== 'string') {\r\n                    name = node.type;\r\n                }\r\n                return `${typeName('')}『${name}${debug}』`;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/**\r\n * なでしこ3で行頭インデントに使える文字とインデントカウント数\r\n */\r\nexport function isIndentChars(ch) {\r\n    const code = ch.charCodeAt(0);\r\n    // 特別なコード\r\n    if (ch === '\\t') {\r\n        return 4;\r\n    }\r\n    if (ch === ' ' || ch === '|') {\r\n        return 1;\r\n    }\r\n    if (ch === '・' || ch === '　') {\r\n        return 2;\r\n    }\r\n    if (ch === '⏋' || ch === '⏌') {\r\n        return 2;\r\n    } // 0x23CB, 0x23CC\r\n    // 罫線から --- https://github.com/kujirahand/unicode-sheets/blob/main/box-drawing.md\r\n    if (code >= 0x2500 && code <= 0x257F) {\r\n        return 2;\r\n    }\r\n    // 記号から --- https://github.com/kujirahand/unicode-sheets/blob/main/misc-technical.md\r\n    if ((code >= 0x23A0 && code <= 0x23AF) ||\r\n        (code >= 0x23B8 && code <= 0x23BF)) {\r\n        return 2;\r\n    }\r\n    return 0;\r\n}\r\n","/**\r\n * なでしこ3字句解析のためのルール\r\n */\r\nimport { josiRE, removeJosiMap } from './nako_josi_list.mjs';\r\nconst kanakanji = /^[\\u3005\\u4E00-\\u9FCF_a-zA-Z0-9ァ-ヶー\\u2460-\\u24FF\\u2776-\\u277F\\u3251-\\u32BF]+/;\r\nconst hira = /^[ぁ-ん]/;\r\nconst allHiragana = /^[ぁ-ん]+$/;\r\nconst wordHasIjoIka = /^.+(以上|以下|超|未満)$/;\r\nconst wordSpecial = /^(かつ|または)/;\r\nconst errorRead = (ch) => {\r\n    return function () { throw new Error('突然の『' + ch + '』があります。'); };\r\n};\r\nexport const unitRE = /^(円|ドル|元|歩|㎡|坪|度|℃|°|個|つ|本|冊|才|歳|匹|枚|皿|セット|羽|人|件|行|列|機|品|m|mm|cm|km|g|kg|t|px|dot|pt|em|b|mb|kb|gb)/;\r\n/** トークンに区切るルールの一覧 */\r\nexport const rules = [\r\n    // 上から順にマッチさせていく\r\n    { name: 'ここまで', pattern: /^;;;/ },\r\n    { name: 'eol', pattern: /^\\n/ },\r\n    { name: 'eol', pattern: /^;/ },\r\n    // eslint-disable-next-line no-control-regex\r\n    { name: 'space', pattern: /^(\\x20|\\x09|・|⎿ |└|｜)+/ },\r\n    { name: 'comma', pattern: /^,/ },\r\n    { name: 'line_comment', pattern: /^#[^\\n]*/ },\r\n    { name: 'line_comment', pattern: /^\\/\\/[^\\n]*/ },\r\n    { name: 'range_comment', pattern: /^\\/\\*/, cbParser: cbRangeComment },\r\n    { name: 'def_test', pattern: /^●テスト:/ },\r\n    { name: 'def_func', pattern: /^●/ },\r\n    // 数値の判定 --- この後nako_lexerにて単位を読む処理が入る(#994)\r\n    { name: 'number', pattern: /^0[xX][0-9a-fA-F]+(_[0-9a-fA-F]+)*/, readJosi: true, cb: parseNumber },\r\n    { name: 'number', pattern: /^0[oO][0-7]+(_[0-7]+)*/, readJosi: true, cb: parseNumber },\r\n    { name: 'number', pattern: /^0[bB][0-1]+(_[0-1]+)*/, readJosi: true, cb: parseNumber },\r\n    // 下の三つは小数点が挟まっている場合、小数点から始まっている場合、小数点がない場合の十進法の数値にマッチします\r\n    { name: 'number', pattern: /^\\d+(_\\d+)*\\.(\\d+(_\\d+)*)?([eE][+|-]?\\d+(_\\d+)*)?/, readJosi: true, cb: parseNumber },\r\n    { name: 'number', pattern: /^\\.\\d+(_\\d+)*([eE][+|-]?\\d+(_\\d+)*)?/, readJosi: true, cb: parseNumber },\r\n    { name: 'number', pattern: /^\\d+(_\\d+)*([eE][+|-]?\\d+(_\\d+)*)?/, readJosi: true, cb: parseNumber },\r\n    { name: 'ここから', pattern: /^(ここから),?/ },\r\n    { name: 'ここまで', pattern: /^(ここまで|💧)/ },\r\n    { name: 'もし', pattern: /^もしも?/ },\r\n    // 「ならば」は助詞として定義している\r\n    { name: '違えば', pattern: /^違(えば)?/ },\r\n    // 「回」「間」「繰返」「反復」「抜」「続」「戻」「代入」「条件分岐」などは NakoLexer._replaceWord で word から変換\r\n    // @see nako_reserved_words.js\r\n    { name: 'shift_r0', pattern: /^>>>/ },\r\n    { name: 'shift_r', pattern: /^>>/ },\r\n    { name: 'shift_l', pattern: /^<</ },\r\n    { name: '===', pattern: /^===/ },\r\n    { name: '!==', pattern: /^!==/ },\r\n    { name: 'gteq', pattern: /^(≧|>=|=>)/ },\r\n    { name: 'lteq', pattern: /^(≦|<=|=<)/ },\r\n    { name: 'noteq', pattern: /^(≠|<>|!=)/ },\r\n    { name: '←', pattern: /^(←|<--)/ },\r\n    { name: 'eq', pattern: /^(==|🟰🟰)/ },\r\n    { name: 'eq', pattern: /^(=|🟰)/ },\r\n    { name: 'line_comment', pattern: /^(!|💡)(インデント構文|ここまでだるい|DNCLモード|DNCL2モード|DNCL2)[^\\n]*/ },\r\n    { name: 'not', pattern: /^(!|💡)/ },\r\n    { name: 'gt', pattern: /^>/ },\r\n    { name: 'lt', pattern: /^</ },\r\n    { name: 'and', pattern: /^(かつ|&&)/ },\r\n    { name: 'or', pattern: /^(または|或いは|あるいは|\\|\\|)/ },\r\n    { name: '@', pattern: /^@/ },\r\n    { name: '+', pattern: /^\\+/ },\r\n    { name: '-', pattern: /^-/ },\r\n    { name: '**', pattern: /^(××|\\*\\*)/ },\r\n    { name: '*', pattern: /^(×|\\*)/ },\r\n    { name: '÷÷', pattern: /^÷÷/ },\r\n    { name: '÷', pattern: /^(÷|\\/)/ },\r\n    { name: '%', pattern: /^%/ },\r\n    { name: '^', pattern: /^\\^/ },\r\n    { name: '&', pattern: /^&/ },\r\n    { name: '[', pattern: /^\\[/ },\r\n    { name: ']', pattern: /^]/, readJosi: true },\r\n    { name: '(', pattern: /^\\(/ },\r\n    { name: ')', pattern: /^\\)/, readJosi: true },\r\n    { name: '|', pattern: /^\\|/ },\r\n    { name: 'string', pattern: /^🌿/, cbParser: src => cbString('🌿', '🌿', src) },\r\n    { name: 'string_ex', pattern: /^🌴/, cbParser: src => cbString('🌴', '🌴', src) },\r\n    { name: 'string_ex', pattern: /^「/, cbParser: src => cbString('「', '」', src) },\r\n    { name: 'string', pattern: /^『/, cbParser: src => cbString('『', '』', src) },\r\n    { name: 'string_ex', pattern: /^“/, cbParser: src => cbString('“', '”', src) },\r\n    { name: 'string_ex', pattern: /^\"/, cbParser: src => cbString('\"', '\"', src) },\r\n    { name: 'string', pattern: /^'/, cbParser: src => cbString('\\'', '\\'', src) },\r\n    { name: '」', pattern: /^」/, cbParser: errorRead('」') },\r\n    { name: '』', pattern: /^』/, cbParser: errorRead('』') },\r\n    { name: 'func', pattern: /^\\{関数\\},?/ },\r\n    { name: '{', pattern: /^\\{/ },\r\n    { name: '}', pattern: /^\\}/, readJosi: true },\r\n    { name: ':', pattern: /^:/ },\r\n    { name: '_eol', pattern: /^_\\s*\\n/ },\r\n    { name: 'dec_lineno', pattern: /^‰/ },\r\n    // 絵文字変数 = (絵文字)英数字*\r\n    { name: 'word', pattern: /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF][_a-zA-Z0-9]*/, readJosi: true },\r\n    { name: 'word', pattern: /^[\\u1F60-\\u1F6F][_a-zA-Z0-9]*/, readJosi: true },\r\n    { name: 'word', pattern: /^《.+?》/, readJosi: true },\r\n    // 単語句\r\n    {\r\n        name: 'word',\r\n        pattern: /^[_a-zA-Z\\u3005\\u4E00-\\u9FCFぁ-んァ-ヶ\\u2460-\\u24FF\\u2776-\\u277F\\u3251-\\u32BF]/,\r\n        cbParser: cbWordParser\r\n    }\r\n];\r\nexport function trimOkurigana(s) {\r\n    // ひらがなから始まらない場合、送り仮名を削除。(例)置換する\r\n    if (!hira.test(s)) {\r\n        return s.replace(/[ぁ-ん]+/g, '');\r\n    }\r\n    // 全てひらがな？ (例) どうぞ\r\n    if (allHiragana.test(s)) {\r\n        return s;\r\n    }\r\n    // 末尾のひらがなのみ (例)お願いします →お願\r\n    return s.replace(/[ぁ-ん]+$/g, '');\r\n}\r\n// Utility for Rule\r\nfunction cbRangeComment(src) {\r\n    let res = '';\r\n    const josi = '';\r\n    let numEOL = 0;\r\n    src = src.substring(2); // skip /*\r\n    const i = src.indexOf('*/');\r\n    if (i < 0) { // not found\r\n        res = src;\r\n        src = '';\r\n    }\r\n    else {\r\n        res = src.substring(0, i);\r\n        src = src.substring(i + 2);\r\n    }\r\n    // 改行を数える\r\n    for (let i = 0; i < res.length; i++) {\r\n        if (res.charAt(i) === '\\n') {\r\n            numEOL++;\r\n        }\r\n    }\r\n    res = res.replace(/(^\\s+|\\s+$)/, ''); // trim\r\n    return { src, res, josi, numEOL };\r\n}\r\n/**\r\n * @param {string} src\r\n */\r\nfunction cbWordParser(src, isTrimOkurigana = true) {\r\n    /*\r\n      kanji    = [\\u3005\\u4E00-\\u9FCF]\r\n      hiragana = [ぁ-ん]\r\n      katakana = [ァ-ヶー]\r\n      emoji    = [\\u1F60-\\u1F6F]\r\n      uni_extra = [\\uD800-\\uDBFF] [\\uDC00-\\uDFFF]\r\n      alphabet = [_a-zA-Z]\r\n      numchars = [0-9]\r\n    */\r\n    let res = '';\r\n    let josi = '';\r\n    while (src !== '') {\r\n        // 1文字以上のとき\r\n        if (res.length > 0) {\r\n            // 「かつ」「または」なら分割する (#1379 core#84)\r\n            const jsw = wordSpecial.exec(src);\r\n            if (jsw) {\r\n                break;\r\n            }\r\n            // 助詞の判定\r\n            const j = josiRE.exec(src);\r\n            if (j) {\r\n                josi = j[0].replace(/^\\s+/, '');\r\n                src = src.substring(j[0].length);\r\n                // 助詞の直後にある「,」を飛ばす #877\r\n                if (src.charAt(0) === ',') {\r\n                    src = src.substr(1);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // カタカナ漢字英数字か？\r\n        const m = kanakanji.exec(src);\r\n        if (m) {\r\n            res += m[0];\r\n            src = src.substring(m[0].length);\r\n            continue;\r\n        }\r\n        // ひらがな？\r\n        const h = hira.test(src);\r\n        if (h) {\r\n            res += src.charAt(0);\r\n            src = src.substring(1);\r\n            continue;\r\n        }\r\n        break; // other chars\r\n    }\r\n    // --- 単語分割における特殊ルール ---\r\n    // 「間」の特殊ルール (#831)\r\n    // 「等しい間」や「一致する間」なら「間」をsrcに戻す。ただし「システム時間」はそのままにする。\r\n    if (/[ぁ-ん]間$/.test(res)) {\r\n        src = res.charAt(res.length - 1) + src;\r\n        res = res.slice(0, -1);\r\n    }\r\n    // 「以上」「以下」「超」「未満」 #918\r\n    const ii = wordHasIjoIka.exec(res);\r\n    if (ii) {\r\n        src = ii[1] + josi + src;\r\n        josi = '';\r\n        res = res.substring(0, res.length - ii[1].length);\r\n    }\r\n    // 助詞「こと」「である」「です」などは「＊＊すること」のように使うので削除 #936 #939 #974\r\n    if (removeJosiMap[josi]) {\r\n        josi = '';\r\n    }\r\n    // 送り仮名の省略ルール\r\n    // 漢字カタカナ英語から始まる語句 --- 送り仮名を省略\r\n    if (isTrimOkurigana) {\r\n        res = trimOkurigana(res);\r\n    }\r\n    // 助詞だけの語句の場合\r\n    if (res === '' && josi !== '') {\r\n        res = josi;\r\n        josi = '';\r\n    }\r\n    return { src, res, josi, numEOL: 0 };\r\n}\r\nfunction cbString(beginTag, closeTag, src) {\r\n    let res = '';\r\n    let josi = '';\r\n    let numEOL = 0;\r\n    src = src.substr(beginTag.length); // skip beginTag\r\n    const i = src.indexOf(closeTag);\r\n    if (i < 0) { // not found\r\n        res = src;\r\n        src = '';\r\n    }\r\n    else {\r\n        res = src.substr(0, i);\r\n        src = src.substr(i + closeTag.length);\r\n        // res の中に beginTag があればエラーにする #953\r\n        if (res.indexOf(beginTag) >= 0) {\r\n            if (beginTag === '『') {\r\n                throw new Error('「『」で始めた文字列の中に「『」を含めることはできません。');\r\n            }\r\n            else {\r\n                throw new Error(`『${beginTag}』で始めた文字列の中に『${beginTag}』を含めることはできません。`);\r\n            }\r\n        }\r\n    }\r\n    // 文字列直後の助詞を取得\r\n    const j = josiRE.exec(src);\r\n    if (j) {\r\n        josi = j[0].replace(/^\\s+/, '');\r\n        src = src.substr(j[0].length);\r\n        // 助詞の後のカンマ #877\r\n        if (src.charAt(0) === ',') {\r\n            src = src.substr(1);\r\n        }\r\n    }\r\n    // 助詞「こと」「である」「です」などは「＊＊すること」のように使うので削除 #936 #939 #974\r\n    if (removeJosiMap[josi]) {\r\n        josi = '';\r\n    }\r\n    // 改行を数える\r\n    for (let i = 0; i < res.length; i++) {\r\n        if (res.charAt(i) === '\\n') {\r\n            numEOL++;\r\n        }\r\n    }\r\n    return { src, res, josi, numEOL };\r\n}\r\nfunction parseNumber(n) {\r\n    return Number(n.replace(/_/g, ''));\r\n}\r\n","// なでしこの字句解析を行う\r\n// 既に全角半角を揃えたコードに対して字句解析を行う\r\nimport { opPriority } from './nako_parser_const.mjs';\r\n// 予約語句\r\n// (memo)「回」「間」「繰返」「反復」「抜」「続」「戻」「代入」などは _replaceWord で word から変換\r\n/** @types {Record<string, string>} */\r\nimport reservedWords from './nako_reserved_words.mjs';\r\nimport { isIndentChars } from './nako_indent_chars.mjs';\r\n// 助詞の一覧\r\nimport { josiRE, removeJosiMap, tararebaMap } from './nako_josi_list.mjs';\r\n// 字句解析ルールの一覧\r\nimport { rules, unitRE } from './nako_lex_rules.mjs';\r\nimport { NakoLexerError, InternalLexerError } from './nako_errors.mjs';\r\nexport class NakoLexer {\r\n    /**\r\n     * @param logger\r\n     */\r\n    constructor(logger) {\r\n        this.logger = logger; // 字句解析した際,確認された関数の一覧\r\n        this.funclist = {};\r\n        this.modList = []; // 字句解析した際,取り込むモジュール一覧 --- nako3::lex で更新される\r\n        this.result = [];\r\n        this.modName = 'main.nako3'; // モジュール名\r\n    }\r\n    /** 関数一覧をセット */\r\n    setFuncList(listObj) {\r\n        this.funclist = listObj;\r\n    }\r\n    /**\r\n     * @param tokens\r\n     * @param {boolean} isFirst\r\n     * @param {string} filename\r\n     */\r\n    replaceTokens(tokens, isFirst, filename) {\r\n        this.result = tokens;\r\n        this.modName = NakoLexer.filenameToModName(filename);\r\n        // 関数の定義があれば funclist を更新\r\n        NakoLexer.preDefineFunc(tokens, this.logger, this.funclist);\r\n        this._replaceWord(this.result);\r\n        if (isFirst) {\r\n            if (this.result.length > 0) {\r\n                const eof = this.result[this.result.length - 1];\r\n                this.result.push({\r\n                    type: 'eol',\r\n                    line: eof.line,\r\n                    column: 0,\r\n                    indent: -1,\r\n                    file: eof.file,\r\n                    josi: '',\r\n                    value: '---',\r\n                    startOffset: eof.startOffset,\r\n                    endOffset: eof.endOffset,\r\n                    rawJosi: ''\r\n                }); // 改行\r\n                this.result.push({\r\n                    type: 'eof',\r\n                    line: eof.line,\r\n                    indent: -1,\r\n                    column: 0,\r\n                    file: eof.file,\r\n                    josi: '',\r\n                    value: '',\r\n                    startOffset: eof.startOffset,\r\n                    endOffset: eof.endOffset,\r\n                    rawJosi: ''\r\n                }); // ファイル末尾\r\n            }\r\n            else {\r\n                this.result.push({\r\n                    type: 'eol',\r\n                    line: 0,\r\n                    column: 0,\r\n                    indent: -1,\r\n                    file: '',\r\n                    josi: '',\r\n                    value: '---',\r\n                    startOffset: 0,\r\n                    endOffset: 0,\r\n                    rawJosi: ''\r\n                }); // 改行\r\n                this.result.push({\r\n                    type: 'eof',\r\n                    line: 0,\r\n                    column: 0,\r\n                    indent: -1,\r\n                    file: '',\r\n                    josi: '',\r\n                    value: '',\r\n                    startOffset: 0,\r\n                    endOffset: 0,\r\n                    rawJosi: ''\r\n                }); // ファイル末尾\r\n            }\r\n        }\r\n        return this.result;\r\n    }\r\n    /**\r\n     * ファイル内で定義されている関数名を列挙する。結果はfunclistに書き込む。その他のトークンの置換処理も行う。\r\n     * シンタックスハイライトの処理から呼び出すためにstaticメソッドにしている。\r\n     */\r\n    static preDefineFunc(tokens, logger, funclist) {\r\n        // 関数を先読みして定義\r\n        let i = 0;\r\n        let isFuncPointer = false;\r\n        const readArgs = () => {\r\n            const args = [];\r\n            const keys = {};\r\n            if (tokens[i].type !== '(') {\r\n                return [];\r\n            }\r\n            i++;\r\n            while (tokens[i]) {\r\n                const t = tokens[i];\r\n                i++;\r\n                if (t.type === ')') {\r\n                    break;\r\n                }\r\n                if (t.type === 'func') {\r\n                    isFuncPointer = true;\r\n                }\r\n                else if (t.type !== '|' && t.type !== 'comma') {\r\n                    if (isFuncPointer) {\r\n                        t.funcPointer = true;\r\n                        isFuncPointer = false;\r\n                    }\r\n                    args.push(t);\r\n                    if (!keys[t.value]) {\r\n                        keys[t.value] = [];\r\n                    }\r\n                    keys[t.value].push(t.josi);\r\n                }\r\n            }\r\n            const varnames = [];\r\n            const funcPointers = [];\r\n            const result = [];\r\n            const already = {};\r\n            for (const arg of args) {\r\n                if (!already[arg.value]) {\r\n                    const josi = keys[arg.value];\r\n                    result.push(josi);\r\n                    varnames.push(arg.value);\r\n                    if (arg.funcPointer) {\r\n                        funcPointers.push(arg.value);\r\n                    }\r\n                    else {\r\n                        funcPointers.push(null);\r\n                    }\r\n                    already[arg.value] = true;\r\n                }\r\n            }\r\n            return [result, varnames, funcPointers];\r\n        };\r\n        // トークンを一つずつ確認\r\n        while (i < tokens.length) {\r\n            // タイプの置換\r\n            const t = tokens[i];\r\n            // 無名関数の定義：「xxには**」があった場合 ... 暗黙的な関数定義とする\r\n            if ((t.type === 'word' && t.josi === 'には') || (t.type === 'word' && t.josi === 'は~')) {\r\n                t.josi = 'には';\r\n                tokens.splice(i + 1, 0, { type: 'def_func', value: '関数', indent: t.indent, line: t.line, column: t.column, file: t.file, josi: '', startOffset: t.endOffset, endOffset: t.endOffset, rawJosi: '', tag: '無名関数' });\r\n                i++;\r\n                continue;\r\n            }\r\n            // N回をN|回に置換\r\n            if (t.type === 'word' && t.josi === '' && t.value.length >= 2) {\r\n                if (t.value.match(/回$/)) {\r\n                    t.value = t.value.substring(0, t.value.length - 1);\r\n                    // N回を挿入\r\n                    if (!t.endOffset) {\r\n                        t.endOffset = 1;\r\n                    }\r\n                    const kai = { type: '回', value: '回', indent: t.indent, line: t.line, column: t.column, file: t.file, josi: '', startOffset: t.endOffset - 1, endOffset: t.endOffset, rawJosi: '' };\r\n                    tokens.splice(i + 1, 0, kai);\r\n                    t.endOffset--;\r\n                    i++;\r\n                }\r\n            }\r\n            // 予約語の置換\r\n            if (t.type === 'word' && reservedWords[t.value]) {\r\n                t.type = reservedWords[t.value];\r\n                if (t.value === 'そう') {\r\n                    t.value = 'それ';\r\n                }\r\n            }\r\n            // 関数定義の確認\r\n            if (t.type !== 'def_test' && t.type !== 'def_func') {\r\n                i++;\r\n                continue;\r\n            }\r\n            // 無名関数か普通関数定義かを判定する (1つ前が改行かどうかで判定)\r\n            let isMumei = true;\r\n            let prevToken = { type: 'eol' };\r\n            if (i >= 1) {\r\n                prevToken = tokens[i - 1];\r\n            }\r\n            if (prevToken.type === 'eol') {\r\n                isMumei = false;\r\n            }\r\n            // 関数名や引数を得る\r\n            const defToken = t;\r\n            i++; // skip \"●\" or \"関数\"\r\n            let josi = [];\r\n            let varnames = [];\r\n            let funcPointers = [];\r\n            let funcName = '';\r\n            let funcNameToken = null;\r\n            // 関数名の前に引数定義\r\n            if (tokens[i] && tokens[i].type === '(') {\r\n                [josi, varnames, funcPointers] = readArgs();\r\n            }\r\n            // 関数名を得る\r\n            if (!isMumei && tokens[i] && tokens[i].type === 'word') {\r\n                funcNameToken = tokens[i++];\r\n                funcName = funcNameToken.value;\r\n            }\r\n            // 関数名の後で引数定義\r\n            if (josi.length === 0 && tokens[i] && tokens[i].type === '(') {\r\n                [josi, varnames, funcPointers] = readArgs();\r\n            }\r\n            // 名前のある関数定義ならば関数テーブルに関数名を登録\r\n            // 無名関数は登録しないように気をつける\r\n            if (funcName !== '' && funcNameToken) {\r\n                const modName = NakoLexer.filenameToModName(t.file);\r\n                funcName = modName + '__' + funcName;\r\n                if (funcName in funclist) { // 関数の二重定義を警告\r\n                    // main__は省略 #1223\r\n                    const dispName = funcName.replace(/^main__/, '');\r\n                    logger.warn(`関数『${dispName}』は既に定義されています。`, defToken);\r\n                }\r\n                funcNameToken.value = funcName;\r\n                funclist[funcName] = {\r\n                    type: 'func',\r\n                    josi,\r\n                    fn: null,\r\n                    asyncFn: false,\r\n                    varnames,\r\n                    funcPointers\r\n                };\r\n            }\r\n            // 無名関数のために\r\n            defToken.meta = {\r\n                type: 'func',\r\n                josi,\r\n                varnames,\r\n                funcPointers\r\n            };\r\n        }\r\n    }\r\n    /** 文字列を{と}の部分で分割する。中括弧が対応していない場合nullを返す。 */\r\n    splitStringEx(code) {\r\n        /** @type {string[]} */\r\n        const list = [];\r\n        // \"A{B}C{D}E\" -> [\"A\", \"B}C\", \"D}E\"] -> [\"A\", \"B\", \"C\", \"D\", \"E\"]\r\n        // \"A{B}C}D{E}F\" -> [\"A\", \"B}C}D\", \"E}F\"] -> [\"A\", \"B\", \"C}D\", \"E\", \"F\"]\r\n        const arr = code.split(/[{｛]/);\r\n        list.push(arr[0]);\r\n        for (const s of arr.slice(1)) {\r\n            const end = s.replace('｝', '}').indexOf('}');\r\n            if (end === -1) {\r\n                return null;\r\n            }\r\n            list.push(s.slice(0, end), s.slice(end + 1));\r\n        }\r\n        return list;\r\n    }\r\n    _replaceWord(tokens) {\r\n        let comment = [];\r\n        let i = 0;\r\n        const getLastType = () => {\r\n            if (i <= 0) {\r\n                return 'eol';\r\n            }\r\n            return tokens[i - 1].type;\r\n        };\r\n        let modSelf = (tokens.length > 0) ? NakoLexer.filenameToModName(tokens[0].file) : 'main.nako3';\r\n        while (i < tokens.length) {\r\n            const t = tokens[i];\r\n            // モジュール名の変更に対応\r\n            if ((t.type === 'word' || t.type === 'func') && t.value === '名前空間設定') {\r\n                modSelf = tokens[i - 1].value;\r\n            }\r\n            // 関数を強制的に置換( word => func )\r\n            if (t.type === 'word' && t.value !== 'それ') {\r\n                // 関数を変換\r\n                const funcName = t.value;\r\n                if (funcName.indexOf('__') < 0) {\r\n                    // 自身のモジュール名を検索\r\n                    const gname1 = `${modSelf}__${funcName}`;\r\n                    const gfo1 = this.funclist[gname1];\r\n                    if (gfo1 && gfo1.type === 'func') {\r\n                        t.type = 'func';\r\n                        t.meta = gfo1;\r\n                        t.value = gname1;\r\n                        continue;\r\n                    }\r\n                    // モジュール関数を置換\r\n                    for (const mod of this.modList) {\r\n                        const gname = `${mod}__${funcName}`;\r\n                        const gfo = this.funclist[gname];\r\n                        if (gfo && gfo.type === 'func') {\r\n                            t.type = 'func';\r\n                            t.meta = gfo;\r\n                            t.value = gname;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (t.type === 'func') {\r\n                        continue;\r\n                    }\r\n                }\r\n                const fo = this.funclist[funcName];\r\n                if (fo && fo.type === 'func') {\r\n                    t.type = 'func';\r\n                    t.meta = fo;\r\n                }\r\n            }\r\n            // 数字につくマイナス記号を判定\r\n            // (ng) 5 - 3 || word - 3\r\n            // (ok) (行頭)-3 || 1 * -3 || Aに -3を 足す\r\n            if (t.type === '-' && tokens[i + 1] && tokens[i + 1].type === 'number') {\r\n                // 一つ前の語句が、(行頭|演算子|助詞付きの語句)なら 負数である\r\n                const ltype = getLastType();\r\n                if (ltype === 'eol' || opPriority[ltype] || tokens[i - 1].josi !== '') {\r\n                    tokens.splice(i, 1); // remove '-'\r\n                    tokens[i].value *= -1;\r\n                }\r\n            }\r\n            // 助詞の「は」を = に展開\r\n            if (t.josi === undefined) {\r\n                t.josi = '';\r\n            }\r\n            if (t.josi === 'は') {\r\n                if (!t.rawJosi) {\r\n                    t.rawJosi = t.josi;\r\n                }\r\n                const startOffset = (t.endOffset === undefined) ? undefined : t.endOffset - t.rawJosi.length;\r\n                tokens.splice(i + 1, 0, {\r\n                    type: 'eq',\r\n                    indent: t.indent,\r\n                    line: t.line,\r\n                    column: t.column,\r\n                    file: t.file,\r\n                    startOffset,\r\n                    endOffset: t.endOffset,\r\n                    josi: '',\r\n                    rawJosi: '',\r\n                    value: undefined\r\n                });\r\n                i += 2;\r\n                t.josi = t.rawJosi = '';\r\n                t.endOffset = startOffset;\r\n                continue;\r\n            }\r\n            // 「とは」を一つの単語にする\r\n            if (t.josi === 'とは') {\r\n                if (!t.rawJosi) {\r\n                    t.rawJosi = t.josi;\r\n                }\r\n                const startOffset = t.endOffset === undefined ? undefined : t.endOffset - t.rawJosi.length;\r\n                tokens.splice(i + 1, 0, {\r\n                    type: t.josi,\r\n                    indent: t.indent,\r\n                    line: t.line,\r\n                    column: t.column,\r\n                    file: t.file,\r\n                    startOffset,\r\n                    endOffset: t.endOffset,\r\n                    josi: '',\r\n                    rawJosi: '',\r\n                    value: undefined\r\n                });\r\n                t.josi = t.rawJosi = '';\r\n                t.endOffset = startOffset;\r\n                i += 2;\r\n                continue;\r\n            }\r\n            // 助詞のならばをトークンとする\r\n            if (tararebaMap[t.josi]) {\r\n                const josi = (t.josi === 'でなければ' || t.josi === 'なければ') ? 'でなければ' : 'ならば';\r\n                if (!t.rawJosi) {\r\n                    t.rawJosi = josi;\r\n                }\r\n                const startOffset = t.endOffset === undefined ? undefined : t.endOffset - t.rawJosi.length;\r\n                tokens.splice(i + 1, 0, {\r\n                    type: 'ならば',\r\n                    value: josi,\r\n                    indent: t.indent,\r\n                    line: t.line,\r\n                    column: t.column,\r\n                    file: t.file,\r\n                    startOffset,\r\n                    endOffset: t.endOffset,\r\n                    josi: '',\r\n                    rawJosi: ''\r\n                });\r\n                t.josi = t.rawJosi = '';\r\n                t.endOffset = startOffset;\r\n                i += 2;\r\n                continue;\r\n            }\r\n            // '_' + 改行 を飛ばす (演算子直後に改行を入れたい場合に使う)\r\n            if (t.type === '_eol') {\r\n                tokens.splice(i, 1);\r\n                continue;\r\n            }\r\n            // コメントを飛ばす\r\n            if (t.type === 'line_comment' || t.type === 'range_comment') {\r\n                comment.push(t.value);\r\n                tokens.splice(i, 1);\r\n                continue;\r\n            }\r\n            // 改行にコメントを埋め込む\r\n            if (t.type === 'eol') {\r\n                t.value = comment.join('/');\r\n                comment = [];\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n    /**\r\n     * インデントの個数を数える\r\n     * @returns 戻り値として[インデント数, 読み飛ばすべき文字数]を返す\r\n     */\r\n    countIndent(src) {\r\n        let indent = 0;\r\n        for (let i = 0; i < src.length; i++) {\r\n            const c = src.charAt(i);\r\n            const n = isIndentChars(c);\r\n            if (n === 0) {\r\n                return [indent, i];\r\n            }\r\n            indent += n;\r\n        }\r\n        return [indent, src.length];\r\n    }\r\n    /**\r\n     * ソースコードをトークンに分割する\r\n     * @param src なでしこのソースコード\r\n     * @param line 先頭行の行番号\r\n     * @param filename ファイル名\r\n     */\r\n    tokenize(src, line, filename) {\r\n        const srcLength = src.length;\r\n        const result = [];\r\n        let columnCurrent;\r\n        let lineCurrent;\r\n        let column = 1;\r\n        let isDefTest = false;\r\n        let indent = 0;\r\n        // 最初にインデントを数える\r\n        const ia = this.countIndent(src);\r\n        indent = ia[0]; // インデント数\r\n        src = src.substring(ia[1]); // 読み飛ばす文字数\r\n        column += ia[1];\r\n        while (src !== '') {\r\n            let ok = false;\r\n            // 各ルールについて\r\n            for (const rule of rules) {\r\n                // 正規表現でマッチ\r\n                const m = rule.pattern.exec(src);\r\n                if (!m) {\r\n                    continue;\r\n                }\r\n                ok = true;\r\n                // 空白ならスキップ\r\n                if (rule.name === 'space') {\r\n                    column += m[0].length;\r\n                    src = src.substring(m[0].length);\r\n                    continue;\r\n                }\r\n                // マッチしたルールがコールバックを持つなら\r\n                if (rule.cbParser) {\r\n                    // コールバックを呼ぶ\r\n                    let rp;\r\n                    if (isDefTest && rule.name === 'word') {\r\n                        rp = rule.cbParser(src, false);\r\n                    }\r\n                    else {\r\n                        try {\r\n                            rp = rule.cbParser(src);\r\n                        }\r\n                        catch (e) {\r\n                            throw new NakoLexerError(e.message, srcLength - src.length, srcLength - src.length + 1, line, filename);\r\n                        }\r\n                    }\r\n                    if (rule.name === 'string_ex') {\r\n                        // 展開あり文字列 → aaa{x}bbb{x}cccc\r\n                        const list = this.splitStringEx(rp.res);\r\n                        if (list === null) {\r\n                            throw new InternalLexerError('展開あり文字列で値の埋め込み{...}が対応していません。', srcLength - src.length, srcLength - rp.src.length, line, filename);\r\n                        }\r\n                        let offset = 0;\r\n                        for (let i = 0; i < list.length; i++) {\r\n                            const josi = (i === list.length - 1) ? rp.josi : '';\r\n                            if (i % 2 === 0) {\r\n                                result.push({\r\n                                    type: 'string',\r\n                                    value: list[i],\r\n                                    file: filename,\r\n                                    josi,\r\n                                    indent,\r\n                                    line,\r\n                                    column,\r\n                                    preprocessedCodeOffset: srcLength - src.length + offset,\r\n                                    preprocessedCodeLength: list[i].length + 2 + josi.length\r\n                                });\r\n                                // 先頭なら'\"...{'、それ以外なら'}...{'、最後は何でも良い\r\n                                offset += list[i].length + 2;\r\n                            }\r\n                            else {\r\n                                result.push({ type: '&', value: '&', josi: '', indent, file: filename, line, column, preprocessedCodeOffset: srcLength - src.length + offset, preprocessedCodeLength: 0 });\r\n                                result.push({ type: '(', value: '(', josi: '', indent, file: filename, line, column, preprocessedCodeOffset: srcLength - src.length + offset, preprocessedCodeLength: 0 });\r\n                                result.push({ type: 'code', value: list[i], josi: '', indent, file: filename, line, column, preprocessedCodeOffset: srcLength - src.length + offset, preprocessedCodeLength: list[i].length });\r\n                                result.push({ type: ')', value: ')', josi: '', indent, file: filename, line, column, preprocessedCodeOffset: srcLength - src.length + offset + list[i].length, preprocessedCodeLength: 0 });\r\n                                result.push({ type: '&', value: '&', josi: '', indent, file: filename, line, column, preprocessedCodeOffset: srcLength - src.length + offset + list[i].length, preprocessedCodeLength: 0 });\r\n                                offset += list[i].length;\r\n                            }\r\n                        }\r\n                        line += rp.numEOL;\r\n                        column += src.length - rp.src.length;\r\n                        src = rp.src;\r\n                        if (rp.numEOL > 0) {\r\n                            column = 1;\r\n                        }\r\n                        break;\r\n                    }\r\n                    columnCurrent = column;\r\n                    column += src.length - rp.src.length;\r\n                    result.push({ type: rule.name, value: rp.res, josi: rp.josi, indent, line, column: columnCurrent, file: filename, preprocessedCodeOffset: srcLength - src.length, preprocessedCodeLength: src.length - rp.src.length });\r\n                    src = rp.src;\r\n                    line += rp.numEOL;\r\n                    if (rp.numEOL > 0) {\r\n                        column = 1;\r\n                    }\r\n                    break;\r\n                }\r\n                // ソースを進める前に位置を計算\r\n                const srcOffset = srcLength - src.length;\r\n                // 値を変換する必要があるか？\r\n                let value = m[0];\r\n                if (rule.cb) {\r\n                    value = rule.cb(value);\r\n                }\r\n                // ソースを進める\r\n                columnCurrent = column;\r\n                lineCurrent = line;\r\n                column += m[0].length;\r\n                src = src.substring(m[0].length);\r\n                // 改行の時の処理\r\n                if ((rule.name === 'eol' && value === '\\n') || rule.name === '_eol') {\r\n                    value = line++;\r\n                    column = 1;\r\n                }\r\n                // 数値なら単位を持つか？ --- #994\r\n                if (rule.name === 'number') {\r\n                    // 単位があれば読み飛ばす\r\n                    const um = unitRE.exec(src);\r\n                    if (um) {\r\n                        src = src.substring(um[0].length);\r\n                        column += m[0].length;\r\n                    }\r\n                }\r\n                let josi = '';\r\n                if (rule.readJosi) {\r\n                    const j = josiRE.exec(src);\r\n                    if (j) {\r\n                        josi = j[0].replace(/^\\s+/, '');\r\n                        column += j[0].length;\r\n                        src = src.substring(j[0].length);\r\n                        // 助詞の直後にあるカンマを無視 #877\r\n                        if (src.charAt(0) === ',') {\r\n                            src = src.substring(1);\r\n                        }\r\n                        // 「＊＊である」なら削除 #939 #974\r\n                        if (removeJosiMap[josi]) {\r\n                            josi = '';\r\n                        }\r\n                    }\r\n                }\r\n                switch (rule.name) {\r\n                    case 'def_test': {\r\n                        isDefTest = true;\r\n                        break;\r\n                    }\r\n                    case 'eol': { // eolの処理はほかに↑と↓にある\r\n                        isDefTest = false;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        break;\r\n                    }\r\n                }\r\n                // ここまで‰(#682) を処理\r\n                if (rule.name === 'dec_lineno') {\r\n                    line--;\r\n                    continue;\r\n                }\r\n                result.push({\r\n                    type: rule.name,\r\n                    value,\r\n                    indent,\r\n                    line: lineCurrent,\r\n                    column: columnCurrent,\r\n                    file: filename,\r\n                    josi,\r\n                    preprocessedCodeOffset: srcOffset,\r\n                    preprocessedCodeLength: (srcLength - src.length) - srcOffset\r\n                });\r\n                // 改行のとき次の行のインデントを調べる。なお、改行の後は必ずcolumnが1になる。インデント構文のため、一行に2つ以上の文を含むときを考慮する。(core #66)\r\n                if (rule.name === 'eol' && column === 1) {\r\n                    const ia = this.countIndent(src);\r\n                    indent = ia[0];\r\n                    column += ia[1];\r\n                    src = src.substring(ia[1]); // インデントを飛ばす\r\n                }\r\n                break;\r\n            }\r\n            if (!ok) {\r\n                throw new InternalLexerError('未知の語句: ' + src.substring(0, 3) + '...', srcLength - src.length, srcLength - srcLength + 3, line, filename);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    // トークン配列をtype文字列に変換\r\n    static tokensToTypeStr(tokens, sep) {\r\n        const a = tokens.map((v) => {\r\n            return v.type;\r\n        });\r\n        return a.join(sep);\r\n    }\r\n    /**\r\n     * ファイル名からモジュール名へ変換\r\n     * @param {string} filename\r\n     * @returns {string}\r\n     */\r\n    static filenameToModName(filename) {\r\n        if (!filename) {\r\n            return 'main';\r\n        }\r\n        // パスがあればパスを削除\r\n        filename = filename.replace(/[\\\\:]/g, '/'); // Windowsのpath記号を/に置換\r\n        if (filename.indexOf('/') >= 0) {\r\n            const a = filename.split('/');\r\n            filename = a[a.length - 1];\r\n        }\r\n        filename = filename.replace(/\\.nako3?$/, '');\r\n        return filename;\r\n    }\r\n}\r\n","/**\r\n * nadesiko v3 parser\r\n */\r\nimport { opPriority, RenbunJosi, operatorList } from './nako_parser_const.mjs';\r\nimport { NakoParserBase } from './nako_parser_base.mjs';\r\nimport { NakoSyntaxError } from './nako_errors.mjs';\r\nimport { NakoLexer } from './nako_lexer.mjs';\r\nimport { NewEmptyToken } from './nako_types.mjs';\r\n/**\r\n * 構文解析を行うクラス\r\n */\r\nexport class NakoParser extends NakoParserBase {\r\n    /**\r\n     * 構文解析を実行する\r\n     */\r\n    parse(tokens, filename) {\r\n        this.reset();\r\n        this.tokens = tokens;\r\n        this.modName = NakoLexer.filenameToModName(filename);\r\n        this.modList.push(this.modName);\r\n        // 解析開始\r\n        return this.startParser();\r\n    }\r\n    /** パーサーの一番最初に呼び出す構文規則 */\r\n    startParser() {\r\n        const b = this.ySentenceList();\r\n        const c = this.get();\r\n        if (c && c.type !== 'eof') {\r\n            this.logger.debug(`構文解析でエラー。${this.nodeToStr(c, { depth: 1 }, true)}の使い方が間違っています。`, c);\r\n            throw NakoSyntaxError.fromNode(`構文解析でエラー。${this.nodeToStr(c, { depth: 1 }, false)}の使い方が間違っています。`, c);\r\n        }\r\n        return b;\r\n    }\r\n    /** 複数文を返す */\r\n    ySentenceList() {\r\n        const blocks = [];\r\n        let line = -1;\r\n        const map = this.peekSourceMap();\r\n        while (!this.isEOF()) {\r\n            const n = this.ySentence();\r\n            if (!n) {\r\n                break;\r\n            }\r\n            blocks.push(n);\r\n            if (line < 0) {\r\n                line = n.line;\r\n            }\r\n        }\r\n        if (blocks.length === 0) {\r\n            const token = this.peek() || this.tokens[0];\r\n            this.logger.debug('構文解析に失敗:' + this.nodeToStr(this.peek(), { depth: 1 }, true), token);\r\n            throw NakoSyntaxError.fromNode('構文解析に失敗:' + this.nodeToStr(this.peek(), { depth: 1 }, false), token);\r\n        }\r\n        return { type: 'block', block: blocks, ...map, end: this.peekSourceMap(), genMode: this.genMode };\r\n    }\r\n    /** 余剰スタックのレポートを作る */\r\n    makeStackBalanceReport() {\r\n        const words = [];\r\n        this.stack.forEach((t) => {\r\n            let w = this.nodeToStr(t, { depth: 1 }, false);\r\n            if (t.josi) {\r\n                w += t.josi;\r\n            }\r\n            words.push(w);\r\n        });\r\n        const desc = words.join(',');\r\n        // 最近使った関数の使い方レポートを作る #1093\r\n        let descFunc = '';\r\n        const chA = 'A'.charCodeAt(0);\r\n        for (const f of this.recentlyCalledFunc) {\r\n            descFunc += ' - ';\r\n            let no = 0;\r\n            const josiA = f.josi;\r\n            if (josiA) {\r\n                for (const arg of josiA) {\r\n                    const ch = String.fromCharCode(chA + no);\r\n                    descFunc += ch;\r\n                    if (arg.length === 1) {\r\n                        descFunc += arg[0];\r\n                    }\r\n                    else {\r\n                        descFunc += `(${arg.join('|')})`;\r\n                    }\r\n                    no++;\r\n                }\r\n            }\r\n            descFunc += f.name + '\\n';\r\n        }\r\n        this.recentlyCalledFunc = [];\r\n        return `未解決の単語があります: [${desc}]\\n次の命令の可能性があります:\\n${descFunc}`;\r\n    }\r\n    yEOL() {\r\n        // 行末のチェック #1009\r\n        const eol = this.get();\r\n        if (!eol) {\r\n            return null;\r\n        }\r\n        // 余剰スタックの確認\r\n        if (this.stack.length > 0) {\r\n            const report = this.makeStackBalanceReport();\r\n            throw NakoSyntaxError.fromNode(report, eol);\r\n        }\r\n        this.recentlyCalledFunc = [];\r\n        return eol; // Token to Ast\r\n    }\r\n    /** @returns {Ast | null} */\r\n    ySentence() {\r\n        const map = this.peekSourceMap();\r\n        // 最初の語句が決まっている構文\r\n        if (this.check('eol')) {\r\n            return this.yEOL();\r\n        }\r\n        if (this.check('もし')) {\r\n            return this.yIF();\r\n        }\r\n        if (this.check('後判定')) {\r\n            return this.yAtohantei();\r\n        }\r\n        if (this.check('エラー監視')) {\r\n            return this.yTryExcept();\r\n        }\r\n        if (this.check('逐次実行')) {\r\n            return this.yTikuji();\r\n        }\r\n        if (this.accept(['抜ける'])) {\r\n            return { type: 'break', josi: '', ...map, end: this.peekSourceMap() };\r\n        }\r\n        if (this.accept(['続ける'])) {\r\n            return { type: 'continue', josi: '', ...map, end: this.peekSourceMap() };\r\n        }\r\n        if (this.accept(['require', 'string', '取込'])) {\r\n            return this.yRequire();\r\n        }\r\n        if (this.accept(['not', '非同期モード'])) {\r\n            return this.yASyncMode();\r\n        }\r\n        if (this.accept(['DNCLモード'])) {\r\n            return this.yDNCLMode(1);\r\n        }\r\n        if (this.accept(['DNCL2モード'])) {\r\n            return this.yDNCLMode(2);\r\n        }\r\n        if (this.accept(['not', 'string', 'モード設定'])) {\r\n            return this.ySetGenMode(this.y[1].value);\r\n        }\r\n        // 関数呼び出し演算子\r\n        if (this.check2(['func', '←'])) {\r\n            const word = this.get() || NewEmptyToken();\r\n            throw NakoSyntaxError.fromNode(`関数代入演算子『←』は廃止されました。『${word.value}←』の部分。`, word);\r\n        }\r\n        if (this.check2(['func', 'eq'])) {\r\n            const word = this.get() || NewEmptyToken();\r\n            throw NakoSyntaxError.fromNode(`関数『${word.value}』に代入できません。`, word);\r\n        }\r\n        // 先読みして初めて確定する構文\r\n        if (this.accept([this.ySpeedMode])) {\r\n            return this.y[0];\r\n        }\r\n        if (this.accept([this.yPerformanceMonitor])) {\r\n            return this.y[0];\r\n        }\r\n        if (this.accept([this.yLet])) {\r\n            return this.y[0];\r\n        }\r\n        if (this.accept([this.yDefTest])) {\r\n            return this.y[0];\r\n        }\r\n        if (this.accept([this.yDefFunc])) {\r\n            return this.y[0];\r\n        }\r\n        // 関数呼び出しの他、各種構文の実装\r\n        if (this.accept([this.yCall])) {\r\n            const c1 = this.y[0];\r\n            if (RenbunJosi.indexOf(c1.josi || '') >= 0) { // 連文をblockとして接続する(もし構文などのため)\r\n                if (this.stack.length >= 1) { // スタックの余剰をチェック\r\n                    const report = this.makeStackBalanceReport();\r\n                    throw NakoSyntaxError.fromNode(report, c1);\r\n                }\r\n                const c2 = this.ySentence();\r\n                if (c2 !== null) {\r\n                    return {\r\n                        type: 'block',\r\n                        block: [c1, c2],\r\n                        josi: c2.josi,\r\n                        ...map,\r\n                        end: this.peekSourceMap()\r\n                    };\r\n                }\r\n            }\r\n            return c1;\r\n        }\r\n        return null;\r\n    }\r\n    /** @returns {Ast} */\r\n    yASyncMode() {\r\n        const map = this.peekSourceMap();\r\n        this.genMode = '非同期モード';\r\n        return { type: 'eol', ...map, end: this.peekSourceMap() };\r\n    }\r\n    /** set DNCL mode */\r\n    yDNCLMode(ver) {\r\n        const map = this.peekSourceMap();\r\n        if (ver === 1) {\r\n            // 配列インデックスは1から\r\n            this.arrayIndexFrom = 1;\r\n            // 配列アクセスをJSと逆順で指定する\r\n            this.flagReverseArrayIndex = true;\r\n        }\r\n        else {\r\n            // ver2はPythonに近いとのこと\r\n        }\r\n        // 配列代入時自動で初期化チェックする\r\n        this.flagCheckArrayInit = true;\r\n        return { type: 'eol', ...map, end: this.peekSourceMap() };\r\n    }\r\n    /** @returns {Ast} */\r\n    ySetGenMode(mode) {\r\n        const map = this.peekSourceMap();\r\n        this.genMode = mode;\r\n        return { type: 'eol', ...map, end: this.peekSourceMap() };\r\n    }\r\n    /** @returns {Ast} */\r\n    yRequire() {\r\n        const nameToken = this.y[1];\r\n        const filename = nameToken.value;\r\n        const modName = NakoLexer.filenameToModName(filename);\r\n        if (this.modList.indexOf(modName) < 0) {\r\n            // 優先度が最も高いのは modList[0]\r\n            // [memo] モジュールの検索優先度は、下に書くほど高くなる\r\n            const modSelf = this.modList.shift();\r\n            if (modSelf) {\r\n                this.modList.unshift(modName);\r\n                this.modList.unshift(modSelf);\r\n            }\r\n        }\r\n        return {\r\n            type: 'require',\r\n            value: filename,\r\n            josi: '',\r\n            ...this.peekSourceMap(),\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    /** @returns {Ast} */\r\n    yBlock() {\r\n        const map = this.peekSourceMap();\r\n        const blocks = [];\r\n        if (this.check('ここから')) {\r\n            this.get();\r\n        }\r\n        while (!this.isEOF()) {\r\n            if (this.checkTypes(['違えば', 'ここまで', 'エラー'])) {\r\n                break;\r\n            }\r\n            if (!this.accept([this.ySentence])) {\r\n                break;\r\n            }\r\n            blocks.push(this.y[0]);\r\n        }\r\n        return { type: 'block', block: blocks, ...map, end: this.peekSourceMap() };\r\n    }\r\n    yDefFuncReadArgs() {\r\n        if (!this.check('(')) {\r\n            return null;\r\n        }\r\n        const a = [];\r\n        this.get(); // skip '('\r\n        while (!this.isEOF()) {\r\n            if (this.check(')')) {\r\n                this.get(); // skip ''\r\n                break;\r\n            }\r\n            const t = this.get();\r\n            if (t) {\r\n                a.push(t);\r\n            } // Token to Ast\r\n            if (this.check('comma')) {\r\n                this.get();\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n    yDefTest() {\r\n        return this.yDef('def_test');\r\n    }\r\n    yDefFunc() {\r\n        return this.yDef('def_func');\r\n    }\r\n    /** ユーザー関数の定義 */\r\n    yDef(type) {\r\n        if (!this.check(type)) { // yDefFuncから呼ばれれば def_func なのかをチェックする\r\n            return null;\r\n        }\r\n        const map = this.peekSourceMap();\r\n        const def = this.get(); // ●\r\n        if (!def) {\r\n            return null;\r\n        }\r\n        let defArgs = [];\r\n        if (this.check('(')) {\r\n            defArgs = this.yDefFuncReadArgs() || [];\r\n        } // // lexerでも解析しているが再度詳しく\r\n        const funcName = this.get();\r\n        if (!funcName || funcName.type !== 'func') {\r\n            this.logger.debug(this.nodeToStr(funcName, { depth: 0, typeName: '関数' }, true) + 'の宣言でエラー。', funcName);\r\n            throw NakoSyntaxError.fromNode(this.nodeToStr(funcName, { depth: 0, typeName: '関数' }, false) + 'の宣言でエラー。', def);\r\n        }\r\n        if (this.check('(')) {\r\n            // 関数引数の二重定義\r\n            if (defArgs.length > 0) {\r\n                this.logger.debug(this.nodeToStr(funcName, { depth: 0, typeName: '関数' }, true) + 'の宣言で、引数定義は名前の前か後に一度だけ可能です。', funcName);\r\n                throw NakoSyntaxError.fromNode(this.nodeToStr(funcName, { depth: 0, typeName: '関数' }, false) + 'の宣言で、引数定義は名前の前か後に一度だけ可能です。', funcName);\r\n            }\r\n            defArgs = this.yDefFuncReadArgs() || [];\r\n        }\r\n        if (this.check('とは')) {\r\n            this.get();\r\n        }\r\n        let block = null;\r\n        let multiline = false;\r\n        let asyncFn = false;\r\n        if (this.check('ここから')) {\r\n            multiline = true;\r\n        }\r\n        if (this.check('eol')) {\r\n            multiline = true;\r\n        }\r\n        try {\r\n            this.funcLevel++;\r\n            this.usedAsyncFn = false;\r\n            // ローカル変数を生成\r\n            const backupLocalvars = this.localvars;\r\n            this.localvars = { 'それ': { type: 'var', value: '' } };\r\n            if (multiline) {\r\n                this.saveStack();\r\n                // 関数の引数をローカル変数として登録する\r\n                for (const arg of defArgs) {\r\n                    const fnName = (arg.value) ? arg.value + '' : '';\r\n                    this.localvars[fnName] = { 'type': 'var', 'value': '' };\r\n                }\r\n                block = this.yBlock();\r\n                if (this.check('ここまで')) {\r\n                    this.get();\r\n                }\r\n                else {\r\n                    throw NakoSyntaxError.fromNode('『ここまで』がありません。関数定義の末尾に必要です。', def);\r\n                }\r\n                this.loadStack();\r\n            }\r\n            else {\r\n                this.saveStack();\r\n                block = this.ySentence();\r\n                this.loadStack();\r\n            }\r\n            this.funcLevel--;\r\n            asyncFn = this.usedAsyncFn;\r\n            this.localvars = backupLocalvars;\r\n        }\r\n        catch (err) {\r\n            this.logger.debug(this.nodeToStr(funcName, { depth: 0, typeName: '関数' }, true) +\r\n                'の定義で以下のエラーがありました。\\n' + err.message, def);\r\n            throw NakoSyntaxError.fromNode(this.nodeToStr(funcName, { depth: 0, typeName: '関数' }, false) +\r\n                'の定義で以下のエラーがありました。\\n' + err.message, def);\r\n        }\r\n        return {\r\n            type,\r\n            name: funcName,\r\n            args: defArgs,\r\n            block: block || [],\r\n            asyncFn,\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yIFCond() {\r\n        const map = this.peekSourceMap();\r\n        let a = this.yGetArg();\r\n        if (!a) {\r\n            return null;\r\n        }\r\n        // console.log('@@yIFCond=', a)\r\n        // チェック : Aならば\r\n        if (a.josi === 'ならば') {\r\n            return a;\r\n        }\r\n        if (a.josi === 'でなければ') {\r\n            a = { type: 'not', value: a, josi: '', ...map, end: this.peekSourceMap() };\r\n            return a;\r\n        }\r\n        // チェック : AがBならば --- 「関数B(A)」のとき\r\n        if ((a.josi !== '') && (this.check('func'))) {\r\n            // もし文で関数呼び出しがある場合\r\n            this.stack.push(a);\r\n            a = this.yCall();\r\n        }\r\n        else \r\n        // チェック : AがBならば --- 「A = B」のとき\r\n        if (a.josi === 'が') {\r\n            const tmpI = this.index;\r\n            const b = this.yGetArg();\r\n            if (!b) {\r\n                throw NakoSyntaxError.fromNode('もし文の条件「AがBならば」でBがないか条件が複雑過ぎます。' +\r\n                    this.nodeToStr(this.peek(), { depth: 1 }, false), map);\r\n            }\r\n            if (this.check('ならば')) {\r\n                const naraba = this.get() || { 'value': 'ならば' };\r\n                b.josi = naraba.value;\r\n            }\r\n            if (b && (b.josi === 'ならば' || b.josi === 'でなければ')) {\r\n                return {\r\n                    type: 'op',\r\n                    operator: (b.josi === 'でなければ') ? 'noteq' : 'eq',\r\n                    left: a,\r\n                    right: b,\r\n                    josi: '',\r\n                    ...map,\r\n                    end: this.peekSourceMap()\r\n                };\r\n            }\r\n            this.index = tmpI;\r\n        }\r\n        // もし文で追加の関数呼び出しがある場合\r\n        if (!this.check('ならば')) {\r\n            this.stack.push(a);\r\n            a = this.yCall();\r\n        }\r\n        // (ならば|でなければ)を確認\r\n        if (!this.check('ならば')) {\r\n            const smap = a || { type: '?', ...map };\r\n            this.logger.debug('もし文で『ならば』がないか、条件が複雑過ぎます。' + this.nodeToStr(this.peek(), { depth: 1 }, false) + 'の直前に『ならば』を書いてください。', smap);\r\n            throw NakoSyntaxError.fromNode('もし文で『ならば』がないか、条件が複雑過ぎます。' + this.nodeToStr(this.peek(), { depth: 1 }, false) + 'の直前に『ならば』を書いてください。', smap);\r\n        }\r\n        const naraba = this.get();\r\n        // 否定形のチェック\r\n        if (naraba && naraba.value === 'でなければ') {\r\n            a = {\r\n                type: 'not',\r\n                value: a,\r\n                josi: '',\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        return a;\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yIF() {\r\n        const map = this.peekSourceMap();\r\n        if (!this.check('もし')) {\r\n            return null;\r\n        }\r\n        const mosi = this.get(); // skip もし\r\n        if (mosi == null) {\r\n            return null;\r\n        }\r\n        while (this.check('comma')) {\r\n            this.get();\r\n        } // skip comma\r\n        let cond = null;\r\n        try {\r\n            cond = this.yIFCond();\r\n        }\r\n        catch (err) {\r\n            throw NakoSyntaxError.fromNode('『もし』文の条件で次のエラーがあります。\\n' + err.message, mosi);\r\n        }\r\n        if (cond === null) {\r\n            throw NakoSyntaxError.fromNode('『もし』文で条件の指定が空です。', mosi);\r\n        }\r\n        let trueBlock = null;\r\n        let falseBlock = null;\r\n        let tanbun = false;\r\n        // True Block\r\n        if (this.check('eol')) {\r\n            trueBlock = this.yBlock();\r\n        }\r\n        else {\r\n            trueBlock = this.ySentence();\r\n            tanbun = true;\r\n        }\r\n        // skip EOL\r\n        while (this.check('eol')) {\r\n            this.get();\r\n        }\r\n        // Flase Block\r\n        if (this.check('違えば')) {\r\n            this.get(); // skip 違えば\r\n            while (this.check('comma')) {\r\n                this.get();\r\n            }\r\n            if (this.check('eol')) {\r\n                falseBlock = this.yBlock();\r\n            }\r\n            else {\r\n                falseBlock = this.ySentence();\r\n                tanbun = true;\r\n            }\r\n        }\r\n        if (tanbun === false) {\r\n            if (this.check('ここまで')) {\r\n                this.get();\r\n            }\r\n            else {\r\n                throw NakoSyntaxError.fromNode('『もし』文で『ここまで』がありません。', mosi);\r\n            }\r\n        }\r\n        return {\r\n            type: 'if',\r\n            expr: cond || [],\r\n            block: trueBlock || [],\r\n            false_block: falseBlock || [],\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    ySpeedMode() {\r\n        const map = this.peekSourceMap();\r\n        if (!this.check2(['string', '実行速度優先'])) {\r\n            return null;\r\n        }\r\n        const optionNode = this.get();\r\n        this.get();\r\n        let val = '';\r\n        if (optionNode && optionNode.value) {\r\n            val = optionNode.value;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n        const options = { 行番号無し: false, 暗黙の型変換無し: false, 強制ピュア: false, それ無効: false };\r\n        for (const name of val.split('/')) {\r\n            // 全て有効化\r\n            if (name === '全て') {\r\n                for (const k of Object.keys(options)) {\r\n                    options[k] = true;\r\n                }\r\n                break;\r\n            }\r\n            // 個別に有効化\r\n            if (Object.keys(options).includes(name)) {\r\n                options[name] = true;\r\n            }\r\n            else {\r\n                // 互換性を考えて、警告に留める。\r\n                this.logger.warn(`実行速度優先文のオプション『${name}』は存在しません。`, optionNode);\r\n            }\r\n        }\r\n        let multiline = false;\r\n        if (this.check('ここから')) {\r\n            this.get();\r\n            multiline = true;\r\n        }\r\n        else if (this.check('eol')) {\r\n            multiline = true;\r\n        }\r\n        let block = null;\r\n        if (multiline) {\r\n            block = this.yBlock();\r\n            if (this.check('ここまで')) {\r\n                this.get();\r\n            }\r\n        }\r\n        else {\r\n            block = this.ySentence();\r\n        }\r\n        return {\r\n            type: 'speed_mode',\r\n            options,\r\n            block: block || [],\r\n            josi: '',\r\n            ...map\r\n        };\r\n    }\r\n    yPerformanceMonitor() {\r\n        const map = this.peekSourceMap();\r\n        if (!this.check2(['string', 'パフォーマンスモニタ適用'])) {\r\n            return null;\r\n        }\r\n        const optionNode = this.get();\r\n        if (!optionNode) {\r\n            return null;\r\n        }\r\n        this.get();\r\n        const options = { ユーザ関数: false, システム関数本体: false, システム関数: false };\r\n        for (const name of optionNode.value.split('/')) {\r\n            // 全て有効化\r\n            if (name === '全て') {\r\n                for (const k of Object.keys(options)) {\r\n                    options[k] = true;\r\n                }\r\n                break;\r\n            }\r\n            // 個別に有効化\r\n            if (Object.keys(options).includes(name)) {\r\n                options[name] = true;\r\n            }\r\n            else {\r\n                // 互換性を考えて、警告に留める。\r\n                this.logger.warn(`パフォーマンスモニタ適用文のオプション『${name}』は存在しません。`, optionNode);\r\n            }\r\n        }\r\n        let multiline = false;\r\n        if (this.check('ここから')) {\r\n            this.get();\r\n            multiline = true;\r\n        }\r\n        else if (this.check('eol')) {\r\n            multiline = true;\r\n        }\r\n        let block = null;\r\n        if (multiline) {\r\n            block = this.yBlock();\r\n            if (this.check('ここまで')) {\r\n                this.get();\r\n            }\r\n        }\r\n        else {\r\n            block = this.ySentence();\r\n        }\r\n        return {\r\n            type: 'performance_monitor',\r\n            options,\r\n            block: block || [],\r\n            josi: '',\r\n            ...map\r\n        };\r\n    }\r\n    /** (非推奨) 「逐次実行」構文 @returns {Ast | null} */\r\n    yTikuji() {\r\n        const map = this.peekSourceMap();\r\n        if (!this.check('逐次実行')) {\r\n            return null;\r\n        }\r\n        const tikuji = this.getCur(); // skip 逐次実行\r\n        this.logger.warn('『逐次実行』構文の使用は非推奨になりました(https://nadesi.com/v3/doc/go.php?944)。', tikuji);\r\n        const blocks = [];\r\n        let errorBlock = null;\r\n        if (!tikuji || !this.check('eol')) {\r\n            throw NakoSyntaxError.fromNode('『逐次実行』の直後は改行が必要です。', tikuji);\r\n        }\r\n        // ブロックを読む\r\n        for (;;) {\r\n            if (this.check('ここまで')) {\r\n                break;\r\n            }\r\n            if (this.check('eol')) {\r\n                this.get(); // skip EOL\r\n                continue;\r\n            }\r\n            if (this.check2(['エラー', 'ならば'])) {\r\n                this.get(); // skip エラー\r\n                this.get(); // skip ならば\r\n                errorBlock = this.yBlock();\r\n                break;\r\n            }\r\n            let block = null;\r\n            // 「先に」「次に」句はブロック宣言 #717 (ただしブロック以外も可能)\r\n            if (this.check('先に') || this.check('次に')) {\r\n                const tugini = this.get(); // skip 先に | 次に\r\n                if (this.check('comma')) {\r\n                    this.get();\r\n                }\r\n                if (this.check('eol')) { // block\r\n                    block = this.yBlock();\r\n                    if (!this.check('ここまで')) {\r\n                        let tuginiType = '次に';\r\n                        if (tugini != null) {\r\n                            tuginiType = tugini.type;\r\n                        }\r\n                        throw NakoSyntaxError.fromNode(`『${tuginiType}』...『ここまで』を対応させてください。`, map);\r\n                    }\r\n                    this.get(); // skip 'ここまで'\r\n                }\r\n                else { // line\r\n                    block = this.ySentence();\r\n                }\r\n            }\r\n            else {\r\n                block = this.ySentence();\r\n            }\r\n            // add block\r\n            if (block != null) {\r\n                blocks.push(block);\r\n            }\r\n        }\r\n        if (!this.check('ここまで')) {\r\n            console.log(blocks, this.peek());\r\n            throw NakoSyntaxError.fromNode('『逐次実行』...『ここまで』を対応させてください。', tikuji);\r\n        }\r\n        this.get(); // skip 'ここまで'\r\n        return {\r\n            type: 'tikuji',\r\n            blocks: blocks || [],\r\n            errorBlock: errorBlock || [],\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    /**\r\n     * 1つ目の値を与え、その後に続く計算式を取得し、優先規則に沿って並び替えして戻す\r\n     * @param {Ast} firstValue\r\n     */\r\n    yGetArgOperator(firstValue) {\r\n        const args = [firstValue];\r\n        while (!this.isEOF()) {\r\n            // 演算子がある？\r\n            let op = this.peek();\r\n            if (op && opPriority[op.type]) {\r\n                op = this.getCur();\r\n                args.push(op); // Token to Ast\r\n                // 演算子後の値を取得\r\n                const v = this.yValue();\r\n                if (v === null) {\r\n                    throw NakoSyntaxError.fromNode(`計算式で演算子『${op.value}』後に値がありません`, firstValue);\r\n                }\r\n                args.push(v);\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        if (args.length === 0) {\r\n            return null;\r\n        }\r\n        if (args.length === 1) {\r\n            return args[0];\r\n        }\r\n        return this.infixToAST(args);\r\n    }\r\n    yGetArg() {\r\n        // 値を一つ読む\r\n        const value1 = this.yValue();\r\n        if (value1 === null) {\r\n            return null;\r\n        }\r\n        // 計算式がある場合を考慮\r\n        return this.yGetArgOperator(value1);\r\n    }\r\n    infixToPolish(list) {\r\n        // 中間記法から逆ポーランドに変換\r\n        const priority = (t) => {\r\n            if (opPriority[t.type]) {\r\n                return opPriority[t.type];\r\n            }\r\n            return 10;\r\n        };\r\n        const stack = [];\r\n        const polish = [];\r\n        while (list.length > 0) {\r\n            const t = list.shift();\r\n            if (!t) {\r\n                break;\r\n            }\r\n            while (stack.length > 0) { // 優先順位を見て移動する\r\n                const sTop = stack[stack.length - 1];\r\n                if (priority(t) > priority(sTop)) {\r\n                    break;\r\n                }\r\n                const tpop = stack.pop();\r\n                if (!tpop) {\r\n                    this.logger.error('計算式に間違いがあります。', t);\r\n                    break;\r\n                }\r\n                polish.push(tpop);\r\n            }\r\n            stack.push(t);\r\n        }\r\n        // 残った要素を積み替える\r\n        while (stack.length > 0) {\r\n            const t = stack.pop();\r\n            if (t) {\r\n                polish.push(t);\r\n            }\r\n        }\r\n        return polish;\r\n    }\r\n    /** @returns {Ast | null} */\r\n    infixToAST(list) {\r\n        if (list.length === 0) {\r\n            return null;\r\n        }\r\n        // 逆ポーランドを構文木に\r\n        const josi = list[list.length - 1].josi;\r\n        const node = list[list.length - 1];\r\n        const polish = this.infixToPolish(list);\r\n        /** @type {Ast[]} */\r\n        const stack = [];\r\n        for (const t of polish) {\r\n            if (!opPriority[t.type]) { // 演算子ではない\r\n                stack.push(t);\r\n                continue;\r\n            }\r\n            const b = stack.pop();\r\n            const a = stack.pop();\r\n            if (a === undefined || b === undefined) {\r\n                this.logger.debug('--- 計算式(逆ポーランド) ---\\n' + JSON.stringify(polish));\r\n                throw NakoSyntaxError.fromNode('計算式でエラー', node);\r\n            }\r\n            /** @type {Ast} */\r\n            const op = {\r\n                type: 'op',\r\n                operator: t.type,\r\n                left: a,\r\n                right: b,\r\n                josi,\r\n                startOffset: a.startOffset,\r\n                endOffset: a.endOffset,\r\n                line: a.line,\r\n                column: a.column,\r\n                file: a.file\r\n            };\r\n            stack.push(op);\r\n        }\r\n        const ans = stack.pop();\r\n        if (!ans) {\r\n            return null;\r\n        }\r\n        return ans;\r\n    }\r\n    yGetArgParen(y) {\r\n        let isClose = false;\r\n        const si = this.stack.length;\r\n        while (!this.isEOF()) {\r\n            if (this.check(')')) {\r\n                isClose = true;\r\n                break;\r\n            }\r\n            const v = this.yGetArg();\r\n            if (v) {\r\n                this.pushStack(v);\r\n                if (this.check('comma')) {\r\n                    this.get();\r\n                }\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        if (!isClose) {\r\n            throw NakoSyntaxError.fromNode(`C風関数『${y[0].value}』でカッコが閉じていません`, y[0]);\r\n        }\r\n        const a = [];\r\n        while (si < this.stack.length) {\r\n            const v = this.popStack();\r\n            if (v) {\r\n                a.unshift(v);\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yRepeatTime() {\r\n        const map = this.peekSourceMap();\r\n        if (!this.check('回')) {\r\n            return null;\r\n        }\r\n        this.get(); // skip '回'\r\n        if (this.check('comma')) {\r\n            this.get();\r\n        } // skip comma\r\n        if (this.check('繰返')) {\r\n            this.get();\r\n        } // skip 'N回、繰り返す' (#924)\r\n        let num = this.popStack([]);\r\n        let multiline = false;\r\n        let block = null;\r\n        if (num === null) {\r\n            num = { type: 'word', value: 'それ', josi: '', ...map, end: this.peekSourceMap() };\r\n        }\r\n        if (this.check('comma')) {\r\n            this.get();\r\n        }\r\n        if (this.check('ここから')) {\r\n            this.get();\r\n            multiline = true;\r\n        }\r\n        else if (this.check('eol')) {\r\n            multiline = true;\r\n        }\r\n        if (multiline) { // multiline\r\n            block = this.yBlock();\r\n            if (this.check('ここまで')) {\r\n                this.get();\r\n            }\r\n            else {\r\n                throw NakoSyntaxError.fromNode('『ここまで』がありません。『回』...『ここまで』を対応させてください。', map);\r\n            }\r\n        }\r\n        else {\r\n            // singleline\r\n            block = this.ySentence();\r\n        }\r\n        return {\r\n            type: 'repeat_times',\r\n            value: num,\r\n            block: block || [],\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yWhile() {\r\n        const map = this.peekSourceMap();\r\n        if (!this.check('間')) {\r\n            return null;\r\n        }\r\n        this.get(); // skip '間'\r\n        while (this.check('comma')) {\r\n            this.get();\r\n        } // skip ','\r\n        if (this.check('繰返')) {\r\n            this.get();\r\n        } // skip '繰り返す' #927\r\n        const cond = this.popStack();\r\n        if (cond === null) {\r\n            throw NakoSyntaxError.fromNode('『間』で条件がありません。', map);\r\n        }\r\n        if (this.check('comma')) {\r\n            this.get();\r\n        }\r\n        if (!this.checkTypes(['ここから', 'eol'])) {\r\n            throw NakoSyntaxError.fromNode('『間』の直後は改行が必要です', map);\r\n        }\r\n        const block = this.yBlock();\r\n        if (this.check('ここまで')) {\r\n            this.get();\r\n        }\r\n        return {\r\n            type: 'while',\r\n            cond,\r\n            block,\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yAtohantei() {\r\n        const map = this.peekSourceMap();\r\n        if (this.check('後判定')) {\r\n            this.get();\r\n        } // skip 後判定\r\n        if (this.check('繰返')) {\r\n            this.get();\r\n        } // skip 繰り返す\r\n        if (this.check('ここから')) {\r\n            this.get();\r\n        }\r\n        const block = this.yBlock();\r\n        if (this.check('ここまで')) {\r\n            this.get();\r\n        }\r\n        if (this.check('comma')) {\r\n            this.get();\r\n        }\r\n        let cond = this.yGetArg(); // 条件\r\n        let bUntil = false;\r\n        const t = this.peek();\r\n        if (t && t.value === 'なる' && (t.josi === 'まで' || t.josi === 'までの')) {\r\n            this.get(); // skip なるまで\r\n            bUntil = true;\r\n        }\r\n        if (this.check('間')) {\r\n            this.get();\r\n        } // skip 間\r\n        if (bUntil) { // 条件を反転する\r\n            cond = {\r\n                type: 'not',\r\n                value: cond,\r\n                josi: '',\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        return {\r\n            type: 'atohantei',\r\n            cond: cond || [],\r\n            block,\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yFor() {\r\n        let flagDown = true; // AからBまでの時、A>=Bを許容するかどうか\r\n        const map = this.peekSourceMap();\r\n        if (this.check('繰返') || this.check('増繰返') || this.check('減繰返')) {\r\n            // pass\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n        const kurikaesu = this.getCur(); // skip 繰り返す\r\n        // スタックに(増や|減ら)してがある？\r\n        const incdec = this.stack.pop();\r\n        if (incdec) {\r\n            if (incdec.type === 'word' && (incdec.value === '増' || incdec.value === '減')) {\r\n                if (incdec.value === '増') {\r\n                    flagDown = false;\r\n                }\r\n                kurikaesu.type = incdec.value + kurikaesu.type; // typeを増繰返 | 減繰返 に変換\r\n            }\r\n            else {\r\n                // 普通の繰り返しの場合\r\n                this.stack.push(incdec); // 違ったので改めて追加\r\n            }\r\n        }\r\n        let vInc = null;\r\n        if (kurikaesu.type === '増繰返' || kurikaesu.type === '減繰返') {\r\n            vInc = this.popStack(['ずつ']);\r\n            if (kurikaesu.type === '増繰返') {\r\n                flagDown = false;\r\n            }\r\n        }\r\n        const vTo = this.popStack(['まで']);\r\n        const vFrom = this.popStack(['から']);\r\n        const word = this.popStack(['を', 'で']);\r\n        if (vFrom === null || vTo === null) {\r\n            throw NakoSyntaxError.fromNode('『繰り返す』文でAからBまでの指定がありません。', kurikaesu);\r\n        }\r\n        if (this.check('comma')) {\r\n            this.get();\r\n        } // skip comma\r\n        let multiline = false;\r\n        if (this.check('ここから')) {\r\n            multiline = true;\r\n            this.get();\r\n        }\r\n        else if (this.check('eol')) {\r\n            multiline = true;\r\n            this.get();\r\n        }\r\n        let block = null;\r\n        if (multiline) {\r\n            block = this.yBlock();\r\n            if (this.check('ここまで')) {\r\n                this.get();\r\n            }\r\n            else {\r\n                throw NakoSyntaxError.fromNode('『ここまで』がありません。『繰り返す』...『ここまで』を対応させてください。', map);\r\n            }\r\n        }\r\n        else {\r\n            block = this.ySentence();\r\n        }\r\n        return {\r\n            type: 'for',\r\n            from: vFrom,\r\n            to: vTo,\r\n            inc: vInc,\r\n            flagDown,\r\n            word,\r\n            block: block || [],\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yReturn() {\r\n        const map = this.peekSourceMap();\r\n        if (!this.check('戻る')) {\r\n            return null;\r\n        }\r\n        this.get(); // skip '戻る'\r\n        const v = this.popStack(['で', 'を']);\r\n        if (this.stack.length > 0) {\r\n            throw NakoSyntaxError.fromNode('『戻』文の直前に未解決の引数があります。『(式)を戻す』のように式をカッコで括ってください。', map);\r\n        }\r\n        return {\r\n            type: 'return',\r\n            value: v,\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yForEach() {\r\n        const map = this.peekSourceMap();\r\n        if (!this.check('反復')) {\r\n            return null;\r\n        }\r\n        this.get(); // skip '反復'\r\n        while (this.check('comma')) {\r\n            this.get();\r\n        } // skip ','\r\n        const target = this.popStack(['を']);\r\n        const name = this.popStack(['で']);\r\n        let block = null;\r\n        let multiline = false;\r\n        if (this.check('ここから')) {\r\n            multiline = true;\r\n            this.get();\r\n        }\r\n        else if (this.check('eol')) {\r\n            multiline = true;\r\n        }\r\n        if (multiline) {\r\n            block = this.yBlock();\r\n            if (this.check('ここまで')) {\r\n                this.get();\r\n            }\r\n        }\r\n        else {\r\n            block = this.ySentence();\r\n        }\r\n        return {\r\n            type: 'foreach',\r\n            name,\r\n            target,\r\n            block: block || [],\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    /** 条件分岐構文 */\r\n    ySwitch() {\r\n        const map = this.peekSourceMap();\r\n        if (!this.check('条件分岐')) {\r\n            return null;\r\n        }\r\n        const joukenbunki = this.get(); // skip '条件分岐'\r\n        if (!joukenbunki) {\r\n            return null;\r\n        }\r\n        const eol = this.get(); // skip 'eol'\r\n        if (!eol) {\r\n            return null;\r\n        }\r\n        const value = this.popStack(['で']);\r\n        if (!value) {\r\n            throw NakoSyntaxError.fromNode('『(値)で条件分岐』のように記述してください。', joukenbunki);\r\n        }\r\n        if (eol.type !== 'eol') {\r\n            throw NakoSyntaxError.fromNode('『条件分岐』の直後は改行してください。', joukenbunki);\r\n        }\r\n        let isDefaultClause = false; // 「違えば」内かどうか\r\n        let skippedKokomade = false;\r\n        const cases = [];\r\n        while (!this.isEOF()) {\r\n            if (this.check('ここまで')) {\r\n                if (skippedKokomade) {\r\n                    throw NakoSyntaxError.fromNode('『条件分岐』は『(条件)ならば〜ここまで』と記述してください。', joukenbunki);\r\n                }\r\n                this.get(); // skip ここまで\r\n                break;\r\n            }\r\n            if (this.check('eol')) {\r\n                this.get();\r\n                continue;\r\n            }\r\n            if (isDefaultClause) {\r\n                throw NakoSyntaxError.fromNode('『条件分岐』で『違えば〜ここまで』の後に処理を続けることは出来ません。', joukenbunki);\r\n            }\r\n            // 違えば？\r\n            let cond = null;\r\n            const condToken = this.peek();\r\n            if (condToken && condToken.type === '違えば') {\r\n                // 違えば\r\n                skippedKokomade = false;\r\n                isDefaultClause = true;\r\n                cond = this.get(); // skip 違えば // Token to Ast\r\n                if (this.check('comma')) {\r\n                    this.get();\r\n                } // skip ','\r\n            }\r\n            else {\r\n                // ＊＊＊ならば\r\n                if (skippedKokomade) {\r\n                    throw NakoSyntaxError.fromNode('『条件分岐』は『(条件)ならば〜ここまで』と記述してください。', joukenbunki);\r\n                }\r\n                // 「＊＊ならば」を得る\r\n                cond = this.yValue();\r\n                if (!cond) {\r\n                    throw NakoSyntaxError.fromNode('『条件分岐』は『(条件)ならば〜ここまで』と記述してください。', joukenbunki);\r\n                }\r\n                const naraba = this.get(); // skip ならば\r\n                if (!naraba || naraba.type !== 'ならば') {\r\n                    throw NakoSyntaxError.fromNode('『条件分岐』で条件は＊＊ならばと記述してください。', joukenbunki);\r\n                }\r\n                if (this.check('comma')) {\r\n                    this.get();\r\n                } // skip ','\r\n            }\r\n            // 条件にあったときに実行すること\r\n            const condBlock = this.yBlock();\r\n            const kokomade = this.peek();\r\n            if (kokomade && kokomade.type === 'ここまで') {\r\n                this.get(); // skip ここまで\r\n            }\r\n            else {\r\n                if (isDefaultClause) {\r\n                    throw NakoSyntaxError.fromNode('『条件分岐』は『違えば〜ここまで』と記述してください。', joukenbunki);\r\n                }\r\n                // 次が「違えば」の場合に限り、「もし〜ここまで」の「ここまで」を省略できる\r\n                skippedKokomade = true;\r\n            }\r\n            cases.push([cond, condBlock]);\r\n        }\r\n        return {\r\n            type: 'switch',\r\n            value,\r\n            cases: cases || [],\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    /** 無名関数 */\r\n    yMumeiFunc() {\r\n        const map = this.peekSourceMap();\r\n        if (!this.check('def_func')) {\r\n            return null;\r\n        }\r\n        const def = this.get();\r\n        if (!def) {\r\n            return null;\r\n        }\r\n        let args = [];\r\n        // 「,」を飛ばす\r\n        if (this.check('comma')) {\r\n            this.get();\r\n        }\r\n        // 関数の引数定義は省略できる\r\n        if (this.check('(')) {\r\n            args = this.yDefFuncReadArgs() || [];\r\n        }\r\n        // 「,」を飛ばす\r\n        if (this.check('comma')) {\r\n            this.get();\r\n        }\r\n        // ブロックを読む\r\n        this.funcLevel++;\r\n        this.saveStack();\r\n        const block = this.yBlock();\r\n        // 末尾の「ここまで」をチェック - もしなければエラーにする #1045\r\n        if (!this.check('ここまで')) {\r\n            throw NakoSyntaxError.fromNode('『ここまで』がありません。『には』構文か無名関数の末尾に『ここまで』が必要です。', map);\r\n        }\r\n        this.get(); // skip ここまで\r\n        this.loadStack();\r\n        this.funcLevel--;\r\n        return {\r\n            type: 'func_obj',\r\n            args,\r\n            block,\r\n            meta: def.meta,\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    /** 代入構文 */\r\n    yDainyu() {\r\n        const map = this.peekSourceMap();\r\n        const dainyu = this.get(); // 代入\r\n        if (dainyu === null) {\r\n            return null;\r\n        }\r\n        const value = this.popStack(['を']);\r\n        const word = this.popStack(['へ', 'に']);\r\n        if (!word || (word.type !== 'word' && word.type !== 'func' && word.type !== '配列参照')) {\r\n            throw NakoSyntaxError.fromNode('代入文で代入先の変数が見当たりません。『(変数名)に(値)を代入』のように使います。', dainyu);\r\n        }\r\n        // 配列への代入\r\n        if (word.type === '配列参照') {\r\n            return {\r\n                type: 'let_array',\r\n                name: word.name,\r\n                index: word.index,\r\n                value,\r\n                josi: '',\r\n                checkInit: this.flagCheckArrayInit,\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // 一般的な変数への代入\r\n        const word2 = this.getVarName(word);\r\n        return {\r\n            type: 'let',\r\n            name: word2,\r\n            value,\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    /** 定める構文 */\r\n    ySadameru() {\r\n        const map = this.peekSourceMap();\r\n        const sadameru = this.get(); // 定める\r\n        if (sadameru === null) {\r\n            return null;\r\n        }\r\n        const word = this.popStack(['を']);\r\n        const value = this.popStack(['へ', 'に', 'と']);\r\n        if (!word || (word.type !== 'word' && word.type !== 'func' && word.type !== '配列参照')) {\r\n            throw NakoSyntaxError.fromNode('『定める』文で定数が見当たりません。『(定数名)を(値)に定める』のように使います。', sadameru);\r\n        }\r\n        // 変数を生成する\r\n        const nameToken = this.createVar(word, true);\r\n        return {\r\n            type: 'def_local_var',\r\n            name: nameToken,\r\n            vartype: '定数',\r\n            value,\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    yIncDec() {\r\n        const map = this.peekSourceMap();\r\n        const action = this.get(); // (増やす|減らす)\r\n        if (action === null) {\r\n            return null;\r\n        }\r\n        // 『Nずつ増やして繰り返す』文か？\r\n        if (this.check('繰返')) {\r\n            this.pushStack({ type: 'word', value: action.value, josi: action.josi, ...map, end: this.peekSourceMap() });\r\n            return this.yFor();\r\n        }\r\n        // スタックから引数をポップ\r\n        let value = this.popStack(['だけ', '']);\r\n        if (!value) {\r\n            value = { type: 'number', value: 1, josi: 'だけ', ...map, end: this.peekSourceMap() };\r\n        }\r\n        const word = this.popStack(['を']);\r\n        if (!word || (word.type !== 'word' && word.type !== '配列参照')) {\r\n            throw NakoSyntaxError.fromNode(`『${action.type}』文で定数が見当たりません。『(変数名)を(値)だけ${action.type}』のように使います。`, action);\r\n        }\r\n        // 減らすなら-1かける\r\n        if (action.value === '減') {\r\n            value = { type: 'op', operator: '*', left: value, right: { type: 'number', value: -1, line: action.line }, josi: '', ...map };\r\n        }\r\n        return {\r\n            type: 'inc',\r\n            name: word,\r\n            value,\r\n            josi: action.josi,\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    yCall() {\r\n        if (this.isEOF()) {\r\n            return null;\r\n        }\r\n        // スタックに積んでいく\r\n        while (!this.isEOF()) {\r\n            if (this.check('ここから')) {\r\n                this.get();\r\n            }\r\n            // 代入\r\n            if (this.check('代入')) {\r\n                return this.yDainyu();\r\n            }\r\n            if (this.check('定める')) {\r\n                return this.ySadameru();\r\n            }\r\n            // 制御構文\r\n            if (this.check('回')) {\r\n                return this.yRepeatTime();\r\n            }\r\n            if (this.check('間')) {\r\n                return this.yWhile();\r\n            }\r\n            if (this.check('繰返') || this.check('増繰返') || this.check('減繰返')) {\r\n                return this.yFor();\r\n            }\r\n            if (this.check('反復')) {\r\n                return this.yForEach();\r\n            }\r\n            if (this.check('条件分岐')) {\r\n                return this.ySwitch();\r\n            }\r\n            if (this.check('戻る')) {\r\n                return this.yReturn();\r\n            }\r\n            if (this.check('増') || this.check('減')) {\r\n                return this.yIncDec();\r\n            }\r\n            // C言語風関数\r\n            if (this.check2([['func', 'word'], '('])) { // C言語風\r\n                const cur = this.peek();\r\n                if (cur && cur.josi === '') {\r\n                    const t = this.yValue(); // yValueにてC言語風呼び出しをパース\r\n                    if (t) {\r\n                        const josi = t.josi || '';\r\n                        if (t.type === 'func' && (t.josi === '' || RenbunJosi.indexOf(josi) >= 0)) {\r\n                            t.josi = '';\r\n                            return t; // 関数なら値とする\r\n                        }\r\n                        this.pushStack(t);\r\n                    }\r\n                    if (this.check('comma')) {\r\n                        this.get();\r\n                    }\r\n                    continue;\r\n                }\r\n            }\r\n            // なでしこ式関数\r\n            if (this.check('func')) {\r\n                const r = this.yCallFunc();\r\n                if (r === null) {\r\n                    continue;\r\n                }\r\n                // 「〜する間」の形ならスタックに積む。\r\n                if (this.check('間')) {\r\n                    this.pushStack(r);\r\n                    continue;\r\n                }\r\n                // 関数呼び出しの直後に、四則演算があるか?\r\n                if (!this.checkTypes(operatorList)) {\r\n                    return r;\r\n                } // なければ関数呼び出しを戻す\r\n                // 四則演算があった場合、計算してスタックに載せる\r\n                this.pushStack(this.yGetArgOperator(r));\r\n                continue;\r\n            }\r\n            // 値のとき → スタックに載せる\r\n            const t = this.yGetArg();\r\n            if (t) {\r\n                this.pushStack(t);\r\n                continue;\r\n            }\r\n            break;\r\n        } // end of while\r\n        // 助詞が余ってしまった場合\r\n        if (this.stack.length > 0) {\r\n            this.logger.debug('--- stack dump ---\\n' + JSON.stringify(this.stack, null, 2) + '\\npeek: ' + JSON.stringify(this.peek(), null, 2));\r\n            let msgDebug = `不完全な文です。${this.stack.map((n) => this.nodeToStr(n, { depth: 0 }, true)).join('、')}が解決していません。`;\r\n            let msg = `不完全な文です。${this.stack.map((n) => this.nodeToStr(n, { depth: 0 }, false)).join('、')}が解決していません。`;\r\n            // 各ノードについて、更に詳細な情報があるなら表示\r\n            for (const n of this.stack) {\r\n                const d0 = this.nodeToStr(n, { depth: 0 }, false);\r\n                const d1 = this.nodeToStr(n, { depth: 1 }, false);\r\n                if (d0 !== d1) {\r\n                    msgDebug += `${this.nodeToStr(n, { depth: 0 }, true)}は${this.nodeToStr(n, { depth: 1 }, true)}として使われています。`;\r\n                    msg += `${d0}は${d1}として使われています。`;\r\n                }\r\n            }\r\n            const first = this.stack[0];\r\n            const last = this.stack[this.stack.length - 1];\r\n            this.logger.debug(msgDebug, first);\r\n            throw NakoSyntaxError.fromNode(msg, first, last);\r\n        }\r\n        return this.popStack([]);\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yCallFunc() {\r\n        const map = this.peekSourceMap();\r\n        const t = this.get();\r\n        if (!t) {\r\n            return null;\r\n        }\r\n        const f = t.meta;\r\n        const funcName = t.value;\r\n        // (関数)には ... 構文 ... https://github.com/kujirahand/nadesiko3/issues/66\r\n        let funcObj = null;\r\n        if (t.josi === 'には') {\r\n            try {\r\n                funcObj = this.yMumeiFunc();\r\n            }\r\n            catch (err) {\r\n                throw NakoSyntaxError.fromNode(`『${t.value}には...』で無名関数の定義で以下の間違いがあります。\\n${err.message}`, t);\r\n            }\r\n            if (funcObj === null) {\r\n                throw NakoSyntaxError.fromNode('『Fには』構文がありましたが、関数定義が見当たりません。', t);\r\n            }\r\n        }\r\n        if (!f || typeof f.josi === 'undefined') {\r\n            throw NakoSyntaxError.fromNode('関数の定義でエラー。', t);\r\n        }\r\n        // 最近使った関数を記録\r\n        this.recentlyCalledFunc.push({ name: funcName, ...f });\r\n        // 呼び出す関数が非同期呼び出しが必要(asyncFn)ならマーク\r\n        if (f && f.asyncFn) {\r\n            this.usedAsyncFn = true;\r\n        }\r\n        // 関数の引数を取り出す処理\r\n        const args = [];\r\n        let nullCount = 0;\r\n        let valueCount = 0;\r\n        for (let i = f.josi.length - 1; i >= 0; i--) {\r\n            while (true) {\r\n                // スタックから任意の助詞を持つ値を一つ取り出す、助詞がなければ末尾から得る\r\n                let popArg = this.popStack(f.josi[i]);\r\n                if (popArg !== null) {\r\n                    valueCount++;\r\n                }\r\n                else if (i < f.josi.length - 1 || !f.isVariableJosi) {\r\n                    nullCount++;\r\n                    popArg = funcObj;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n                if (popArg !== null && f.funcPointers !== undefined && f.funcPointers[i] !== null) {\r\n                    if (popArg.type === 'func') { // 引数が関数の参照渡しに該当する場合、typeを『func_pointer』に変更\r\n                        popArg.type = 'func_pointer';\r\n                    }\r\n                    else {\r\n                        const varname = (f.varnames) ? f.varnames[i] : `${i + 1}番目の引数`;\r\n                        throw NakoSyntaxError.fromNode(`関数『${t.value}』の引数『${varname}』には関数オブジェクトが必要です。`, t);\r\n                    }\r\n                }\r\n                args.unshift(popArg);\r\n                if (i < f.josi.length - 1 || !f.isVariableJosi) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // 引数が不足しているとき(つまり、引数にnullがあるとき)、自動的に『変数「それ」』で補完される。\r\n        // ただし、nullが1つだけなら、変数「それ」で補完されるが、2つ以上あるときは、エラーにする\r\n        if (nullCount >= 2 && (valueCount > 0 || t.josi === '' || RenbunJosi.indexOf(t.josi) >= 0)) {\r\n            throw NakoSyntaxError.fromNode(`関数『${t.value}』の引数が不足しています。`, t);\r\n        }\r\n        this.usedFuncs.add(t.value);\r\n        // 関数呼び出しのAstを構築\r\n        const funcNode = {\r\n            type: 'func',\r\n            name: t.value,\r\n            args,\r\n            josi: t.josi,\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n        // 「プラグイン名設定」ならば、そこでスコープを変更することを意味する (#1112)\r\n        if (funcNode.name === 'プラグイン名設定') {\r\n            if (args.length > 0 && args[0]) {\r\n                let fname = '' + args[0].value;\r\n                if (fname === 'メイン') {\r\n                    fname = '' + args[0].file;\r\n                }\r\n                this.namespaceStack.push(this.modName);\r\n                this.modName = NakoLexer.filenameToModName(fname);\r\n                this.modList.push(this.modName);\r\n            }\r\n        }\r\n        else if (funcNode.name === '名前空間ポップ') { // (#1409)\r\n            const space = this.namespaceStack.pop();\r\n            if (space) {\r\n                this.modName = space;\r\n            }\r\n        }\r\n        // 言い切りならそこで一度切る\r\n        if (t.josi === '') {\r\n            return funcNode;\r\n        }\r\n        // 「**して、**」の場合も一度切る\r\n        if (RenbunJosi.indexOf(t.josi) >= 0) {\r\n            funcNode.josi = 'して';\r\n            return funcNode;\r\n        }\r\n        // 続き\r\n        funcNode.meta = f;\r\n        this.pushStack(funcNode);\r\n        return null;\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yLet() {\r\n        const map = this.peekSourceMap();\r\n        // 通常の変数\r\n        if (this.check2(['word', 'eq'])) {\r\n            const word = this.peek();\r\n            let threw = false;\r\n            try {\r\n                if (this.accept(['word', 'eq', this.yCalc]) || this.accept(['word', 'eq', this.ySentence])) {\r\n                    if (this.y[2].type === 'eol') {\r\n                        throw new Error('値が空です。');\r\n                    }\r\n                    if (this.check('comma')) {\r\n                        this.get();\r\n                    } // skip comma (ex) name1=val1, name2=val2\r\n                    const nameToken = this.getVarName(this.y[0]);\r\n                    const valueToken = this.y[2];\r\n                    return {\r\n                        type: 'let',\r\n                        name: nameToken,\r\n                        value: valueToken,\r\n                        ...map,\r\n                        end: this.peekSourceMap()\r\n                    };\r\n                }\r\n                else {\r\n                    threw = true;\r\n                    this.logger.debug(`${this.nodeToStr(word, { depth: 1 }, true)}への代入文で計算式に書き間違いがあります。`, word);\r\n                    throw NakoSyntaxError.fromNode(`${this.nodeToStr(word, { depth: 1 }, false)}への代入文で計算式に書き間違いがあります。`, map);\r\n                }\r\n            }\r\n            catch (err) {\r\n                if (threw) {\r\n                    throw err;\r\n                }\r\n                this.logger.debug(`${this.nodeToStr(word, { depth: 1 }, true)}への代入文で計算式に以下の書き間違いがあります。\\n${err.message}`, word);\r\n                throw NakoSyntaxError.fromNode(`${this.nodeToStr(word, { depth: 1 }, false)}への代入文で計算式に以下の書き間違いがあります。\\n${err.message}`, map);\r\n            }\r\n        }\r\n        // let_array ?\r\n        if (this.check2(['word', '@'])) {\r\n            const la = this.yLetArrayAt(map);\r\n            if (this.check('comma')) {\r\n                this.get();\r\n            } // skip comma (ex) name1=val1, name2=val2\r\n            if (la) {\r\n                la.checkInit = this.flagCheckArrayInit;\r\n                return la;\r\n            }\r\n        }\r\n        if (this.check2(['word', '['])) {\r\n            const lb = this.yLetArrayBracket(map);\r\n            if (this.check('comma')) {\r\n                this.get();\r\n            } // skip comma (ex) name1=val1, name2=val2\r\n            if (lb) {\r\n                lb.checkInit = this.flagCheckArrayInit;\r\n                return lb;\r\n            }\r\n        }\r\n        // ローカル変数定義\r\n        if (this.accept(['word', 'とは'])) {\r\n            const wordToken = this.y[0];\r\n            if (!this.checkTypes(['変数', '定数'])) {\r\n                throw NakoSyntaxError.fromNode('ローカル変数『' + wordToken.value + '』の定義エラー', wordToken);\r\n            }\r\n            const vtype = this.getCur(); // 変数 or 定数\r\n            const word = this.createVar(wordToken, vtype.type === '定数');\r\n            // 初期値がある？\r\n            let value = null;\r\n            if (this.check('eq')) {\r\n                this.get();\r\n                value = this.yCalc();\r\n            }\r\n            if (this.check('comma')) {\r\n                this.get();\r\n            } // skip comma (ex) name1=val1, name2=val2\r\n            return {\r\n                type: 'def_local_var',\r\n                name: word,\r\n                vartype: vtype.type,\r\n                value,\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // ローカル変数定義（その２）\r\n        if (this.accept(['変数', 'word', 'eq', this.yCalc])) {\r\n            const word = this.createVar(this.y[1], false);\r\n            return {\r\n                type: 'def_local_var',\r\n                name: word,\r\n                vartype: '変数',\r\n                value: this.y[3],\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        if (this.accept(['定数', 'word', 'eq', this.yCalc])) {\r\n            const word = this.createVar(this.y[1], true);\r\n            return {\r\n                type: 'def_local_var',\r\n                name: word,\r\n                vartype: '定数',\r\n                value: this.y[3],\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // 複数定数への代入 #563\r\n        if (this.accept(['定数', this.yJSONArray, 'eq', this.yCalc])) {\r\n            const names = this.y[1];\r\n            // check array\r\n            if (names && names.value instanceof Array) {\r\n                for (const i in names.value) {\r\n                    if (names.value[i].type !== 'word') {\r\n                        throw NakoSyntaxError.fromNode(`複数定数の代入文${i + 1}番目でエラー。『定数[A,B,C]=[1,2,3]』の書式で記述してください。`, this.y[0]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                throw NakoSyntaxError.fromNode('複数定数の代入文でエラー。『定数[A,B,C]=[1,2,3]』の書式で記述してください。', this.y[0]);\r\n            }\r\n            names.value = this.createVarList(names.value, true);\r\n            return {\r\n                type: 'def_local_varlist',\r\n                names: names.value,\r\n                vartype: '定数',\r\n                value: this.y[3],\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // 複数変数への代入 #563\r\n        if (this.accept(['変数', this.yJSONArray, 'eq', this.yCalc])) {\r\n            const names = this.y[1];\r\n            // check array\r\n            if (names && names.value instanceof Array) {\r\n                for (const i in names.value) {\r\n                    if (names.value[i].type !== 'word') {\r\n                        throw NakoSyntaxError.fromNode(`複数変数の代入文${i + 1}番目でエラー。『変数[A,B,C]=[1,2,3]』の書式で記述してください。`, this.y[0]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                throw NakoSyntaxError.fromNode('複数変数の代入文でエラー。『変数[A,B,C]=[1,2,3]』の書式で記述してください。', this.y[0]);\r\n            }\r\n            names.value = this.createVarList(names.value, false);\r\n            return {\r\n                type: 'def_local_varlist',\r\n                names: names.value,\r\n                vartype: '変数',\r\n                value: this.y[3],\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // 複数変数への代入 #563\r\n        if (this.check2(['word', 'comma', 'word'])) {\r\n            // 2 word\r\n            if (this.accept(['word', 'comma', 'word', 'eq', this.yCalc])) {\r\n                let names = [this.y[0], this.y[2]];\r\n                names = this.createVarList(names, false);\r\n                return {\r\n                    type: 'def_local_varlist',\r\n                    names,\r\n                    vartype: '変数',\r\n                    value: this.y[4],\r\n                    ...map,\r\n                    end: this.peekSourceMap()\r\n                };\r\n            }\r\n            // 3 word\r\n            if (this.accept(['word', 'comma', 'word', 'comma', 'word', 'eq', this.yCalc])) {\r\n                let names = [this.y[0], this.y[2], this.y[4]];\r\n                names = this.createVarList(names, false);\r\n                return {\r\n                    type: 'def_local_varlist',\r\n                    names,\r\n                    vartype: '変数',\r\n                    value: this.y[6],\r\n                    ...map,\r\n                    end: this.peekSourceMap()\r\n                };\r\n            }\r\n            // 4 word\r\n            if (this.accept(['word', 'comma', 'word', 'comma', 'word', 'comma', 'word', 'eq', this.yCalc])) {\r\n                let names = [this.y[0], this.y[2], this.y[4], this.y[6]];\r\n                names = this.createVarList(names, false);\r\n                return {\r\n                    type: 'def_local_varlist',\r\n                    names,\r\n                    vartype: '変数',\r\n                    value: this.y[8],\r\n                    ...map,\r\n                    end: this.peekSourceMap()\r\n                };\r\n            }\r\n            // 5 word\r\n            if (this.accept(['word', 'comma', 'word', 'comma', 'word', 'comma', 'word', 'comma', 'word', 'eq', this.yCalc])) {\r\n                let names = [this.y[0], this.y[2], this.y[4], this.y[6], this.y[8]];\r\n                names = this.createVarList(names, false);\r\n                return {\r\n                    type: 'def_local_varlist',\r\n                    names,\r\n                    vartype: '変数',\r\n                    value: this.y[10],\r\n                    ...map,\r\n                    end: this.peekSourceMap()\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 配列のインデックスが1から始まる場合を考慮するか\r\n     * @param {Ast} node\r\n     * @returns\r\n     */\r\n    checkArrayIndex(node) {\r\n        // 配列が0から始まるのであればそのまま返す\r\n        if (this.arrayIndexFrom === 0) {\r\n            return node;\r\n        }\r\n        // 配列が1から始まるのであれば演算を加えて返す\r\n        return {\r\n            ...node,\r\n            'type': 'op',\r\n            'operator': '-',\r\n            'left': node,\r\n            'right': {\r\n                ...node,\r\n                'type': 'number',\r\n                'value': this.arrayIndexFrom\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * 配列のインデックスを逆順にするのを考慮するか\r\n     * @param {Ast[]| null} ary\r\n     */\r\n    checkArrayReverse(ary) {\r\n        if (!ary) {\r\n            return [];\r\n        }\r\n        if (!this.flagReverseArrayIndex) {\r\n            return ary;\r\n        }\r\n        // 二次元以上の配列変数のアクセスを[y][x]ではなく[x][y]と順序を変更する\r\n        if (ary.length <= 1) {\r\n            return ary;\r\n        }\r\n        return ary.reverse();\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yLetArrayAt(map) {\r\n        // 一次元配列\r\n        if (this.accept(['word', '@', this.yValue, 'eq', this.yCalc])) {\r\n            return {\r\n                type: 'let_array',\r\n                name: this.getVarName(this.y[0]),\r\n                index: [this.checkArrayIndex(this.y[2])],\r\n                value: this.y[4],\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // 二次元配列\r\n        if (this.accept(['word', '@', this.yValue, '@', this.yValue, 'eq', this.yCalc])) {\r\n            return {\r\n                type: 'let_array',\r\n                name: this.getVarName(this.y[0]),\r\n                index: this.checkArrayReverse([this.checkArrayIndex(this.y[2]), this.checkArrayIndex(this.y[4])]),\r\n                value: this.y[6],\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // 三次元配列\r\n        if (this.accept(['word', '@', this.yValue, '@', this.yValue, '@', this.yValue, 'eq', this.yCalc])) {\r\n            return {\r\n                type: 'let_array',\r\n                name: this.getVarName(this.y[0]),\r\n                index: this.checkArrayReverse([this.checkArrayIndex(this.y[2]), this.checkArrayIndex(this.y[4]), this.checkArrayIndex(this.y[6])]),\r\n                value: this.y[8],\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // 二次元配列(カンマ指定)\r\n        if (this.accept(['word', '@', this.yValue, 'comma', this.yValue, 'eq', this.yCalc])) {\r\n            return {\r\n                type: 'let_array',\r\n                name: this.getVarName(this.y[0]),\r\n                index: this.checkArrayReverse([this.checkArrayIndex(this.y[2]), this.checkArrayIndex(this.y[4])]),\r\n                value: this.y[6],\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // 三次元配列(カンマ指定)\r\n        if (this.accept(['word', '@', this.yValue, 'comma', this.yValue, 'comma', this.yValue, 'eq', this.yCalc])) {\r\n            return {\r\n                type: 'let_array',\r\n                name: this.getVarName(this.y[0]),\r\n                index: this.checkArrayReverse([this.checkArrayIndex(this.y[2]), this.checkArrayIndex(this.y[4]), this.checkArrayIndex(this.y[6])]),\r\n                value: this.y[8],\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yLetArrayBracket(map) {\r\n        // 一次元配列\r\n        if (this.accept(['word', '[', this.yCalc, ']', 'eq', this.yCalc])) {\r\n            return {\r\n                type: 'let_array',\r\n                name: this.getVarName(this.y[0]),\r\n                index: [this.checkArrayIndex(this.y[2])],\r\n                value: this.y[5],\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // 二次元配列\r\n        if (this.accept(['word', '[', this.yCalc, ']', '[', this.yCalc, ']', 'eq', this.yCalc])) {\r\n            return {\r\n                type: 'let_array',\r\n                name: this.getVarName(this.y[0]),\r\n                index: this.checkArrayReverse([this.checkArrayIndex(this.y[2]), this.checkArrayIndex(this.y[5])]),\r\n                value: this.y[8],\r\n                tag: '2',\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        if (this.accept(['word', '[', this.yCalc, 'comma', this.yCalc, ']', 'eq', this.yCalc])) {\r\n            return {\r\n                type: 'let_array',\r\n                name: this.getVarName(this.y[0]),\r\n                index: this.checkArrayReverse([this.checkArrayIndex(this.y[2]), this.checkArrayIndex(this.y[4])]),\r\n                value: this.y[7],\r\n                tag: '2',\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // 三次元配列\r\n        if (this.accept(['word', '[', this.yCalc, ']', '[', this.yCalc, ']', '[', this.yCalc, ']', 'eq', this.yCalc])) {\r\n            return {\r\n                type: 'let_array',\r\n                name: this.getVarName(this.y[0]),\r\n                index: this.checkArrayReverse([this.checkArrayIndex(this.y[2]), this.checkArrayIndex(this.y[5]), this.checkArrayIndex(this.y[8])]),\r\n                value: this.y[11],\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        if (this.accept(['word', '[', this.yCalc, 'comma', this.yCalc, 'comma', this.yCalc, ']', 'eq', this.yCalc])) {\r\n            return {\r\n                type: 'let_array',\r\n                name: this.getVarName(this.y[0]),\r\n                index: this.checkArrayReverse([this.checkArrayIndex(this.y[2]), this.checkArrayIndex(this.y[4]), this.checkArrayIndex(this.y[6])]),\r\n                value: this.y[9],\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yCalc() {\r\n        const map = this.peekSourceMap();\r\n        if (this.check('eol')) {\r\n            return null;\r\n        }\r\n        // 値を一つ読む\r\n        const t = this.yGetArg();\r\n        if (!t) {\r\n            return null;\r\n        }\r\n        // 助詞がある？ つまり、関数呼び出しがある？\r\n        if (t.josi === '') {\r\n            return t;\r\n        } // 値だけの場合\r\n        // 関数の呼び出しがあるなら、スタックに載せて関数読み出しを呼ぶ\r\n        this.pushStack(t);\r\n        const t1 = this.yCall();\r\n        if (!t1) {\r\n            return this.popStack();\r\n        }\r\n        // それが連文か確認\r\n        if (RenbunJosi.indexOf(t1.josi || '') < 0) {\r\n            return t1;\r\n        } // 連文ではない\r\n        // 連文なら右側を読んで左側とくっつける\r\n        const t2 = this.yCalc();\r\n        if (!t2) {\r\n            return t1;\r\n        }\r\n        return {\r\n            type: 'renbun',\r\n            left: t1,\r\n            right: t2,\r\n            josi: t2.josi,\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yValueKakko() {\r\n        if (!this.check('(')) {\r\n            return null;\r\n        }\r\n        const t = this.get(); // skip '('\r\n        if (!t) {\r\n            throw new Error('[System Error] check したのに get できない');\r\n        }\r\n        this.saveStack();\r\n        const v = this.yCalc() || this.ySentence();\r\n        if (v === null) {\r\n            const v2 = this.get();\r\n            this.logger.debug('(...)の解析エラー。' + this.nodeToStr(v2, { depth: 1 }, true) + 'の近く', t);\r\n            throw NakoSyntaxError.fromNode('(...)の解析エラー。' + this.nodeToStr(v2, { depth: 1 }, false) + 'の近く', t);\r\n        }\r\n        if (!this.check(')')) {\r\n            this.logger.debug('(...)の解析エラー。' + this.nodeToStr(v, { depth: 1 }, true) + 'の近く', t);\r\n            throw NakoSyntaxError.fromNode('(...)の解析エラー。' + this.nodeToStr(v, { depth: 1 }, false) + 'の近く', t);\r\n        }\r\n        const closeParent = this.get(); // skip ')'\r\n        this.loadStack();\r\n        if (closeParent) {\r\n            v.josi = closeParent.josi;\r\n        }\r\n        return v;\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yValue() {\r\n        const map = this.peekSourceMap();\r\n        // カンマなら飛ばす #877\r\n        if (this.check('comma')) {\r\n            this.get();\r\n        }\r\n        // プリミティブな値\r\n        if (this.checkTypes(['number', 'string'])) {\r\n            return this.getCur();\r\n        } // Token To Ast\r\n        // 丸括弧\r\n        if (this.check('(')) {\r\n            return this.yValueKakko();\r\n        }\r\n        // マイナス記号\r\n        if (this.check2(['-', 'number']) || this.check2(['-', 'word']) || this.check2(['-', 'func'])) {\r\n            const m = this.get(); // skip '-'\r\n            const v = this.yValue();\r\n            const josi = (v && v.josi) ? v.josi : '';\r\n            const line = (m && m.line) ? m.line : 0;\r\n            return {\r\n                type: 'op',\r\n                operator: '*',\r\n                left: { type: 'number', value: -1, line },\r\n                right: v || [],\r\n                josi,\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // NOT\r\n        if (this.check('not')) {\r\n            this.get(); // skip '!'\r\n            const v = this.yValue();\r\n            const josi = (v && v.josi) ? v.josi : '';\r\n            return {\r\n                type: 'not',\r\n                value: v,\r\n                josi,\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // JSON object\r\n        const a = this.yJSONArray();\r\n        if (a) {\r\n            return a;\r\n        }\r\n        const o = this.yJSONObject();\r\n        if (o) {\r\n            return o;\r\n        }\r\n        // 一語関数\r\n        const splitType = operatorList.concat(['eol', ')', ']', 'ならば', '回', '間', '反復', '条件分岐']);\r\n        if (this.check2(['func', splitType])) {\r\n            const tt = this.get();\r\n            if (!tt) {\r\n                throw new Error('[System Error] 正しく値が取れませんでした。');\r\n            }\r\n            const f = this.getVarNameRef(tt);\r\n            this.usedFuncs.add(f.value);\r\n            // 引数の個数をチェック\r\n            const meta = f.meta;\r\n            const args = [];\r\n            if (!meta) {\r\n                throw NakoSyntaxError.fromNode(`一語関数『${f.name}』は存在しません。`, tt);\r\n            }\r\n            if (meta.josi && meta.josi.length === 1) {\r\n                args.push({ type: 'word', value: 'それ' });\r\n            }\r\n            else if (meta.josi && meta.josi.length >= 2) {\r\n                throw NakoSyntaxError.fromNode(`関数『${f.name}』で引数が指定されていません。${meta.josi.length}個の引数を指定してください。`, tt);\r\n            }\r\n            return {\r\n                type: 'func',\r\n                name: f.value,\r\n                args,\r\n                josi: f.josi,\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // C風関数呼び出し FUNC(...)\r\n        if (this.check2([['func', 'word'], '(']) && this.peekDef().josi === '') {\r\n            const f = this.peek();\r\n            if (this.accept([['func', 'word'], '(', this.yGetArgParen, ')'])) {\r\n                const ff = this.getVarNameRef(this.y[0]);\r\n                const args = this.y[2];\r\n                const funcName = ff.value;\r\n                this.usedFuncs.add(funcName);\r\n                // 引数の個数をチェック\r\n                const meta = ff.meta;\r\n                if (meta && meta.josi) {\r\n                    // 引数の個数が異なる場合\r\n                    if (meta.josi.length === args.length) {\r\n                        // ok\r\n                    }\r\n                    else if (meta.isVariableJosi) {\r\n                        // ok\r\n                    }\r\n                    else { // 引数の個数が違う\r\n                        throw NakoSyntaxError.fromNode(`関数『${ff.value}』で引数${args.length}個が指定されましたが、${meta.josi.length}個の引数を指定してください。`, ff);\r\n                    }\r\n                }\r\n                return {\r\n                    type: 'func',\r\n                    name: funcName,\r\n                    args,\r\n                    josi: this.y[3].josi,\r\n                    ...map,\r\n                    end: this.peekSourceMap()\r\n                };\r\n            }\r\n            throw NakoSyntaxError.fromNode('C風関数呼び出しのエラー', f || NewEmptyToken());\r\n        }\r\n        // 関数呼び出し演算子(core #83)で廃止\r\n        if (this.check2(['func', '←'])) {\r\n            throw new Error('関数呼び出し演算子は廃止されました。');\r\n        }\r\n        // 無名関数(関数オブジェクト)\r\n        if (this.check('def_func')) {\r\n            return this.yMumeiFunc();\r\n        }\r\n        // 変数\r\n        const word = this.yValueWord();\r\n        if (word) {\r\n            return word;\r\n        }\r\n        // その他\r\n        return null;\r\n    }\r\n    yValueWordGetIndex(ast) {\r\n        if (!ast.index) {\r\n            ast.index = [];\r\n        }\r\n        // word @ a, b, c\r\n        if (this.check('@')) {\r\n            if (this.accept(['@', this.yValue, 'comma', this.yValue, 'comma', this.yValue])) {\r\n                ast.index.push(this.checkArrayIndex(this.y[1]));\r\n                ast.index.push(this.checkArrayIndex(this.y[3]));\r\n                ast.index.push(this.checkArrayIndex(this.y[5]));\r\n                ast.index = this.checkArrayReverse(ast.index);\r\n                ast.josi = this.y[5].josi;\r\n                return true;\r\n            }\r\n            if (this.accept(['@', this.yValue, 'comma', this.yValue])) {\r\n                ast.index.push(this.checkArrayIndex(this.y[1]));\r\n                ast.index.push(this.checkArrayIndex(this.y[3]));\r\n                ast.index = this.checkArrayReverse(ast.index);\r\n                ast.josi = this.y[3].josi;\r\n                return true;\r\n            }\r\n            if (this.accept(['@', this.yValue])) {\r\n                ast.index.push(this.checkArrayIndex(this.y[1]));\r\n                ast.josi = this.y[1].josi;\r\n                return true;\r\n            }\r\n            throw NakoSyntaxError.fromNode('変数の後ろの『@要素』の指定が不正です。', ast);\r\n        }\r\n        if (this.check('[')) {\r\n            if (this.accept(['[', this.yCalc, ']'])) {\r\n                ast.index.push(this.checkArrayIndex(this.y[1]));\r\n                ast.josi = this.y[2].josi;\r\n                return true;\r\n            }\r\n        }\r\n        if (this.check('[')) {\r\n            if (this.accept(['[', this.yCalc, 'comma', this.yCalc, ']'])) {\r\n                const index = [\r\n                    this.checkArrayIndex(this.y[1]),\r\n                    this.checkArrayIndex(this.y[3])\r\n                ];\r\n                ast.index = this.checkArrayReverse(index);\r\n                ast.josi = this.y[4].josi;\r\n                return true;\r\n            }\r\n        }\r\n        if (this.check('[')) {\r\n            if (this.accept(['[', this.yCalc, 'comma', this.yCalc, 'comma', this.yCalc, ']'])) {\r\n                const index = [\r\n                    this.checkArrayIndex(this.y[1]),\r\n                    this.checkArrayIndex(this.y[3]),\r\n                    this.checkArrayIndex(this.y[5])\r\n                ];\r\n                ast.index = this.checkArrayReverse(index);\r\n                ast.josi = this.y[6].josi;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yValueWord() {\r\n        const map = this.peekSourceMap();\r\n        if (this.check('word')) {\r\n            const t = this.getCur();\r\n            const word = this.getVarNameRef(t);\r\n            // word[n] || word@n\r\n            if (word.josi === '' && this.checkTypes(['[', '@'])) {\r\n                const ast = {\r\n                    type: '配列参照',\r\n                    name: word,\r\n                    index: [],\r\n                    josi: '',\r\n                    ...map,\r\n                    end: this.peekSourceMap()\r\n                };\r\n                while (!this.isEOF()) {\r\n                    if (!this.yValueWordGetIndex(ast)) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (ast.index && ast.index.length === 0) {\r\n                    throw NakoSyntaxError.fromNode(`配列『${word.value}』アクセスで指定ミス`, word);\r\n                }\r\n                return ast;\r\n            }\r\n            return word; // Token to Ast\r\n        }\r\n        return null;\r\n    }\r\n    /** 変数を生成 */\r\n    createVar(word, isConst) {\r\n        let gname = word.value;\r\n        const typeName = isConst ? 'const' : 'var';\r\n        if (this.funcLevel === 0) {\r\n            // global ?\r\n            if (gname.indexOf('__') < 0) {\r\n                gname = this.modName + '__' + gname;\r\n            }\r\n            this.funclist[gname] = { type: typeName, value: '' };\r\n            word.value = gname;\r\n            return word;\r\n        }\r\n        else {\r\n            // local\r\n            this.localvars[gname] = { type: typeName, value: '' };\r\n            return word;\r\n        }\r\n    }\r\n    /** 変数名を検索して解決する\r\n     * @param {Ast|Token} word\r\n     * @return {Ast|Token}\r\n     */\r\n    getVarName(word) {\r\n        // check word name\r\n        const f = this.findVar(word.value);\r\n        if (f) {\r\n            if (f && f.scope === 'global') {\r\n                word.value = f.name;\r\n            }\r\n            return word;\r\n        }\r\n        // 変数が見つからない\r\n        this.createVar(word, false);\r\n        return word;\r\n    }\r\n    /** 変数名を検索して解決する */\r\n    getVarNameRef(word) {\r\n        // check word name\r\n        const f = this.findVar(word.value);\r\n        if (!f) { // 変数が見つからない\r\n            if (this.funcLevel === 0 && word.value.indexOf('__') < 0) {\r\n                word.value = this.modName + '__' + word.value;\r\n            }\r\n        }\r\n        else if (f && f.scope === 'global') {\r\n            word.value = f.name;\r\n        }\r\n        return word;\r\n    }\r\n    /** 複数の変数名を検索して解決する */\r\n    createVarList(words, isConst) {\r\n        for (let i = 0; i < words.length; i++) {\r\n            words[i] = this.createVar(words[i], isConst);\r\n        }\r\n        return words;\r\n    }\r\n    yJSONObjectValue() {\r\n        const a = [];\r\n        const firstToken = this.peek();\r\n        if (!firstToken) {\r\n            return null;\r\n        }\r\n        while (!this.isEOF()) {\r\n            while (this.check('eol')) {\r\n                this.get();\r\n            }\r\n            if (this.check('}')) {\r\n                break;\r\n            }\r\n            if (this.accept(['word', ':', this.yCalc])) {\r\n                this.y[0].type = 'string'; // キー名の文字列記号省略の場合\r\n                a.push({\r\n                    key: this.y[0],\r\n                    value: this.y[2]\r\n                });\r\n            }\r\n            else if (this.accept(['string', ':', this.yCalc])) {\r\n                a.push({\r\n                    key: this.y[0],\r\n                    value: this.y[2]\r\n                });\r\n            }\r\n            else if (this.check('word')) {\r\n                const w = this.getCur();\r\n                w.type = 'string';\r\n                a.push({\r\n                    key: w,\r\n                    value: w\r\n                });\r\n            }\r\n            else if (this.checkTypes(['string', 'number'])) {\r\n                const w = this.getCur();\r\n                a.push({\r\n                    key: w,\r\n                    value: w\r\n                });\r\n            }\r\n            else {\r\n                throw NakoSyntaxError.fromNode('辞書オブジェクトの宣言で末尾の『}』がありません。', firstToken);\r\n            }\r\n            if (this.check('comma')) {\r\n                this.get();\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yJSONObject() {\r\n        const map = this.peekSourceMap();\r\n        if (this.accept(['{', '}'])) {\r\n            return {\r\n                type: 'json_obj',\r\n                value: [],\r\n                josi: this.y[1].josi,\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        if (this.accept(['{', this.yJSONObjectValue, '}'])) {\r\n            return {\r\n                type: 'json_obj',\r\n                value: this.y[1],\r\n                josi: this.y[2].josi,\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // 辞書初期化に終わりがなかった場合 (エラーチェックのため) #958\r\n        if (this.accept(['{', this.yJSONObjectValue])) {\r\n            throw NakoSyntaxError.fromNode('辞書型変数の初期化が『}』で閉じられていません。', this.y[1]);\r\n        }\r\n        return null;\r\n    }\r\n    yJSONArrayValue() {\r\n        if (this.check('eol')) {\r\n            this.get();\r\n        }\r\n        const v1 = this.yCalc();\r\n        if (v1 === null) {\r\n            return null;\r\n        }\r\n        if (this.check('comma')) {\r\n            this.get();\r\n        }\r\n        const a = [v1];\r\n        while (!this.isEOF()) {\r\n            if (this.check('eol')) {\r\n                this.get();\r\n            }\r\n            if (this.check(']')) {\r\n                break;\r\n            }\r\n            const v2 = this.yCalc();\r\n            if (v2 === null) {\r\n                break;\r\n            }\r\n            if (this.check('comma')) {\r\n                this.get();\r\n            }\r\n            a.push(v2);\r\n        }\r\n        return a;\r\n    }\r\n    /** @returns {Ast | null} */\r\n    yJSONArray() {\r\n        const map = this.peekSourceMap();\r\n        if (this.accept(['[', ']'])) {\r\n            return {\r\n                type: 'json_array',\r\n                value: [],\r\n                josi: this.y[1].josi,\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        if (this.accept(['[', this.yJSONArrayValue, ']'])) {\r\n            return {\r\n                type: 'json_array',\r\n                value: this.y[1],\r\n                josi: this.y[2].josi,\r\n                ...map,\r\n                end: this.peekSourceMap()\r\n            };\r\n        }\r\n        // 配列に終わりがなかった場合 (エラーチェックのため) #958\r\n        if (this.accept(['[', this.yJSONArrayValue])) {\r\n            throw NakoSyntaxError.fromNode('配列変数の初期化が『]』で閉じられていません。', this.y[1]);\r\n        }\r\n        return null;\r\n    }\r\n    /** エラー監視構文 */\r\n    yTryExcept() {\r\n        const map = this.peekSourceMap();\r\n        if (!this.check('エラー監視')) {\r\n            return null;\r\n        }\r\n        const kansi = this.getCur(); // skip エラー監視\r\n        const block = this.yBlock();\r\n        if (!this.check2(['エラー', 'ならば'])) {\r\n            throw NakoSyntaxError.fromNode('エラー構文で『エラーならば』がありません。' +\r\n                '『エラー監視..エラーならば..ここまで』を対で記述します。', kansi);\r\n        }\r\n        this.get(); // skip エラー\r\n        this.get(); // skip ならば\r\n        const errBlock = this.yBlock();\r\n        if (this.check('ここまで')) {\r\n            this.get();\r\n        }\r\n        else {\r\n            throw NakoSyntaxError.fromNode('『ここまで』がありません。『エラー監視』...『エラーならば』...『ここまで』を対応させてください。', map);\r\n        }\r\n        return {\r\n            type: 'try_except',\r\n            block,\r\n            errBlock: errBlock || [],\r\n            josi: '',\r\n            ...map,\r\n            end: this.peekSourceMap()\r\n        };\r\n    }\r\n}\r\n","/**\r\n * nako_prepare.js\r\n * 字句解析の前の前処理。全角文字を半角文字に変換するのが主な処理。\r\n * ただし、コメントや文字列の中は変換しないように考慮して変換する。\r\n */\r\nclass ReplaceHistory {\r\n    constructor(from, to, index) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.index = index;\r\n    }\r\n}\r\nclass ConvertResult {\r\n    constructor(text, sourcePosition) {\r\n        this.text = text;\r\n        this.sourcePosition = sourcePosition;\r\n    }\r\n}\r\n/**\r\n * 置換後の位置から置換前の位置へマッピングできる文字列\r\n */\r\nexport class Replace {\r\n    constructor(code) {\r\n        this.history = [];\r\n        this.code = code;\r\n    }\r\n    getText() {\r\n        return this.code;\r\n    }\r\n    replaceAll(from, to) {\r\n        while (true) {\r\n            const index = this.getText().indexOf(from);\r\n            if (index === -1) {\r\n                break;\r\n            }\r\n            if (from.length !== to.length) {\r\n                this.history.unshift(new ReplaceHistory(from.length, to.length, index));\r\n            }\r\n            this.code = this.code.replace(from, to);\r\n        }\r\n    }\r\n    getSourcePosition(i) {\r\n        // 少し遅い。パース時間1.4秒に対して0.15秒かかる。iが単調増加することを利用して高速化できるはず。\r\n        for (const item of this.history) {\r\n            if (i >= item.index + item.to) { // 置換範囲より後ろ\r\n                i += item.from - item.to;\r\n            }\r\n            else if (item.index <= i && i < item.index + item.to) { // 置換範囲\r\n                // 置換文字列が2文字以上のとき、最後の文字は最後の文字へマップする。それ以外は最初の文字へマップする。\r\n                if (item.to >= 2 && i === item.index + item.to - 1) {\r\n                    i = item.index + item.from - 1;\r\n                }\r\n                else {\r\n                    i = item.index;\r\n                }\r\n            }\r\n        }\r\n        return i;\r\n    }\r\n}\r\n/**\r\n * 字句解析を行う前に全角文字を半角に揃える\r\n *    [memo]\r\n *    ただし、文字列部分だけは、そのまま全角で出力するようにする\r\n *    for https://github.com/kujirahand/nadesiko3/issues/94\r\n */\r\nexport class NakoPrepare {\r\n    constructor() {\r\n        // 単純な変換テーブル\r\n        this.convertTable = new Map([\r\n            // ハイフンへの変換\r\n            // 参考) https://hydrocul.github.io/wiki/blog/2014/1101-hyphen-minus-wave-tilde\r\n            // 0x2d: true, // ASCIIのハイフン\r\n            [0x2010, '-'],\r\n            [0x2011, '-'],\r\n            [0x2013, '-'],\r\n            [0x2014, '-'],\r\n            [0x2015, '-'],\r\n            [0x2212, '-'],\r\n            // チルダの変換\r\n            // 0x7e: true,\r\n            [0x02dc, '~'],\r\n            [0x02F7, '~'],\r\n            [0x2053, '~'],\r\n            [0x223c, '~'],\r\n            [0x301c, '~'],\r\n            [0xFF5E, '~'],\r\n            // スペースの変換\r\n            // 参考) http://anti.rosx.net/etc/memo/002_space.html\r\n            // 0x20: true,\r\n            [0x2000, ' '],\r\n            [0x2002, ' '],\r\n            [0x2003, ' '],\r\n            [0x2004, ' '],\r\n            [0x2005, ' '],\r\n            [0x2006, ' '],\r\n            [0x2007, ' '],\r\n            [0x2009, ' '],\r\n            [0x200A, ' '],\r\n            [0x200B, ' '],\r\n            [0x202F, ' '],\r\n            [0x205F, ' '],\r\n            [0x3000, ' '],\r\n            [0x3164, ' '],\r\n            // その他の変換\r\n            // [0x09, ' '], // TAB --> SPC\r\n            [0x203B, '#'],\r\n            [0x3002, ';'],\r\n            [0x3010, '['],\r\n            [0x3011, ']'],\r\n            // 読点は「,」に変換する (#877)\r\n            [0x3001, ','],\r\n            [0xFF0C, ','],\r\n            [0x2716, '*'],\r\n            [0x2795, '+'],\r\n            [0x2796, '-'],\r\n            [0x2797, '÷'] // ÷の絵文字 (#1183)\r\n        ]);\r\n    }\r\n    /** 唯一のインスタンスを返す */\r\n    static getInstance() {\r\n        if (!NakoPrepare._instance) {\r\n            NakoPrepare._instance = new NakoPrepare();\r\n        }\r\n        return NakoPrepare._instance;\r\n    }\r\n    // 一文字だけ変換\r\n    /**\r\n     * @param {string} ch\r\n     */\r\n    convert1ch(ch) {\r\n        if (!ch) {\r\n            return '';\r\n        }\r\n        const c = ch.codePointAt(0) || 0;\r\n        // テーブルによる変換\r\n        const c2 = this.convertTable.get(c) || '';\r\n        if (c2) {\r\n            return c2;\r\n        }\r\n        // ASCIIエリア\r\n        if (c < 0x7F) {\r\n            return ch;\r\n        }\r\n        // 全角半角単純変換可能 --- '！' - '～'\r\n        if (c >= 0xFF01 && c <= 0xFF5E) {\r\n            const c2 = c - 0xFEE0;\r\n            return String.fromCodePoint(c2);\r\n        }\r\n        return ch;\r\n    }\r\n    /** convert code */\r\n    convert(code) {\r\n        if (!code) {\r\n            return [];\r\n        }\r\n        const src = new Replace(code);\r\n        // 改行コードを統一\r\n        src.replaceAll('\\r\\n', '\\n');\r\n        src.replaceAll('\\r', '\\n');\r\n        let flagStr = false; // 文字列リテラル内かどうか\r\n        let flagStr2 = false; // 絵文字による文字列リテラル内かどうか\r\n        let endOfStr = ''; // 文字列リテラルを終了させる記号\r\n        const res = [];\r\n        let left = 0; // 現在処理中の部分文字列の左端の位置\r\n        let str = ''; // 文字列リテラルの値\r\n        // 一文字ずつ全角を半角に置換する\r\n        let i = 0;\r\n        while (i < src.getText().length) {\r\n            const c = src.getText().charAt(i);\r\n            const ch2 = src.getText().substr(i, 2);\r\n            // 文字列のとき\r\n            if (flagStr) {\r\n                if (c === endOfStr) {\r\n                    flagStr = false;\r\n                    res.push(new ConvertResult(str + endOfStr, src.getSourcePosition(left)));\r\n                    i++;\r\n                    left = i;\r\n                    continue;\r\n                }\r\n                str += c;\r\n                i++;\r\n                continue;\r\n            }\r\n            // 絵文字制御による文字列のとき\r\n            if (flagStr2) {\r\n                if (ch2 === endOfStr) {\r\n                    flagStr2 = false;\r\n                    if (endOfStr === '＊／') {\r\n                        endOfStr = '*/';\r\n                    } // 強制変換\r\n                    res.push(new ConvertResult(str + endOfStr, src.getSourcePosition(left)));\r\n                    i += 2;\r\n                    left = i;\r\n                    continue;\r\n                }\r\n                str += c;\r\n                i++;\r\n                continue;\r\n            }\r\n            // 文字列判定\r\n            if (c === '「') {\r\n                res.push(new ConvertResult(c, src.getSourcePosition(left)));\r\n                i++;\r\n                left = i;\r\n                flagStr = true;\r\n                endOfStr = '」';\r\n                str = '';\r\n                continue;\r\n            }\r\n            if (c === '『') {\r\n                res.push(new ConvertResult(c, src.getSourcePosition(left)));\r\n                i++;\r\n                left = i;\r\n                flagStr = true;\r\n                endOfStr = '』';\r\n                str = '';\r\n                continue;\r\n            }\r\n            if (c === '“') {\r\n                res.push(new ConvertResult(c, src.getSourcePosition(left)));\r\n                i++;\r\n                left = i;\r\n                flagStr = true;\r\n                endOfStr = '”';\r\n                str = '';\r\n                continue;\r\n            }\r\n            // JavaScriptの内部的には文字列はUTF-16で扱われてるので charAt を使う場合 絵文字が2文字扱いになる --- #726\r\n            if (ch2 === '🌴' || ch2 === '🌿') {\r\n                res.push(new ConvertResult(ch2, src.getSourcePosition(left)));\r\n                i += 2;\r\n                left = i;\r\n                flagStr2 = true;\r\n                endOfStr = ch2;\r\n                str = '';\r\n                continue;\r\n            }\r\n            const c1 = this.convert1ch(c);\r\n            if (c1 === '\"' || c1 === '\\'') {\r\n                res.push(new ConvertResult(c1, src.getSourcePosition(left)));\r\n                i++;\r\n                left = i;\r\n                flagStr = true;\r\n                endOfStr = c;\r\n                str = '';\r\n                continue;\r\n            }\r\n            // ラインコメントを飛ばす (#725)\r\n            if (c1 === '#') {\r\n                res.push(new ConvertResult(c1, src.getSourcePosition(left)));\r\n                i++;\r\n                left = i;\r\n                flagStr = true; // 本当はコメントだけど便宜上\r\n                endOfStr = '\\n';\r\n                str = '';\r\n                continue;\r\n            }\r\n            // ラインコメントを飛ばす\r\n            if (ch2 === '//' || ch2 === '／／') {\r\n                res.push(new ConvertResult('//', src.getSourcePosition(left))); // 強制的に'//'とする\r\n                i += 2;\r\n                left = i;\r\n                flagStr = true;\r\n                endOfStr = '\\n';\r\n                str = '';\r\n                continue;\r\n            }\r\n            // 複数行コメント内を飛ばす\r\n            if (ch2 === '／＊') {\r\n                res.push(new ConvertResult('/*', src.getSourcePosition(left))); // 強制変換\r\n                i += 2;\r\n                left = i;\r\n                flagStr2 = true;\r\n                endOfStr = '＊／';\r\n                str = '';\r\n                continue;\r\n            }\r\n            // 複数行コメント内を飛ばす (#731)\r\n            if (ch2 === '/*') {\r\n                res.push(new ConvertResult(ch2, src.getSourcePosition(left)));\r\n                i += 2;\r\n                left = i;\r\n                flagStr2 = true;\r\n                endOfStr = '*/';\r\n                str = '';\r\n                continue;\r\n            }\r\n            // 変換したものを追加\r\n            res.push(new ConvertResult(c1, src.getSourcePosition(left)));\r\n            i++;\r\n            left = i;\r\n        }\r\n        if (flagStr || flagStr2) {\r\n            res.push(new ConvertResult(str + endOfStr, src.getSourcePosition(left)));\r\n        }\r\n        return res;\r\n    }\r\n}\r\n/** なでしこのソースコードのモード(!インデント構文など)が設定されているか調べる */\r\nexport function checkNakoMode(code, modeNames) {\r\n    // 先頭の256文字について調べる\r\n    code = code.substring(0, 256);\r\n    // 全角半角の揺れを吸収\r\n    code = code.replace(/(！|💡)/, '!');\r\n    // 範囲コメントを削除\r\n    code = code.replace(/\\/\\*.*?\\*\\//g, '');\r\n    // 毎文調べる\r\n    const lines = code.split(/[;。\\n]/, 30);\r\n    for (let line of lines) {\r\n        line = line.replace(/^\\s+/, '').replace(/\\s+$/, ''); // trim\r\n        if (modeNames.indexOf(line) >= 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n","/**\r\n * よく使う処理をまとめたもの\r\n */\r\nimport { NewEmptyToken } from './nako_types.mjs';\r\n/**\r\n * トークンの内容をデバッグ出力する関数\r\n * @param tokens トークンの一覧\r\n * @returns 文字列\r\n */\r\nexport function debugTokens(tokens) {\r\n    const result = [];\r\n    for (let i = 0; i < tokens.length; i++) {\r\n        const t = tokens[i];\r\n        const ftype = t.type;\r\n        const fvalue = t.value;\r\n        let s = `[${ftype}:${fvalue}]`;\r\n        if (ftype === fvalue) {\r\n            s = ftype;\r\n        }\r\n        if (ftype === 'comma') {\r\n            s = ',';\r\n        }\r\n        if (ftype === 'string') {\r\n            s = `\"${fvalue}\"`;\r\n        }\r\n        if (ftype === 'number') {\r\n            s = `(${fvalue})`;\r\n        }\r\n        if (ftype === 'word') {\r\n            s = `[word:${fvalue}]`;\r\n        }\r\n        if (!result[t.line]) {\r\n            result[t.line] = makeIndent(t.indent);\r\n        }\r\n        result[t.line] += s + t.josi + '|';\r\n    }\r\n    return result.join('\\n');\r\n}\r\nexport function makeIndent(n) {\r\n    let s = '';\r\n    for (let i = 0; i < n; i++) {\r\n        s += ' ';\r\n    }\r\n    return s;\r\n}\r\nlet lastTokenInfo = NewEmptyToken();\r\nexport function newToken(type, value, templateToken = undefined) {\r\n    if (templateToken) {\r\n        lastTokenInfo = templateToken;\r\n    }\r\n    const t = NewEmptyToken(type, value, lastTokenInfo.indent, lastTokenInfo.line, lastTokenInfo.file);\r\n    return t;\r\n}\r\n","/** インデント構文を処理するモジュール */\r\nimport { NewEmptyToken } from './nako_types.mjs';\r\nimport { NakoIndentError } from '../src/nako_errors.mjs';\r\nimport { debugTokens, newToken } from './nako_tools.mjs';\r\nconst IS_DEBUG = false;\r\nfunction isSkipWord(t) {\r\n    if (t.type === '違えば') {\r\n        return true;\r\n    }\r\n    if (t.type === 'word' && t.value === 'エラー' && t.josi === 'ならば') {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/** インラインインデント構文 --- 末尾の\":\"をインデントを考慮して\"ここまで\"を挿入 (#1215) */\r\nexport function convertInlineIndent(tokens) {\r\n    //\r\n    // 0:もし、A=0ならば:\r\n    // 2:  もし、B=0ならば:\r\n    // 4:    「A=0,B=0」を表示。\r\n    // 2:  違えば:\r\n    // 4:    「A=0,B!=0」を表示。\r\n    // 5:違えば:\r\n    // 6:  「A!=0」を表示。\r\n    //\r\n    const lines = splitTokens(tokens, 'eol');\r\n    const blockIndents = [];\r\n    let checkICount = -1;\r\n    let jsonObjLevel = 0;\r\n    let jsonArrayLevel = 0;\r\n    const checkJsonSyntax = (line) => {\r\n        // JSONのオブジェクトがあるか？\r\n        line.forEach((t) => {\r\n            if (t.type === '{') {\r\n                jsonObjLevel++;\r\n            }\r\n            if (t.type === '}') {\r\n                jsonObjLevel--;\r\n            }\r\n            if (t.type === '[') {\r\n                jsonArrayLevel++;\r\n            }\r\n            if (t.type === ']') {\r\n                jsonArrayLevel--;\r\n            }\r\n        });\r\n    };\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i];\r\n        // 空行は飛ばす || コメント行だけの行も飛ばす\r\n        if (IsEmptyLine(line)) {\r\n            continue;\r\n        }\r\n        const leftToken = GetLeftTokens(line);\r\n        // JSONの途中であればブロックの変更は行わない\r\n        if (jsonObjLevel > 0 || jsonArrayLevel > 0) {\r\n            checkJsonSyntax(line);\r\n            continue;\r\n        }\r\n        // インデントの終了を確認する必要があるか？\r\n        if (checkICount >= 0) {\r\n            const lineICount = leftToken.indent;\r\n            while (checkICount >= lineICount) {\r\n                const tFirst = leftToken;\r\n                // console.log('@@', lineICount, '>>', checkICount, tFirst.type)\r\n                if (isSkipWord(tFirst) && (checkICount === lineICount)) { // 「違えば」や「エラーならば」\r\n                    // 「ここまで」の挿入不要 / ただしネストした際の「違えば」(上記の5の状態なら必要)\r\n                }\r\n                else {\r\n                    // ここまでを挿入する\r\n                    lines[i - 1].push(newToken('ここまで', 'ここまで', tFirst));\r\n                    lines[i - 1].push(newToken('eol', '\\n', tFirst));\r\n                }\r\n                blockIndents.pop();\r\n                if (blockIndents.length > 0) {\r\n                    checkICount = blockIndents[blockIndents.length - 1];\r\n                }\r\n                else {\r\n                    checkICount = -1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // JSONの途中であればブロックの変更は行わない\r\n        checkJsonSyntax(line);\r\n        if (jsonObjLevel > 0 || jsonArrayLevel > 0) {\r\n            continue;\r\n        }\r\n        // 末尾の「:」をチェック\r\n        const tLast = getLastTokenWithoutEOL(line);\r\n        if (tLast.type === ':') {\r\n            // 末尾の「:」を削除\r\n            lines[i] = lines[i].filter(t => t !== tLast);\r\n            checkICount = tLast.indent;\r\n            blockIndents.push(checkICount);\r\n        }\r\n    }\r\n    if (lines.length > 0 && blockIndents.length > 0) {\r\n        // トークン情報を得るため、直近のトークンを得る\r\n        let t = tokens[0];\r\n        for (let i = lines.length - 1; i >= 0; i--) {\r\n            const line = lines[i];\r\n            if (line.length > 0) {\r\n                t = line[line.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        // ここまでを差し込む\r\n        for (let i = 0; i < blockIndents.length; i++) {\r\n            lines[lines.length - 1].push(newToken('ここまで', 'ここまで', t));\r\n            lines[lines.length - 1].push(newToken('eol', '\\n', t));\r\n        }\r\n    }\r\n    const result = joinTokenLines(lines);\r\n    if (IS_DEBUG) {\r\n        console.log('###', debugTokens(result));\r\n    }\r\n    return result;\r\n}\r\n/** 行ごとに分割していたトークンをくっつける */\r\nexport function joinTokenLines(lines) {\r\n    const r = [];\r\n    for (const line of lines) {\r\n        for (const t of line) {\r\n            r.push(t);\r\n        }\r\n    }\r\n    return r;\r\n}\r\nfunction getLastTokenWithoutEOL(line) {\r\n    const len = line.length;\r\n    if (len === 0) {\r\n        return NewEmptyToken('?');\r\n    }\r\n    let res = line[len - 1];\r\n    if (res.type === 'eol') {\r\n        if (len >= 2) {\r\n            res = line[len - 2];\r\n        }\r\n    }\r\n    return res;\r\n}\r\nexport function splitTokens(tokens, delimiter) {\r\n    const result = [];\r\n    let line = [];\r\n    let kakko = 0;\r\n    for (const t of tokens) {\r\n        line.push(t);\r\n        if (t.type === '{') {\r\n            kakko++;\r\n        }\r\n        else if (t.type === '}') {\r\n            kakko--;\r\n        }\r\n        else if (kakko === 0 && t.type === delimiter) {\r\n            result.push(line);\r\n            line = [];\r\n        }\r\n    }\r\n    if (line.length > 0) {\r\n        result.push(line);\r\n    }\r\n    return result;\r\n}\r\n/** トークン行が空かどうか調べる */\r\nfunction IsEmptyLine(line) {\r\n    if (line.length === 0) {\r\n        return true;\r\n    }\r\n    for (let j = 0; j < line.length; j++) {\r\n        const ty = line[j].type;\r\n        if (ty === 'eol' || ty === 'line_comment' || ty === 'range_comment') {\r\n            continue;\r\n        }\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/** コメントを除去した最初のトークンを返す */\r\nfunction GetLeftTokens(line) {\r\n    for (let i = 0; i < line.length; i++) {\r\n        const t = line[i].type;\r\n        if (t === 'eol' || t === 'line_comment' || t === 'range_comment') {\r\n            continue;\r\n        }\r\n        return line[i];\r\n    }\r\n    return line[0];\r\n}\r\n// インデント構文のキーワード\r\nconst INDENT_MODE_KEYWORDS = ['!インデント構文', '!ここまでだるい', '💡インデント構文', '💡ここまでだるい'];\r\n/** インデント構文 --- インデントを見て\"ここまで\"を自動挿入 (#596) */\r\nexport function convertIndentSyntax(tokens) {\r\n    // インデント構文の変換が必要か?\r\n    if (!useIndentSynax(tokens)) {\r\n        return tokens;\r\n    }\r\n    // 『ここまで』があったらエラーを出す\r\n    for (const t of tokens) {\r\n        if (t.type === 'ここまで') {\r\n            // エラーを出す\r\n            throw new NakoIndentError('インデント構文が有効化されているときに『ここまで』を使うことはできません。', t.line, t.file);\r\n        }\r\n    }\r\n    // JSON構文のチェック\r\n    let jsonObjLevel = 0;\r\n    let jsonArrayLevel = 0;\r\n    const checkJsonSyntax = (line) => {\r\n        // JSONのオブジェクトがあるか？\r\n        line.forEach((t) => {\r\n            if (t.type === '{') {\r\n                jsonObjLevel++;\r\n            }\r\n            if (t.type === '}') {\r\n                jsonObjLevel--;\r\n            }\r\n            if (t.type === '[') {\r\n                jsonArrayLevel++;\r\n            }\r\n            if (t.type === ']') {\r\n                jsonArrayLevel--;\r\n            }\r\n        });\r\n    };\r\n    // 行ごとにトークンを分割\r\n    const blockIndents = [];\r\n    const lines = splitTokens(tokens, 'eol');\r\n    let lastI = 0;\r\n    // 各行を確認する\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i];\r\n        // 空行は飛ばす || コメント行だけの行も飛ばす\r\n        if (IsEmptyLine(line)) {\r\n            continue;\r\n        }\r\n        // JSON構文のチェック\r\n        if (jsonArrayLevel > 0 || jsonObjLevel > 0) {\r\n            checkJsonSyntax(line);\r\n            continue;\r\n        }\r\n        const leftToken = GetLeftTokens(line);\r\n        const curI = leftToken.indent;\r\n        if (curI === lastI) {\r\n            continue;\r\n        }\r\n        // ブロックの終了?\r\n        // 0: 3回\r\n        // 2:   もし、1 > 1ならば\r\n        // 4:     1を表示\r\n        // 2:   違えば\r\n        // 4:     2を表示\r\n        // 0:\r\n        // ブロックの終了?\r\n        if (lastI >= 0) {\r\n            while (lastI > curI) {\r\n                const blockIndentTopLast = blockIndents[blockIndents.length - 1][1];\r\n                // console.log('@@[', i, ']', lastI, '>', curI, '@', blockIndentTopLast, leftToken.type)\r\n                if (isSkipWord(leftToken) && blockIndentTopLast === curI) {\r\n                    // 「違えば」などなら不要 (ただし、違えばがネストしている場合は必要)\r\n                }\r\n                else {\r\n                    const t = lines[i - 1][0];\r\n                    lines[i - 1].push(newToken('ここまで', 'ここまで', t));\r\n                    lines[i - 1].push(newToken('eol', '\\n', t));\r\n                }\r\n                blockIndents.pop();\r\n                if (blockIndents.length > 0) {\r\n                    lastI = blockIndents[blockIndents.length - 1][0];\r\n                }\r\n                else {\r\n                    lastI = 0;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (jsonArrayLevel > 0 || jsonObjLevel > 0) {\r\n            continue;\r\n        }\r\n        // JSON構文のチェック\r\n        checkJsonSyntax(line);\r\n        // ブロックの開始？\r\n        if (curI > lastI) {\r\n            blockIndents.push([curI, lastI]);\r\n            // console.log('@@@push', curI)\r\n            lastI = curI;\r\n            continue;\r\n        }\r\n    }\r\n    // 末尾に「ここまで」を追加する\r\n    for (let i = 0; i < blockIndents.length; i++) {\r\n        // トークン情報を得るため、直近のトークンを得る\r\n        let t = tokens[0];\r\n        for (let i = lines.length - 1; i >= 0; i--) {\r\n            const line = lines[i];\r\n            if (line.length > 0) {\r\n                t = line[line.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        lines[lines.length - 1].push(newToken('ここまで', 'ここまで', t));\r\n        lines[lines.length - 1].push(newToken('eol', '\\n', t));\r\n    }\r\n    const result = joinTokenLines(lines);\r\n    // console.log('###', debugTokens(result))\r\n    return result;\r\n}\r\nfunction useIndentSynax(tokens) {\r\n    // インデント構文が必要かチェック (最初の100個をチェック)\r\n    for (let i = 0; i < tokens.length; i++) {\r\n        if (i > 100) {\r\n            break;\r\n        }\r\n        const t = tokens[i];\r\n        if (t.type === 'line_comment' && (INDENT_MODE_KEYWORDS.indexOf(t.value) >= 0)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n","/**\r\n * DNCLに対応する構文\r\n */\r\n// import { NakoIndentError } from './nako_errors.mjs'\r\nimport { NewEmptyToken } from './nako_types.mjs';\r\nimport { joinTokenLines, splitTokens } from './nako_indent_inline.mjs';\r\n// DNCLモードのキーワード\r\nconst DNCL_KEYWORDS = ['!DNCLモード', '💡DNCLモード'];\r\n// 単純な置換チェック\r\nconst DNCL_SIMPLES = {\r\n    '←:←': ['eq', '='],\r\n    '÷:÷': ['÷÷', '÷÷'],\r\n    '{:{': ['[', '['],\r\n    '}:}': [']', ']'],\r\n    'word:を実行': ['ここまで', 'ここまで'],\r\n    'word:乱数': ['word', '乱数範囲'],\r\n    'word:表示': ['word', '連続表示']\r\n};\r\n/**\r\n * DNCLのソースコードをなでしこに変換する\r\n */\r\nexport function convertDNCL(tokens) {\r\n    if (!useDNCLmode(tokens)) {\r\n        return tokens;\r\n    }\r\n    // 一行ずつに分ける\r\n    const lines = splitTokens(tokens, 'eol');\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i];\r\n        if (line.length <= 1) {\r\n            continue;\r\n        } // 空行は飛ばす\r\n        // 行頭の | はただのインデント\r\n        for (let j = 0; j < line.length; j++) {\r\n            if (line[j].type === '|') {\r\n                line[j].type = 'range_comment';\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        // 後判定の繰り返しの実装のため\r\n        const t = line[0];\r\n        if (t.type === 'word' && t.value === '繰返') {\r\n            line.splice(0, line.length, NewEmptyToken('word', '後判定', t.indent, t.line, t.file), NewEmptyToken('word', '繰返', t.indent, t.line, t.file));\r\n        }\r\n        // ^\\s*を,?(.+)になるまで(繰り返す|実行する)/\r\n        const fi = findTokens(line, ['word:なる', 'word:繰返']);\r\n        if (fi > 0) {\r\n            replaceAtohantei(line, fi);\r\n        }\r\n        const fi2 = findTokens(line, ['word:なる', 'word:実行']);\r\n        if (fi2 > 0) {\r\n            replaceAtohantei(line, fi2);\r\n        }\r\n        // もし(条件)でないならば → もし(条件)でなければ\r\n        const nai = findTokens(line, ['word:ない']);\r\n        if (nai >= 1) {\r\n            const tt = line[nai];\r\n            if (tt.josi === 'ならば') {\r\n                line[nai - 1].josi = 'でなければ';\r\n                line.splice(nai, 1);\r\n            }\r\n        }\r\n        // 二進で表示 (255) → 二進表示(255)\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:二進', 'word:表示']);\r\n            if (ni < 0) {\r\n                break;\r\n            }\r\n            line[ni].value = '二進表示';\r\n            line[ni].josi = '';\r\n            line.splice(ni + 1, 1);\r\n        }\r\n        // '改行なしで表示' → '連続無改行表示'\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:改行', 'word:表示']);\r\n            if (ni < 0) {\r\n                break;\r\n            }\r\n            // ここ「改行なしで表示」でも「改行ありで表示」でも同じになってしまう\r\n            // なでしこの制限のため仕方なし\r\n            // 「改行ありで表示」は今のところDNCLに存在しないので無視する\r\n            // もし将来的に区別が必要なら、プリプロセス処理でマクロ的に置換処理を行うことで対応できると思う\r\n            const t = line[ni];\r\n            t.value = '連続無改行表示';\r\n            t.josi = '';\r\n            line.splice(ni + 1, 1);\r\n        }\r\n        // 'を実行し,そうでなければ': '違えば',\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:を実行', 'comma:,', 'word:そう']);\r\n            if (ni < 0) {\r\n                break;\r\n            }\r\n            const sou = line[ni + 2];\r\n            if (sou.josi === 'でなければ') {\r\n                sou.type = '違えば';\r\n                sou.value = '違えば';\r\n                sou.josi = '';\r\n                line.splice(ni, 3, sou);\r\n                continue;\r\n            }\r\n            else if (sou.josi === 'で') {\r\n                const nakumosi = line[ni + 3];\r\n                if (nakumosi.value.substring(0, 4) === 'なくもし') {\r\n                    sou.type = '違えば';\r\n                    sou.value = '違えば';\r\n                    sou.josi = '';\r\n                    line.splice(ni, 3, sou);\r\n                    if (nakumosi.value.length > 4) {\r\n                        const nakumosiTudukiStr = nakumosi.value.substring(4);\r\n                        const nakumosiToken = NewEmptyToken('word', nakumosiTudukiStr, nakumosi.indent, nakumosi.line, nakumosi.file);\r\n                        if (nakumosiTudukiStr.match(/^\\d/)) {\r\n                            nakumosiToken.type = 'number';\r\n                        }\r\n                        line.splice(ni + 2, 0, nakumosiToken);\r\n                        nakumosi.value = nakumosi.value.substring(0, 4);\r\n                    }\r\n                    nakumosi.type = 'もし';\r\n                    nakumosi.value = 'もし';\r\n                    nakumosi.josi = '';\r\n                    continue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        // Iを1から100まで1(ずつ)|増やしな(が)|ら\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:増', 'word:ら']);\r\n            if (ni < 0) {\r\n                break;\r\n            }\r\n            const fu = line[ni];\r\n            fu.type = 'word';\r\n            fu.value = '増繰返';\r\n            fu.josi = '';\r\n            line.splice(ni, 2, fu);\r\n        }\r\n        // Iを1から100まで1(ずつ)|増やしな(が)|ら\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:減', 'word:ら']);\r\n            if (ni < 0) {\r\n                break;\r\n            }\r\n            const fu = line[ni];\r\n            fu.type = 'word';\r\n            fu.value = '減繰返';\r\n            fu.josi = '';\r\n            line.splice(ni, 2, fu);\r\n        }\r\n        // を繰り返す → ここまで\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:を繰り返']);\r\n            if (ni < 0) {\r\n                break;\r\n            }\r\n            const fu = line[ni];\r\n            fu.type = 'ここまで';\r\n            fu.value = 'ここまで';\r\n            fu.josi = '';\r\n        }\r\n        // 'のすべての要素を0にする'\r\n        // 'のすべての要素に0を代入する'\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:すべて', 'word:要素']);\r\n            if (ni >= 1) {\r\n                replaceAllElementV(line, ni);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        // 'のすべての値を0にする'\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:すべて', 'word:値']);\r\n            if (ni >= 1) {\r\n                replaceAllElementV(line, ni);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        // 一つずつチェック\r\n        let j = 0;\r\n        while (j < line.length) {\r\n            const t = line[j];\r\n            // 減と増の分割\r\n            if (t.type === 'word' && t.value.length >= 2) {\r\n                const c = t.value.charAt(t.value.length - 1);\r\n                if (c === '減' || c === '増') {\r\n                    t.value = t.value.substring(0, t.value.length - 1);\r\n                    t.josi = 'だけ';\r\n                    line.splice(j + 1, 0, NewEmptyToken('word', c, t.indent, t.line, t.file));\r\n                }\r\n                j++;\r\n                continue;\r\n            }\r\n            j++;\r\n        }\r\n    }\r\n    // 最後に単純な置換を行う\r\n    for (let i = 0; i < tokens.length; i++) {\r\n        const t = tokens[i];\r\n        const a = DNCL_SIMPLES[t.type + ':' + t.value];\r\n        if (a !== undefined) {\r\n            t.type = a[0];\r\n            t.value = a[1];\r\n        }\r\n    }\r\n    tokens = joinTokenLines(lines);\r\n    return tokens;\r\n}\r\nfunction replaceAllElementV(line, ni) {\r\n    //\r\n    // const ni = findTokens(line, ['word:すべて', 'word:要素'])\r\n    //\r\n    const t = line[ni];\r\n    line[ni - 1].josi = '';\r\n    const eq = NewEmptyToken('eq', '=', t.indent, t.line, t.file);\r\n    const begin = NewEmptyToken('[', '[', t.indent, t.line, t.file);\r\n    const end = NewEmptyToken(']', ']', t.indent, t.line, t.file);\r\n    end.josi = 'に';\r\n    const val = line[ni + 2];\r\n    val.josi = '';\r\n    const times = NewEmptyToken('number', 100, t.indent, t.line, t.file);\r\n    times.josi = 'を';\r\n    const mul = NewEmptyToken('word', '掛', t.indent, t.line, t.file);\r\n    line.splice(ni, 4, eq, begin, val, end, times, mul);\r\n}\r\nfunction replaceAtohantei(tokens, fi) {\r\n    // `ここまで、(${r[1]})になるまでの間`\r\n    const wo = findTokens(tokens, ['word:を']);\r\n    if (wo >= 0) {\r\n        tokens[wo].type = 'ここまで';\r\n        tokens[wo].value = 'ここまで';\r\n    }\r\n    const ga = findTokens(tokens, ['word:が']);\r\n    if (ga >= 0) {\r\n        tokens[ga].type = 'ここまで';\r\n        tokens[ga].value = 'ここまで';\r\n    }\r\n    // なる:まで(fi) 実行(fi+1)\r\n    tokens[fi + 1].value = '間';\r\n}\r\nfunction findTokens(tokens, findTypeValue) {\r\n    const findA = findTypeValue.map(s => s.split(':'));\r\n    for (let i = 0; i < tokens.length; i++) {\r\n        let flag = true;\r\n        for (let j = 0; j < findA.length; j++) {\r\n            const f = findA[j];\r\n            const idx = i + j;\r\n            if (idx >= tokens.length) {\r\n                return -1;\r\n            }\r\n            if (tokens[idx].type === f[0] && tokens[idx].value === f[1]) {\r\n                continue;\r\n            }\r\n            else {\r\n                flag = false;\r\n                break;\r\n            }\r\n        }\r\n        if (flag) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nfunction useDNCLmode(tokens) {\r\n    // 先頭の100語調べる\r\n    for (let i = 0; i < tokens.length; i++) {\r\n        if (i > 100) {\r\n            break;\r\n        }\r\n        const t = tokens[i];\r\n        if (t.type === 'line_comment' && DNCL_KEYWORDS.indexOf(t.value) >= 0) {\r\n            t.type = 'DNCLモード';\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport const NakoDncl = {\r\n    convert: convertDNCL\r\n};\r\n","/**\r\n * DNCL ver2 に対応する構文\r\n */\r\n// import { NakoIndentError } from './nako_errors.mjs'\r\nimport { NewEmptyToken } from './nako_types.mjs';\r\nimport { joinTokenLines, splitTokens } from './nako_indent_inline.mjs';\r\nimport { newToken, debugTokens } from './nako_tools.mjs';\r\nconst IS_DEBUG = false;\r\nconst DNCL_ARRAY_INIT_COUNT = 30;\r\n// DNCL2モードのキーワード\r\nconst DNCL2_KEYWORDS = ['!DNCL2モード', '💡DNCL2モード', '!DNCL2', '💡DNCL2'];\r\n// 単純な置換チェック\r\nconst DNCL_SIMPLES = {\r\n    '←:←': ['eq', '='],\r\n    '÷:÷': ['÷÷', '÷÷'],\r\n    '{:{': ['[', '['],\r\n    '}:}': [']', ']'],\r\n    'word:and': ['and', 'かつ'],\r\n    'word:or': ['or', 'または'],\r\n    'word:not': ['not', '!'],\r\n    'word:乱数': ['word', '乱数範囲'],\r\n    'word:表示': ['word', '連続表示']\r\n};\r\n/**\r\n * DNCLのソースコードをなでしこに変換する\r\n */\r\nexport function convertDNCL2(tokens) {\r\n    if (!useDNCL2mode(tokens)) {\r\n        return tokens;\r\n    }\r\n    // 一行ずつに分ける\r\n    const lines = splitTokens(tokens, 'eol');\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i];\r\n        if (line.length <= 1) {\r\n            continue;\r\n        } // 空行は飛ばす\r\n        // --- 制御構文の変換 ---\r\n        // もし(条件)でないならば → もし(条件)でなければ\r\n        const nai = findTokens(line, ['word:ない']);\r\n        if (nai >= 1) {\r\n            const tt = line[nai];\r\n            if (tt.josi === 'ならば') {\r\n                line[nai - 1].josi = 'でなければ';\r\n                line.splice(nai, 1);\r\n            }\r\n        }\r\n        // そうでなければ(そう|でなければ) → 違えば\r\n        for (let ni = 0; ni < line.length; ni++) {\r\n            const t = line[ni];\r\n            if (t.value === 'そう' && t.josi === 'でなければ') {\r\n                t.type = '違えば';\r\n                t.value = '違えば';\r\n                t.josi = '';\r\n            }\r\n        }\r\n        // 'を実行し,そうでなければ': '違えば',\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:を実行', 'comma:,', 'word:そう']);\r\n            if (ni < 0) {\r\n                break;\r\n            }\r\n            const sou = line[ni + 2];\r\n            if (sou.josi === 'でなければ') {\r\n                sou.type = '違えば';\r\n                sou.value = '違えば';\r\n                sou.josi = '';\r\n                line.splice(ni, 3, sou);\r\n                continue;\r\n            }\r\n            else if (sou.josi === 'で') {\r\n                const nakumosi = line[ni + 3];\r\n                if (nakumosi.value.substring(0, 4) === 'なくもし') {\r\n                    sou.type = '違えば';\r\n                    sou.value = '違えば';\r\n                    sou.josi = '';\r\n                    line.splice(ni, 3, sou);\r\n                    if (nakumosi.value.length > 4) {\r\n                        const nakumosiTudukiStr = nakumosi.value.substring(4);\r\n                        const nakumosiToken = NewEmptyToken('word', nakumosiTudukiStr, nakumosi.indent, nakumosi.line, nakumosi.file);\r\n                        if (nakumosiTudukiStr.match(/^\\d/)) {\r\n                            nakumosiToken.type = 'number';\r\n                        }\r\n                        line.splice(ni + 2, 0, nakumosiToken);\r\n                        nakumosi.value = nakumosi.value.substring(0, 4);\r\n                    }\r\n                    nakumosi.type = 'もし';\r\n                    nakumosi.value = 'もし';\r\n                    nakumosi.josi = '';\r\n                    continue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        // Iを1から100まで1(ずつ)|増やしな(が)|ら\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:増', 'word:ら']);\r\n            if (ni < 0) {\r\n                break;\r\n            }\r\n            const fu = line[ni];\r\n            fu.type = 'word';\r\n            fu.value = '増繰返';\r\n            fu.josi = '';\r\n            line.splice(ni, 2, fu);\r\n        }\r\n        // Iを1から100まで1(ずつ)|増やしな(が)|ら\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:減', 'word:ら']);\r\n            if (ni < 0) {\r\n                break;\r\n            }\r\n            const fu = line[ni];\r\n            fu.type = 'word';\r\n            fu.value = '減繰返';\r\n            fu.josi = '';\r\n            line.splice(ni, 2, fu);\r\n        }\r\n        // Iを1から100まで1(ずつ)|増やしな(が)|ら繰り返(す)\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:増', 'word:ら繰り返']);\r\n            if (ni < 0) {\r\n                break;\r\n            }\r\n            const fu = line[ni];\r\n            fu.type = 'word';\r\n            fu.value = '増繰返';\r\n            fu.josi = '';\r\n            line.splice(ni, 2, fu);\r\n        }\r\n        // Iを1から100まで1(ずつ)|増やしな(が)|ら繰り返す\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:減', 'word:ら繰り返']);\r\n            if (ni < 0) {\r\n                break;\r\n            }\r\n            const fu = line[ni];\r\n            fu.type = 'word';\r\n            fu.value = '減繰返';\r\n            fu.josi = '';\r\n            line.splice(ni, 2, fu);\r\n        }\r\n        // --- 配列変数周りの変換 ---\r\n        for (let i = 0; i < line.length; i++) {\r\n            // 配列|Hindoの|すべての|(要素に|値に)|10を|代入する\r\n            if (tokenEq([['word:配列', 'word:配列変数'], 'word', 'word:すべて', ['word:要素', 'word:値'], '*', 'word:代入'], line, i)) {\r\n                const varToken = line[i + 1];\r\n                varToken.josi = '';\r\n                const valToken = line[i + 4];\r\n                valToken.josi = '';\r\n                line.splice(i, 6, varToken, newToken('eq', '=', varToken), newToken('word', '掛'), newToken('(', '('), newToken('[', '['), valToken, newToken(']', ']'), newToken('comma', ','), newToken('number', DNCL_ARRAY_INIT_COUNT), newToken(')', ')'));\r\n                i += 6; // skip\r\n            }\r\n            // Hensuの|すべての|(要素を|値を)|0に|する\r\n            if (tokenEq(['word', 'word:すべて', ['word:要素', 'word:値'], ['number', 'string', 'word'], 'word:する'], line, i)) {\r\n                const varToken = line[i];\r\n                varToken.josi = '';\r\n                const valToken = line[i + 3];\r\n                valToken.josi = '';\r\n                line.splice(i, 5, varToken, newToken('eq', '=', varToken), newToken('word', '掛'), newToken('(', '('), newToken('[', '['), valToken, newToken(']', ']'), newToken('comma', ','), newToken('number', DNCL_ARRAY_INIT_COUNT), newToken(')', ')'));\r\n            }\r\n            // 配列変数 | xxを | 初期化する\r\n            if (tokenEq([['word:配列変数', 'word:配列'], 'word', 'word:初期化'], line, i)) {\r\n                const varToken = line[i + 1];\r\n                varToken.josi = '';\r\n                line.splice(i, 3, varToken, newToken('eq', '=', varToken), newToken('word', '掛'), newToken('(', '('), newToken('[', '['), newToken('number', 0), newToken(']', ']'), newToken('comma', ','), newToken('number', DNCL_ARRAY_INIT_COUNT), newToken(')', ')'));\r\n            }\r\n        }\r\n        // --- その他の変換 ---\r\n        // 二進で表示 (255) → 二進表示(255)\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:二進', 'word:表示']);\r\n            if (ni < 0) {\r\n                break;\r\n            }\r\n            line[ni].value = '二進表示';\r\n            line[ni].josi = '';\r\n            line.splice(ni + 1, 1);\r\n        }\r\n        // '改行なしで表示' → '連続無改行表示'\r\n        for (;;) {\r\n            const ni = findTokens(line, ['word:改行', 'word:表示']);\r\n            if (ni < 0) {\r\n                break;\r\n            }\r\n            // ここ「改行なしで表示」でも「改行ありで表示」でも同じになってしまう\r\n            // なでしこの制限のため仕方なし\r\n            // 「改行ありで表示」は今のところDNCLに存在しないので無視する\r\n            // もし将来的に区別が必要なら、プリプロセス処理でマクロ的に置換処理を行うことで対応できると思う\r\n            const t = line[ni];\r\n            t.value = '連続無改行表示';\r\n            t.josi = '';\r\n            line.splice(ni + 1, 1);\r\n        }\r\n        // 一つずつチェック\r\n        let j = 0;\r\n        while (j < line.length) {\r\n            const t = line[j];\r\n            // 減と増の分割\r\n            if (t.type === 'word' && t.value.length >= 2) {\r\n                const c = t.value.charAt(t.value.length - 1);\r\n                if (c === '減' || c === '増') {\r\n                    t.value = t.value.substring(0, t.value.length - 1);\r\n                    t.josi = 'だけ';\r\n                    line.splice(j + 1, 0, NewEmptyToken('word', c, t.indent, t.line, t.file));\r\n                }\r\n                j++;\r\n                continue;\r\n            }\r\n            j++;\r\n        }\r\n    }\r\n    // 最後に単純な置換を行う\r\n    for (let i = 0; i < tokens.length; i++) {\r\n        const t = tokens[i];\r\n        const a = DNCL_SIMPLES[t.type + ':' + t.value];\r\n        if (a !== undefined) {\r\n            t.type = a[0];\r\n            t.value = a[1];\r\n        }\r\n    }\r\n    tokens = joinTokenLines(lines);\r\n    if (IS_DEBUG) {\r\n        console.log('@@@---DNCL:tokens---');\r\n        console.log(debugTokens(tokens));\r\n        console.log('@@@/---DNCL:tokens---');\r\n    }\r\n    return tokens;\r\n}\r\n/**\r\n * トークンが合致するかを確認する\r\n * @param typeValues ['word:それ']のようなタイプ名と値の配列/'*'でワイルドカードが使える/\":\"がなればタイプだけ確認/配列で選択\r\n * @param lines 差し替え\r\n * @param fromIndex 検索場所\r\n * @returns 合致したかどうか\r\n */\r\nfunction tokenEq(typeValues, lines, fromIndex) {\r\n    const check = (pattern, t) => {\r\n        if (pattern instanceof Array) {\r\n            for (let i = 0; i < pattern.length; i++) {\r\n                if (check(pattern[i], t)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        if (pattern === '*') {\r\n            return true;\r\n        }\r\n        if (pattern.indexOf(':') < 0) {\r\n            if (pattern === t.type) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        const tv = `${t.type}:${t.value}`;\r\n        if (pattern === tv) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    for (let i = 0; i < typeValues.length; i++) {\r\n        const idx = i + fromIndex;\r\n        if (idx >= lines.length) {\r\n            return false;\r\n        }\r\n        const pat = typeValues[i];\r\n        const t = lines[idx];\r\n        if (!check(pat, t)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction findTokens(tokens, findTypeValue) {\r\n    const findA = findTypeValue.map(s => s.split(':'));\r\n    for (let i = 0; i < tokens.length; i++) {\r\n        let flag = true;\r\n        for (let j = 0; j < findA.length; j++) {\r\n            const f = findA[j];\r\n            const idx = i + j;\r\n            if (idx >= tokens.length) {\r\n                return -1;\r\n            }\r\n            if (tokens[idx].type === f[0] && tokens[idx].value === f[1]) {\r\n                continue;\r\n            }\r\n            else {\r\n                flag = false;\r\n                break;\r\n            }\r\n        }\r\n        if (flag) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nfunction useDNCL2mode(tokens) {\r\n    // 先頭の100語調べる\r\n    for (let i = 0; i < tokens.length; i++) {\r\n        if (i > 100) {\r\n            break;\r\n        }\r\n        const t = tokens[i];\r\n        if (t.type === 'line_comment' && DNCL2_KEYWORDS.indexOf(t.value) >= 0) {\r\n            t.type = 'DNCL2モード';\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n","/** prepareとtokenizeのソースマッピング */\r\nexport class SourceMappingOfTokenization {\r\n    /**\r\n       * @param {number} sourceCodeLength\r\n       * @param {PreprocessItem[]} preprocessed\r\n       */\r\n    constructor(sourceCodeLength, preprocessed) {\r\n        /** @private @readonly */\r\n        this.sourceCodeLength = sourceCodeLength;\r\n        /** @private @readonly */\r\n        this.preprocessed = preprocessed;\r\n        let i = 0;\r\n        /** @private @readonly @type {number[]} */\r\n        this.cumulativeSum = [];\r\n        for (const el of preprocessed) {\r\n            this.cumulativeSum.push(i);\r\n            i += el.text.length;\r\n        }\r\n        /** @private */\r\n        this.lastIndex = 0;\r\n        /** @private */\r\n        this.lastPreprocessedCodePosition = 0;\r\n    }\r\n    /**\r\n       * preprocess後の文字列上のoffsetからソースコード上のoffsetへ変換\r\n       * @param {number} preprocessedCodePosition\r\n       * @returns {number}\r\n       */\r\n    map(preprocessedCodePosition) {\r\n        const i = this.findIndex(preprocessedCodePosition);\r\n        return Math.min(this.preprocessed[i].sourcePosition + (preprocessedCodePosition - this.cumulativeSum[i]), i === this.preprocessed.length - 1 ? this.sourceCodeLength : this.preprocessed[i + 1].sourcePosition - 1);\r\n    }\r\n    /**\r\n       * @param {number} preprocessedCodePosition\r\n       * @returns {number}\r\n       */\r\n    findIndex(preprocessedCodePosition) {\r\n        // 連続アクセスに対する高速化\r\n        if (preprocessedCodePosition < this.lastPreprocessedCodePosition) {\r\n            this.lastIndex = 0;\r\n        }\r\n        this.lastPreprocessedCodePosition = preprocessedCodePosition;\r\n        for (let i = this.lastIndex; i < this.preprocessed.length - 1; i++) {\r\n            if (preprocessedCodePosition < this.cumulativeSum[i + 1]) {\r\n                this.lastIndex = i;\r\n                return i;\r\n            }\r\n        }\r\n        this.lastIndex = this.preprocessed.length - 1;\r\n        return this.preprocessed.length - 1;\r\n    }\r\n}\r\nexport class SourceMappingOfIndentSyntax {\r\n    /**\r\n       * @param {string} codeAfterProcessingIndentationSyntax\r\n       * @param {readonly number[]} linesInsertedByIndentationSyntax\r\n       * @param {readonly { lineNumber: number, len: number }[]} linesDeletedByIndentationSyntax\r\n       */\r\n    constructor(codeAfterProcessingIndentationSyntax, linesInsertedByIndentationSyntax, linesDeletedByIndentationSyntax) {\r\n        /** @private @type {{ offset: number, len: number }[]} */\r\n        this.lines = [];\r\n        /** @private @readonly */\r\n        this.linesInsertedByIndentationSyntax = linesInsertedByIndentationSyntax;\r\n        /** @private @readonly */\r\n        this.linesDeletedByIndentationSyntax = linesDeletedByIndentationSyntax;\r\n        let offset = 0;\r\n        for (const line of codeAfterProcessingIndentationSyntax.split('\\n')) {\r\n            this.lines.push({ offset, len: line.length });\r\n            offset += line.length + 1;\r\n        }\r\n        /** @private */\r\n        this.lastLineNumber = 0;\r\n        /** @private */\r\n        this.lastOffset = 0;\r\n    }\r\n    /**\r\n       * @param {number | null} startOffset\r\n       * @param {number | null} endOffset\r\n       * @returns {{ startOffset: number | null, endOffset: number | null }}\r\n       */\r\n    map(startOffset, endOffset) {\r\n        if (startOffset === null) {\r\n            return { startOffset, endOffset };\r\n        }\r\n        // 何行目かを判定\r\n        const tokenLine = this.getLineNumber(startOffset);\r\n        for (const insertedLine of this.linesInsertedByIndentationSyntax) {\r\n            // インデント構文の処理後のソースコードの `insertedLine` 行目にあるトークンのソースマップ情報を削除する。\r\n            if (tokenLine === insertedLine) {\r\n                startOffset = null;\r\n                endOffset = null;\r\n                break;\r\n            }\r\n            // インデント構文の処理後のソースコードの `insertedLine` 行目以降にあるトークンのoffsetから\r\n            // `linesInsertedByIndentationSyntax[i]` 行目の文字数（\\rを含む） を引く。\r\n            if (tokenLine > insertedLine) {\r\n                // \"\\n\"の分1足す\r\n                startOffset -= this.lines[insertedLine].len + 1;\r\n                if (endOffset !== null) {\r\n                    endOffset -= this.lines[insertedLine].len + 1;\r\n                }\r\n            }\r\n        }\r\n        for (const deletedLine of this.linesDeletedByIndentationSyntax) {\r\n            if (tokenLine >= deletedLine.lineNumber) {\r\n                // \"\\n\"の分1足す\r\n                if (startOffset !== null) {\r\n                    startOffset += deletedLine.len + 1;\r\n                }\r\n                if (endOffset !== null) {\r\n                    endOffset += deletedLine.len + 1;\r\n                }\r\n            }\r\n        }\r\n        return { startOffset, endOffset };\r\n    }\r\n    /**\r\n       * @param {number} offset\r\n       * @returns {number}\r\n       * @private\r\n       */\r\n    getLineNumber(offset) {\r\n        // 連続アクセスに対する高速化\r\n        if (offset < this.lastOffset) {\r\n            this.lastLineNumber = 0;\r\n        }\r\n        this.lastOffset = offset;\r\n        for (let i = this.lastLineNumber; i < this.lines.length - 1; i++) {\r\n            if (offset < this.lines[i + 1].offset) {\r\n                this.lastLineNumber = i;\r\n                return i;\r\n            }\r\n        }\r\n        this.lastLineNumber = this.lines.length - 1;\r\n        return this.lines.length - 1;\r\n    }\r\n}\r\n/** offsetから (line, column) へ変換する。 */\r\nexport class OffsetToLineColumn {\r\n    /**\r\n       * @param {string} code\r\n       */\r\n    constructor(code) {\r\n        /** @private @type {number[]} */\r\n        this.lineOffsets = [];\r\n        // 各行の先頭位置を先に計算しておく\r\n        let offset = 0;\r\n        for (const line of code.split('\\n')) {\r\n            this.lineOffsets.push(offset);\r\n            offset += line.length + 1;\r\n        }\r\n        /** @private */\r\n        this.lastLineNumber = 0;\r\n        /** @private */\r\n        this.lastOffset = 0;\r\n    }\r\n    /**\r\n       * @param {number} offset\r\n       * @param {boolean} oneBasedLineNumber trueのときlineを1から始める\r\n       * @returns {{ line: number, column: number }}\r\n       */\r\n    map(offset, oneBasedLineNumber) {\r\n        // 連続アクセスに対する高速化\r\n        if (offset < this.lastOffset) {\r\n            this.lastLineNumber = 0;\r\n        }\r\n        this.lastOffset = offset;\r\n        for (let i = this.lastLineNumber; i < this.lineOffsets.length - 1; i++) {\r\n            if (offset < this.lineOffsets[i + 1]) {\r\n                this.lastLineNumber = i;\r\n                return {\r\n                    line: i + (oneBasedLineNumber ? 1 : 0),\r\n                    column: offset - this.lineOffsets[i]\r\n                };\r\n            }\r\n        }\r\n        this.lastLineNumber = this.lineOffsets.length - 1;\r\n        return {\r\n            line: this.lineOffsets.length - 1 + (oneBasedLineNumber ? 1 : 0),\r\n            column: offset - this.lineOffsets[this.lineOffsets.length - 1]\r\n        };\r\n    }\r\n}\r\n/**\r\n * preCodeの分、ソースマップのoffset、行数、列数を減らす。\r\n * @type {<T extends {line?: number, column?: number, startOffset: number | null, endOffset: number | null }>(sourceMap: T, preCode: string) => T}\r\n */\r\nexport function subtractSourceMapByPreCodeLength(sourceMap, preCode) {\r\n    // offsetは単純に引くだけでよい\r\n    if (typeof sourceMap.startOffset === 'number') {\r\n        sourceMap.startOffset -= preCode.length;\r\n    }\r\n    if (typeof sourceMap.endOffset === 'number') {\r\n        sourceMap.endOffset -= preCode.length;\r\n    }\r\n    // たとえば preCode = 'abc\\ndef\\nghi' のとき、line -= 2 して、先頭行なら column -= 3 もする。\r\n    if (preCode !== '') {\r\n        const lines = preCode.split('\\n');\r\n        if (typeof sourceMap.line === 'number') {\r\n            sourceMap.line -= lines.length - 1;\r\n        }\r\n        if (sourceMap.line === 0 && typeof sourceMap.column === 'number') {\r\n            sourceMap.column -= lines[lines.length - 1].length;\r\n        }\r\n    }\r\n    return sourceMap;\r\n}\r\n","/**\r\n * ブラウザとNode.jsでテキストへの色付けを共通化するためのコード\r\n */\r\n/**\r\n * ANSI escape code の一部\r\n */\r\nconst color = { reset: '\\x1b[0m', bold: '\\x1b[1m', black: '\\x1b[30m', red: '\\x1b[31m', green: '\\x1b[32m', yellow: '\\x1b[33m', blue: '\\x1b[34m', magenta: '\\x1b[35m', cyan: '\\x1b[36m', white: '\\x1b[37m' };\r\n// 30 ~ 37\r\nconst colorNames = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'];\r\n/** @param {string} t */\r\nconst escapeHTML = (t) => t.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;');\r\n/**\r\n * ANSI escape code で色付けしたテキストを、HTMLやブラウザのconsole.log用のフォーマットに変換する。\r\n * たとえば `convertColorTextFormat(`foo${color.red}bar`).html` で `\"foobar\"` の `\"bar\"` の部分が赤く表示されるHTMLを取得できる。\r\n * @param {string} text\r\n * @returns {{ nodeConsole: string, noColor: string, html: string, browserConsole: string[] }}\r\n */\r\nconst convertColorTextFormat = (text) => {\r\n    // textから [ANSI escape code](https://en.wikipedia.org/wiki/ANSI_escape_code) を削除して、色の無いテキストを作る。\r\n    // eslint-disable-next-line no-control-regex\r\n    const noColor = text.replace(/\\x1b\\[\\d+m/g, '');\r\n    // nodeConsoleからbrowserConsoleを作る\r\n    /** @type {string[]} */\r\n    const browserConsoleStyles = [];\r\n    let consoleColor = 'inherit'; // 文字色\r\n    let consoleFontWeight = 'inherit'; // 文字の太さ\r\n    // /\\x1b\\[(\\d+)m/ で正規表現マッチし、それぞれを %c で置換すると同時に browserConsoleStyles にCSSでの表現をpushする。\r\n    // console.log(browserConsoleText, ...browserConsoleStyles) で表示することを想定。\r\n    const browserConsoleText = text === noColor\r\n        ? noColor\r\n        // eslint-disable-next-line no-control-regex\r\n        : text.replace(/\\x1b\\[(\\d+)m/g, (_, m1str) => {\r\n            const m1 = +m1str;\r\n            if (m1 === 0) {\r\n                consoleColor = 'inherit';\r\n                consoleFontWeight = 'inherit';\r\n            }\r\n            if (m1 === 1) {\r\n                consoleFontWeight = 'bold';\r\n            }\r\n            if (m1 >= 30 && m1 <= 37) {\r\n                consoleColor = colorNames[m1 - 30];\r\n            }\r\n            browserConsoleStyles.push(`color: ${consoleColor}; font-weight: ${consoleFontWeight};`);\r\n            return '%c';\r\n        });\r\n    // nodeConsoleからhtmlを作る\r\n    let htmlColor = 'inherit'; // 文字色\r\n    let htmlFontWeight = 'inherit'; // 文字の太さ\r\n    // textが色情報を含まないならそれをそのまま使い、含むなら全体を <span>で囲んで、更に、ANSI escape code で囲まれた部分を対応する style を付けた <span> で囲む。\r\n    // eslint-disable-next-line multiline-ternary\r\n    const html = text === noColor ? noColor : ('<span>' + escapeHTML(text)\r\n        // eslint-disable-next-line no-control-regex\r\n        .replace(/\\x1b\\[(\\d+)m/g, (_, m1str) => {\r\n        const m1 = +m1str;\r\n        if (m1 === 0) { // リセット\r\n            htmlColor = 'inherit';\r\n            htmlFontWeight = 'inherit';\r\n        }\r\n        if (m1 === 1) { // 太字化\r\n            htmlFontWeight = 'bold';\r\n        }\r\n        if (m1 >= 30 && m1 <= 37) { // 文字色の変更\r\n            htmlColor = colorNames[m1 - 30];\r\n        }\r\n        return `</span><span style=\"color: ${htmlColor}; font-weight: ${htmlFontWeight};\">`;\r\n    }) + '</span>');\r\n    // 各表現を返す。\r\n    return {\r\n        noColor,\r\n        nodeConsole: text === noColor\r\n            ? noColor // textが色の情報を含まないならnoColorを返す。\r\n            : text + '\\x1b[0m',\r\n        html,\r\n        browserConsole: [browserConsoleText, ...browserConsoleStyles]\r\n    };\r\n};\r\nexport const NakoColors = { convertColorTextFormat, colorNames, color };\r\n","/** NakoLogger */\r\nimport { NakoError, NakoRuntimeError } from './nako_errors.mjs';\r\nimport { NakoColors } from './nako_colors.mjs';\r\n/** ログレベル - 数字が高いほど優先度が高い。 */\r\nexport class LogLevel {\r\n    // string to level no\r\n    static fromS(levelStr) {\r\n        let level = LogLevel.trace;\r\n        switch (levelStr) {\r\n            case 'all':\r\n                level = LogLevel.all;\r\n                break;\r\n            case 'trace':\r\n                level = LogLevel.trace;\r\n                break;\r\n            case 'debug':\r\n                level = LogLevel.debug;\r\n                break;\r\n            case 'info':\r\n                level = LogLevel.info;\r\n                break;\r\n            case 'warn':\r\n                level = LogLevel.warn;\r\n                break;\r\n            case 'error':\r\n                level = LogLevel.error;\r\n                break;\r\n            case 'stdout':\r\n                level = LogLevel.stdout;\r\n                break;\r\n            default:\r\n                throw new Error('[NakoLogger] unknown logger level:' + levelStr);\r\n        }\r\n        return level;\r\n    }\r\n    static toString(level) {\r\n        const levels = ['all', 'trace', 'debug', 'info', 'warn', 'error', 'stdout'];\r\n        return levels[level];\r\n    }\r\n}\r\n// level no\r\nLogLevel.all = 0;\r\nLogLevel.trace = 1;\r\nLogLevel.debug = 2;\r\nLogLevel.info = 3;\r\nLogLevel.warn = 4;\r\nLogLevel.error = 5;\r\nLogLevel.stdout = 6;\r\n/**\r\n * エラー位置を日本語で表示する。\r\n * たとえば `stringifyPosition({ file: \"foo.txt\", line: 5 })` は `\"foo.txt(6行目):\"` を出力する。\r\n */\r\nfunction stringifyPosition(p) {\r\n    if (!p) {\r\n        return '';\r\n    }\r\n    return `${p.file || ''}${p.line === undefined ? '' : `(${p.line + 1}行目): `}`;\r\n}\r\n/**\r\n * コンパイラのログ情報を出力するためのクラス。\r\n * trace(), debug(), info(), warn(), error() はそれぞれメッセージに `[警告]` などのタグとエラー位置の日本語表現を付けて表示する。\r\n * error() は引数にエラーオブジェクトを受け取ることもでき、その場合エラーオブジェクトからエラーメッセージとエラー位置が取り出される。\r\n */\r\nexport class NakoLogger {\r\n    constructor() {\r\n        this.listeners = [];\r\n        this.logs = '';\r\n        this.position = '';\r\n    }\r\n    getErrorLogs() {\r\n        return [this.logs.replace(/\\s+$/, ''), this.position];\r\n    }\r\n    clear() {\r\n        this.logs = '';\r\n        this.position = '';\r\n    }\r\n    /**\r\n     * sendメソッドで送られた情報を受け取るコールバックを設定する。\r\n     * @param levelStr\r\n     * @param callback\r\n     */\r\n    addListener(levelStr, callback) {\r\n        const level = LogLevel.fromS(levelStr);\r\n        this.listeners.push({ level, callback });\r\n    }\r\n    /**\r\n     * addListenerメソッドで設定したコールバックを取り外す。\r\n     * @param {LogListener} callback\r\n     */\r\n    removeListener(callback) {\r\n        this.listeners = this.listeners.filter((l) => l.callback !== callback);\r\n    }\r\n    /** 本体開発時のデバッグ情報（debugより更に詳細な情報）\r\n     * @param {string} message\r\n     * @param {Position | null} position\r\n     */\r\n    trace(message, position = null) {\r\n        this.sendI(LogLevel.trace, `${NakoColors.color.bold}[デバッグ情報（詳細）]${NakoColors.color.reset}${stringifyPosition(position)}${message}`, position);\r\n    }\r\n    /** 本体開発時のデバッグ情報\r\n     * @param {string} message\r\n     * @param {Position | null} position\r\n     */\r\n    debug(message, position = null) {\r\n        this.sendI(LogLevel.debug, `${NakoColors.color.bold}[デバッグ情報]${NakoColors.color.reset}${stringifyPosition(position)}${message}`, position);\r\n    }\r\n    /** ユーザープログラムのデバッグ情報（あまり重要ではないもの）\r\n     * @param {string} message\r\n     * @param {Position | null} position\r\n     */\r\n    info(message, position = null) {\r\n        this.sendI(LogLevel.info, `${NakoColors.color.bold}${NakoColors.color.blue}[情報]${NakoColors.color.reset}${stringifyPosition(position)}${message}`, position);\r\n    }\r\n    /** ユーザープログラムのデバッグ情報（重要なもの）\r\n     * @param {string} message\r\n     * @param {Position | null} position\r\n     */\r\n    warn(message, position = null) {\r\n        this.sendI(LogLevel.warn, `${NakoColors.color.bold}${NakoColors.color.green}[警告]${NakoColors.color.reset}${stringifyPosition(position)}${message}`, position);\r\n    }\r\n    /** エラーメッセージ\r\n     * @param {string | Error} message\r\n     * @param {Position | null} position\r\n     */\r\n    error(message, position = null) {\r\n        // NakoErrorか判定 (`message instanceof NakoError`では判定できない場合がある)\r\n        if (message instanceof Error && typeof message.type === 'string') {\r\n            // NakoErrorか\r\n            const etype = message.type;\r\n            switch (etype) {\r\n                case 'NakoRuntimeError':\r\n                case 'NakoError':\r\n                    if (message instanceof NakoError) {\r\n                        const e = message;\r\n                        let pos = position;\r\n                        if (pos === null || pos === undefined) {\r\n                            pos = { file: e.file, line: e.line || 0, startOffset: 0, endOffset: 0 };\r\n                        }\r\n                        this.sendI(LogLevel.error, e.message, pos);\r\n                        return;\r\n                    }\r\n            }\r\n        }\r\n        if (message instanceof Error) {\r\n            // 一般のエラーの場合は、messageのみ取得できる。\r\n            message = message.message;\r\n        }\r\n        this.sendI(LogLevel.error, `${NakoColors.color.bold}${NakoColors.color.red}[エラー]${NakoColors.color.reset}${stringifyPosition(position)}${message}`, position);\r\n    }\r\n    /** RuntimeErrorを生成する */\r\n    runtimeError(error, posStr) {\r\n        const e = new NakoRuntimeError(error, posStr);\r\n        return e;\r\n    }\r\n    /** ユーザープログラムのデバッグ情報（すべて)\r\n     * @param {string} message\r\n     * @param {Position | null} position\r\n     */\r\n    stdout(message, position = null) {\r\n        this.sendI(LogLevel.stdout, `${message}`, position);\r\n    }\r\n    /** 指定したlevelのlistenerにメッセージを送る。htmlやbrowserConsoleは無ければnodeConsoleから生成する。 */\r\n    send(levelStr, nodeConsole, position, html = null, browserConsole = null) {\r\n        const i = LogLevel.fromS(levelStr);\r\n        this.sendI(i, nodeConsole, position, html, browserConsole);\r\n    }\r\n    /** 指定したlevelのlistenerにメッセージを送る。htmlやbrowserConsoleは無ければnodeConsoleから生成する。 */\r\n    sendI(level, nodeConsole, position, html = null, browserConsole = null) {\r\n        const makeData = () => {\r\n            // nodeConsoleからnoColor, nodeCondoleなどの形式を生成する。\r\n            const formats = NakoColors.convertColorTextFormat(nodeConsole);\r\n            // ログが複数行から構成される場合は、htmlでの表現にborderを設定する。\r\n            let style = '';\r\n            if (nodeConsole.includes('\\n')) {\r\n                style += 'border-top: 1px solid #8080806b; border-bottom: 1px solid #8080806b;';\r\n            }\r\n            // 各イベントリスナーが受け取るデータ\r\n            const data = {\r\n                noColor: formats.noColor,\r\n                nodeConsole: formats.nodeConsole,\r\n                browserConsole: browserConsole || formats.browserConsole,\r\n                html: `<div style=\"${style}\">` + (html || formats.html) + '</div>',\r\n                level: LogLevel.toString(level),\r\n                position\r\n            };\r\n            return data;\r\n        };\r\n        // エラーならログに追加\r\n        if (level === LogLevel.error) {\r\n            const data = makeData();\r\n            this.logs += data.noColor + '\\n';\r\n            if (position && this.position !== null) {\r\n                this.position = `l${position.line}:${position.file}`;\r\n            }\r\n        }\r\n        // 登録したリスナーに通知する\r\n        for (const l of this.listeners) {\r\n            if (l.level <= level) {\r\n                const data = makeData();\r\n                l.callback(data);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { NakoColors } from './nako_colors.mjs';\r\n/**\r\n * コンパイルされたなでしこのプログラムで、グローバル空間のthisが指すオブジェクト\r\n */\r\nexport class NakoGlobal {\r\n    /**\r\n     * @param compiler\r\n     * @param gen\r\n     */\r\n    constructor(compiler, gen, guid = 0) {\r\n        this.guid = guid;\r\n        this.lastJSCode = '';\r\n        // ユーザーのプログラムから編集される変数\r\n        this.__locals = {};\r\n        this.__varslist = [\r\n            { ...compiler.__varslist[0] },\r\n            { ...compiler.__varslist[1] },\r\n            { ...compiler.__varslist[2] } // local [2][3][4][5] ...\r\n        ];\r\n        this.numFailures = 0;\r\n        this.index = 0;\r\n        this.nextIndex = -1;\r\n        this.__code = [];\r\n        this.__callstack = [];\r\n        this.__stack = [];\r\n        this.__labels = [];\r\n        this.__genMode = gen.genMode;\r\n        // バージョン情報の引き継ぎ\r\n        this.version = compiler.version;\r\n        this.coreVersion = compiler.coreVersion;\r\n        // PluginSystemとdestroy()から参照するため\r\n        this.__module = { ...compiler.__module }; // shallow copy\r\n        this.pluginfiles = { ...compiler.getPluginfiles() };\r\n        // PluginWorkerでユーザー定義関数のJavaScriptコードをworkerのコンパイラのインスタンスへコピーするため\r\n        this.gen = gen;\r\n        // 以下のメソッドで使うため\r\n        this.logger = compiler.getLogger();\r\n        this.compiler = compiler;\r\n    }\r\n    clearLog() {\r\n        this.__varslist[0]['表示ログ'] = '';\r\n    }\r\n    get log() {\r\n        let s = this.__varslist[0]['表示ログ'];\r\n        s = s.replace(/\\s+$/, '');\r\n        return s;\r\n    }\r\n    /**\r\n     * 「ナデシコ」命令のためのメソッド\r\n     */\r\n    runEx(code, fname, opts, preCode = '') {\r\n        // スコープを共有して実行\r\n        opts.preCode = preCode;\r\n        opts.nakoGlobal = this;\r\n        return this.compiler.runSync(code, fname, opts);\r\n    }\r\n    async runAsync(code, fname, opts, preCode = '') {\r\n        // スコープを共有して実行\r\n        opts.preCode = preCode;\r\n        opts.nakoGlobal = this;\r\n        return await this.compiler.runAsync(code, fname, opts);\r\n    }\r\n    /**\r\n     * テスト実行のためのメソッド\r\n     * @param {{ name: string, f: () => void }[]} tests\r\n     */\r\n    _runTests(tests) {\r\n        let text = `${NakoColors.color.bold}テストの実行結果${NakoColors.color.reset}\\n`;\r\n        let pass = 0;\r\n        let numFailures = 0;\r\n        for (const t of tests) {\r\n            try {\r\n                t.f();\r\n                text += `${NakoColors.color.green}✔${NakoColors.color.reset} ${t.name}\\n`;\r\n                pass++;\r\n            }\r\n            catch (err) {\r\n                text += `${NakoColors.color.red}☓${NakoColors.color.reset} ${t.name}: ${err.message}\\n`;\r\n                numFailures++;\r\n            }\r\n        }\r\n        if (numFailures > 0) {\r\n            text += `${NakoColors.color.green}成功 ${pass}件 ${NakoColors.color.red}失敗 ${numFailures}件`;\r\n        }\r\n        else {\r\n            text += `${NakoColors.color.green}成功 ${pass}件`;\r\n        }\r\n        this.numFailures = numFailures;\r\n        this.logger.stdout(text);\r\n    }\r\n    /**\r\n     * 毎プラグインの「!クリア」関数を実行\r\n     */\r\n    clearPlugins() {\r\n        // 実行している関数をすべて終了させる\r\n        // プラグインのクリア関数を呼び出す\r\n        const clearName = '!クリア';\r\n        for (const pname in this.pluginfiles) {\r\n            const po = this.__module[pname];\r\n            if (po[clearName] && po[clearName].fn) {\r\n                po[clearName].fn(this);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 各種リセット処理\r\n     */\r\n    reset() {\r\n        this.clearPlugins();\r\n    }\r\n    destroy() {\r\n        this.reset();\r\n    }\r\n}\r\n","/** plugin_math */\r\nexport default {\r\n    '初期化': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            // 初期化不要\r\n        }\r\n    },\r\n    // @三角関数\r\n    'SIN': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return Math.sin(v);\r\n        }\r\n    },\r\n    'COS': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return Math.cos(v);\r\n        }\r\n    },\r\n    'TAN': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return Math.tan(v);\r\n        }\r\n    },\r\n    'ARCSIN': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return Math.asin(v);\r\n        }\r\n    },\r\n    'ARCCOS': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return Math.acos(v);\r\n        }\r\n    },\r\n    'ARCTAN': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return Math.atan(v);\r\n        }\r\n    },\r\n    'ATAN2': {\r\n        type: 'func',\r\n        josi: [['と'], ['の']],\r\n        pure: true,\r\n        fn: function (y, x) {\r\n            return Math.atan2(y, x);\r\n        }\r\n    },\r\n    '座標角度計算': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (XY) {\r\n            return Math.atan2(XY[1], XY[0]) * 180 / Math.PI;\r\n        }\r\n    },\r\n    'RAD2DEG': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return v / Math.PI * 180;\r\n        }\r\n    },\r\n    'DEG2RAD': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return (v / 180) * Math.PI;\r\n        }\r\n    },\r\n    '度変換': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return v / Math.PI * 180;\r\n        }\r\n    },\r\n    'ラジアン変換': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return (v / 180) * Math.PI;\r\n        }\r\n    },\r\n    // @算術関数\r\n    'SIGN': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return (parseFloat(v) === 0) ? 0 : (v > 0) ? 1 : -1;\r\n        }\r\n    },\r\n    '符号': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: false,\r\n        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\n        fn: function (v, sys) {\r\n            return sys.__exec('SIGN', [v]);\r\n        }\r\n    },\r\n    'ABS': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return Math.abs(a);\r\n        }\r\n    },\r\n    '絶対値': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return Math.abs(a);\r\n        }\r\n    },\r\n    'EXP': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return Math.exp(a);\r\n        }\r\n    },\r\n    'HYPOT': {\r\n        type: 'func',\r\n        josi: [['と'], ['の']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return Math.hypot(a, b);\r\n        }\r\n    },\r\n    '斜辺': {\r\n        type: 'func',\r\n        josi: [['と'], ['の']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return Math.hypot(a, b);\r\n        }\r\n    },\r\n    'LN': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return Math.log(a);\r\n        }\r\n    },\r\n    'LOG': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return Math.log(a);\r\n        }\r\n    },\r\n    'LOGN': {\r\n        type: 'func',\r\n        josi: [['で'], ['の']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            if (a === 2) {\r\n                return Math.LOG2E * Math.log(b);\r\n            }\r\n            if (a === 10) {\r\n                return Math.LOG10E * Math.log(b);\r\n            }\r\n            return Math.log(b) / Math.log(a);\r\n        }\r\n    },\r\n    'FRAC': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return a % 1;\r\n        }\r\n    },\r\n    '小数部分': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return a % 1;\r\n        }\r\n    },\r\n    '整数部分': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return Math.trunc(a);\r\n        }\r\n    },\r\n    '乱数': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return Math.floor(Math.random() * a);\r\n        }\r\n    },\r\n    '乱数範囲': {\r\n        type: 'func',\r\n        josi: [['から'], ['までの', 'の']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            return (Math.floor(Math.random() * (b - a + 1)) + a);\r\n        }\r\n    },\r\n    'SQRT': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return Math.sqrt(a);\r\n        }\r\n    },\r\n    '平方根': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            return Math.sqrt(a);\r\n        }\r\n    },\r\n    // @数値切上切捨丸め\r\n    'ROUND': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return Math.round(v);\r\n        }\r\n    },\r\n    '四捨五入': {\r\n        type: 'func',\r\n        josi: [['を', 'の']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return Math.round(v);\r\n        }\r\n    },\r\n    '小数点切上': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            const base = Math.pow(10, b);\r\n            return Math.ceil(a * base) / base;\r\n        }\r\n    },\r\n    '小数点切下': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            const base = Math.pow(10, b);\r\n            return Math.floor(a * base) / base;\r\n        }\r\n    },\r\n    '小数点四捨五入': {\r\n        type: 'func',\r\n        josi: [['を'], ['で']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            const base = Math.pow(10, b);\r\n            return Math.round(a * base) / base;\r\n        }\r\n    },\r\n    'CEIL': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return Math.ceil(v);\r\n        }\r\n    },\r\n    '切上': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return Math.ceil(v);\r\n        }\r\n    },\r\n    'FLOOR': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return Math.floor(v);\r\n        }\r\n    },\r\n    '切捨': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (v) {\r\n            return Math.floor(v);\r\n        }\r\n    }\r\n};\r\n","export const options = {\r\n    delimiter: ',',\r\n    eol: '\\r\\n'\r\n};\r\nexport function resetEnv() {\r\n    options.delimiter = ',';\r\n    options.eol = '\\r\\n';\r\n}\r\nexport function parse(txt, delimiter = undefined) {\r\n    // delimiter\r\n    if (delimiter === undefined) {\r\n        delimiter = options.delimiter;\r\n    }\r\n    // check txt\r\n    txt = '' + txt + '\\n';\r\n    // convert CRLF to LF, and CR to LF\r\n    txt = txt.replace(/(\\r\\n|\\r)/g, '\\n');\r\n    // trim right\r\n    txt = txt.replace(/\\s+$/, '') + '\\n';\r\n    // set pattern\r\n    const patToDelim = '^(.*?)([\\\\' + delimiter + '\\\\n])';\r\n    const reToDelim = new RegExp(patToDelim);\r\n    // if value is number then convert to float\r\n    const convType = function (v) {\r\n        if (typeof (v) === 'string') {\r\n            if (v.search(/^[0-9.]+$/) >= 0) {\r\n                v = parseFloat(v); // convert number\r\n            }\r\n        }\r\n        return v;\r\n    };\r\n    // parse txt\r\n    const res = [];\r\n    let cells = [];\r\n    let c = '';\r\n    while (txt !== '') {\r\n        // first check delimiter (because /^\\s+/ skip delimiter'\\t') (#3)\r\n        c = txt.charAt(0);\r\n        if (c === delimiter) {\r\n            txt = txt.substring(1);\r\n            cells.push('');\r\n            continue;\r\n        }\r\n        // second check LF (#7)\r\n        if (c === '\\n') {\r\n            cells.push('');\r\n            res.push(cells);\r\n            cells = [];\r\n            txt = txt.substring(1);\r\n            continue;\r\n        }\r\n        // trim white space\r\n        txt = txt.replace(/^\\s+/, '');\r\n        c = txt.charAt(0);\r\n        // no data\r\n        if (c === delimiter) {\r\n            console.log('delimiter');\r\n            cells.push('');\r\n            txt = txt.substring(delimiter.length);\r\n            continue;\r\n        }\r\n        // written using the dialect of Excel\r\n        if (c === '=' && txt.charAt(1) === '\"') {\r\n            txt = txt.substring(1);\r\n            continue;\r\n        }\r\n        // number or simple string\r\n        if (c !== '\"') { // number or simple str\r\n            const m = reToDelim.exec(txt);\r\n            if (!m) {\r\n                cells.push(convType(txt));\r\n                res.push(cells);\r\n                cells = [];\r\n                break;\r\n            }\r\n            if (m[2] === '\\n') {\r\n                cells.push(convType(m[1]));\r\n                res.push(cells);\r\n                cells = [];\r\n            }\r\n            else if (m[2] === delimiter) {\r\n                cells.push(convType(m[1]));\r\n            }\r\n            txt = txt.substring(m[0].length);\r\n            continue;\r\n        }\r\n        // \"\" ... blank data\r\n        if (txt.substring(0, 2) === '\"\"') {\r\n            cells.push('');\r\n            txt = txt.substring(2);\r\n            continue;\r\n        }\r\n        // \"...\"\r\n        let i = 1;\r\n        let s = '';\r\n        while (i < txt.length) {\r\n            const c1 = txt.charAt(i);\r\n            const c2 = txt.charAt(i + 1);\r\n            // console.log(\"@\" + c1 + c2);\r\n            // 2quote => 1quote char\r\n            if (c1 === '\"' && c2 === '\"') {\r\n                i += 2;\r\n                s += '\"';\r\n                continue;\r\n            }\r\n            if (c1 === '\"') {\r\n                i++;\r\n                if (c2 === delimiter) {\r\n                    i++;\r\n                    cells.push(convType(s));\r\n                    s = '';\r\n                    break;\r\n                }\r\n                if (c2 === '\\n') {\r\n                    i++;\r\n                    cells.push(convType(s));\r\n                    res.push(cells);\r\n                    cells = [];\r\n                    break;\r\n                }\r\n                // if (c2 === \" \" || c2 === \"\\t\") {\r\n                i++;\r\n                continue;\r\n            }\r\n            s += c1;\r\n            i++;\r\n        }\r\n        txt = txt.substr(i);\r\n    }\r\n    if (cells.length > 0)\r\n        res.push(cells);\r\n    return res;\r\n}\r\nexport function stringify(ary, delimiter = undefined, eol = undefined) {\r\n    // check arguments\r\n    if (delimiter === undefined) {\r\n        delimiter = options.delimiter;\r\n    }\r\n    if (eol === undefined) {\r\n        eol = options.eol;\r\n    }\r\n    const valueConv = genValueConverter(delimiter);\r\n    if (ary === undefined)\r\n        return '';\r\n    let r = '';\r\n    for (let i = 0; i < ary.length; i++) {\r\n        const cells = ary[i];\r\n        if (cells === undefined) {\r\n            r += eol;\r\n            continue;\r\n        }\r\n        for (let j = 0; j < cells.length; j++) {\r\n            cells[j] = valueConv(cells[j]);\r\n        }\r\n        r += cells.join(delimiter) + eol;\r\n    }\r\n    // replace return code\r\n    r = r.replace(/(\\r\\n|\\r|\\n)/g, eol);\r\n    return r;\r\n}\r\nexport function replaceEolMark(eol) {\r\n    eol = eol.replace(/\\n\\r/g, '[CRLF]');\r\n    eol = eol.replace(/\\r/g, '[CR]');\r\n    eol = eol.replace(/\\n/g, '[LF]');\r\n    return eol;\r\n}\r\nfunction genValueConverter(delimiter) {\r\n    return function (s) {\r\n        s = '' + s;\r\n        let fQuot = false;\r\n        if (s.indexOf('\\n') >= 0 || s.indexOf('\\r') >= 0) {\r\n            fQuot = true;\r\n        }\r\n        if (s.indexOf(delimiter) >= 0) {\r\n            fQuot = true;\r\n        }\r\n        if (s.indexOf('\"') >= 0) {\r\n            fQuot = true;\r\n            s = s.replace(/\"/g, '\"\"');\r\n        }\r\n        if (fQuot)\r\n            s = '\"' + s + '\"';\r\n        return s;\r\n    };\r\n}\r\n","import { options, parse, stringify } from './nako_csv.mjs';\r\nconst PluginCSV = {\r\n    '初期化': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function () {\r\n            // 基本的に初期化不要\r\n        }\r\n    },\r\n    // @CSV操作\r\n    'CSV取得': {\r\n        type: 'func',\r\n        josi: [['を', 'の', 'で']],\r\n        pure: true,\r\n        fn: function (str) {\r\n            options.delimiter = ',';\r\n            return parse(str);\r\n        }\r\n    },\r\n    'TSV取得': {\r\n        type: 'func',\r\n        josi: [['を', 'の', 'で']],\r\n        pure: true,\r\n        fn: function (str) {\r\n            options.delimiter = '\\t';\r\n            return parse(str);\r\n        }\r\n    },\r\n    '表CSV変換': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            options.delimiter = ',';\r\n            return stringify(a);\r\n        }\r\n    },\r\n    '表TSV変換': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            options.delimiter = '\\t';\r\n            return stringify(a);\r\n        }\r\n    }\r\n};\r\nexport default PluginCSV;\r\n","export default {\r\n    '初期化': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            if (sys.__promise == null) {\r\n                sys.__promise = {\r\n                    setLastPromise: function (promise) {\r\n                        sys.__v0['そ'] = promise;\r\n                        return promise;\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    },\r\n    // @非同期処理の保証の定数\r\n    'そ': { type: 'const', value: '' },\r\n    // @非同期処理の保証\r\n    '動時': {\r\n        type: 'func',\r\n        josi: [['を', 'で']],\r\n        pure: true,\r\n        fn: function (callback, sys) {\r\n            return sys.__promise.setLastPromise(new Promise((resolve, reject) => {\r\n                return callback(resolve, reject);\r\n            }));\r\n        },\r\n        return_none: false\r\n    },\r\n    '成功時': {\r\n        type: 'func',\r\n        josi: [['を'], ['の', 'が', 'に']],\r\n        pure: true,\r\n        fn: function (callback, promise, sys) {\r\n            return sys.__promise.setLastPromise(promise.then((result) => {\r\n                sys.__v0['対象'] = result;\r\n                return callback(result);\r\n            }));\r\n        },\r\n        return_none: false\r\n    },\r\n    '処理時': {\r\n        type: 'func',\r\n        josi: [['を'], ['の', 'が', 'に']],\r\n        pure: true,\r\n        fn: function (cbFunc, promise, sys) {\r\n            return sys.__promise.setLastPromise(promise.then((result) => {\r\n                sys.__v0['対象'] = result;\r\n                return cbFunc(true, result, sys);\r\n            }, (reason) => {\r\n                sys.__v0['対象'] = reason;\r\n                return cbFunc(false, reason, sys);\r\n            }));\r\n        },\r\n        return_none: false\r\n    },\r\n    '失敗時': {\r\n        type: 'func',\r\n        josi: [['を'], ['の', 'が', 'に']],\r\n        pure: true,\r\n        fn: function (callback, promise, sys) {\r\n            return sys.__promise.setLastPromise(promise.catch((err) => {\r\n                sys.__v0['対象'] = err;\r\n                return callback(err);\r\n            }));\r\n        },\r\n        return_none: false\r\n    },\r\n    '終了時': {\r\n        type: 'func',\r\n        josi: [['を'], ['の', 'が', 'に']],\r\n        pure: true,\r\n        fn: function (callback, promise, sys) {\r\n            return sys.__promise.setLastPromise(promise.finally(() => {\r\n                return callback();\r\n            }));\r\n        },\r\n        return_none: false\r\n    },\r\n    '束': {\r\n        type: 'func',\r\n        josi: [['と', 'を']],\r\n        pure: true,\r\n        fn: function (...args) {\r\n            const sys = args.pop();\r\n            return sys.__promise.setLastPromise(Promise.all(args));\r\n        },\r\n        return_none: false\r\n    }\r\n};\r\n","/**\r\n * file: plugin_test.js\r\n * テスト実行用プラグイン\r\n */\r\nexport default {\r\n    // @テスト\r\n    'ASSERT等': {\r\n        type: 'func',\r\n        josi: [['と'], ['が']],\r\n        pure: true,\r\n        fn: function (a, b) {\r\n            if (a !== b) {\r\n                throw new Error(`不一致 [実際]${a} [期待]${b}`);\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n    'テスト実行': {\r\n        type: 'func',\r\n        josi: [['と'], ['で']],\r\n        pure: false,\r\n        fn: function (a, b, sys) {\r\n            sys.__exec('ASSERT等', [a, b, sys]);\r\n        }\r\n    },\r\n    'テスト等': {\r\n        type: 'func',\r\n        josi: [['と'], ['が']],\r\n        pure: false,\r\n        fn: function (a, b, sys) {\r\n            sys.__exec('ASSERT等', [a, b, sys]);\r\n        }\r\n    }\r\n};\r\n","// parser / lexer\r\nimport { NakoParser } from './nako_parser3.mjs';\r\nimport { NakoLexer } from './nako_lexer.mjs';\r\nimport { NakoPrepare } from './nako_prepare.mjs';\r\nimport { generateJS, NakoGenOptions } from './nako_gen.mjs';\r\nimport { NakoGenASync } from './nako_gen_async.mjs';\r\nimport { convertInlineIndent, convertIndentSyntax } from './nako_indent_inline.mjs';\r\nimport { convertDNCL } from './nako_from_dncl.mjs';\r\nimport { convertDNCL2 } from './nako_from_dncl2.mjs';\r\nimport { SourceMappingOfTokenization, SourceMappingOfIndentSyntax, OffsetToLineColumn, subtractSourceMapByPreCodeLength } from './nako_source_mapping.mjs';\r\nimport { NakoLexerError, NakoImportError, NakoSyntaxError, InternalLexerError } from './nako_errors.mjs';\r\nimport { NakoLogger } from './nako_logger.mjs';\r\nimport { NakoGlobal } from './nako_global.mjs';\r\n// version info\r\nimport coreVersion from './nako_core_version.mjs';\r\n// basic plugins\r\nimport PluginSystem from './plugin_system.mjs';\r\nimport PluginMath from './plugin_math.mjs';\r\nimport PluginCSV from './plugin_csv.mjs';\r\nimport PluginPromise from './plugin_promise.mjs';\r\nimport PluginTest from './plugin_test.mjs';\r\nconst cloneAsJSON = (x) => JSON.parse(JSON.stringify(x));\r\n/** コンパイラ実行オプションを生成 */\r\nexport function newCompilerOptions(initObj = {}) {\r\n    if (typeof initObj !== 'object') {\r\n        initObj = {};\r\n    }\r\n    initObj.testOnly = initObj.testOnly || false;\r\n    initObj.resetEnv = initObj.resetEnv || false;\r\n    initObj.resetAll = initObj.resetAll || false;\r\n    initObj.preCode = initObj.preCode || '';\r\n    initObj.nakoGlobal = initObj.nakoGlobal || null;\r\n    return initObj;\r\n}\r\n/** なでしこコンパイラ */\r\nexport class NakoCompiler {\r\n    /**\r\n     * @param {undefined | {'useBasicPlugin':true|false}} options\r\n     */\r\n    constructor(options = undefined) {\r\n        if (options === undefined) {\r\n            options = { useBasicPlugin: true };\r\n        }\r\n        // 環境のリセット\r\n        this.__varslist = [{}, {}, {}]; // このオブジェクトは変更しないこと (this.gen.__varslist と共有する)\r\n        this.__locals = {}; // ローカル変数\r\n        this.__self = this;\r\n        this.__vars = this.__varslist[2];\r\n        this.__v0 = this.__varslist[0];\r\n        this.__v1 = this.__varslist[1];\r\n        // バージョンを設定\r\n        this.version = coreVersion.version;\r\n        this.coreVersion = coreVersion.version;\r\n        this.__globals = []; // 生成した NakoGlobal のインスタンスを保持\r\n        this.__globalObj = null;\r\n        this.__module = {}; // requireなどで取り込んだモジュールの一覧\r\n        this.pluginFunclist = {}; // プラグインで定義された関数\r\n        this.funclist = {}; // プラグインで定義された関数 + ユーザーが定義した関数\r\n        this.pluginfiles = {}; // 取り込んだファイル一覧\r\n        this.commandlist = new Set(); // プラグインで定義された定数・変数・関数の名前\r\n        this.nakoFuncList = {}; // __v1に配置するJavaScriptのコードで定義された関数\r\n        this.eventList = []; // 実行前に環境を変更するためのイベント\r\n        this.codeGenerateor = {}; // コードジェネレータ\r\n        this.debugOption = { useDebug: false, waitTime: 0 };\r\n        this.logger = new NakoLogger();\r\n        this.filename = 'main.nako3';\r\n        /**\r\n         * 取り込み文を置換するためのオブジェクト。\r\n         * 正規化されたファイル名がキーになり、取り込み文の引数に指定された正規化されていないファイル名はaliasに入れられる。\r\n         * JavaScriptファイルによるプラグインの場合、contentは空文字列。\r\n         * funclistはシンタックスハイライトの高速化のために事前に取り出した、ファイルが定義する関数名のリスト。\r\n         */\r\n        this.dependencies = {};\r\n        this.usedFuncs = new Set();\r\n        this.numFailures = 0;\r\n        if (options.useBasicPlugin) {\r\n            this.addBasicPlugins();\r\n        }\r\n        // 必要なオブジェクトを覚えておく\r\n        this.prepare = NakoPrepare.getInstance();\r\n        this.parser = new NakoParser(this.logger);\r\n        this.lexer = new NakoLexer(this.logger);\r\n        // 関数一覧を設定\r\n        this.lexer.setFuncList(this.funclist);\r\n    }\r\n    /** モジュール(名前空間)の一覧を取得する */\r\n    getModList() {\r\n        return this.lexer.modList;\r\n    }\r\n    getLogger() {\r\n        return this.logger;\r\n    }\r\n    getNakoFuncList() {\r\n        return this.nakoFuncList;\r\n    }\r\n    getNakoFunc(name) {\r\n        return this.nakoFuncList[name];\r\n    }\r\n    getPluginfiles() {\r\n        return this.pluginfiles;\r\n    }\r\n    /**\r\n     * 基本的なプラグインを追加する\r\n     */\r\n    addBasicPlugins() {\r\n        this.addPluginObject('PluginSystem', PluginSystem);\r\n        this.addPluginObject('PluginMath', PluginMath);\r\n        this.addPluginObject('PluginPromise', PluginPromise);\r\n        this.addPluginObject('PluginAssert', PluginTest);\r\n        this.addPluginObject('PluginCSV', PluginCSV);\r\n    }\r\n    /**\r\n     * loggerを新しいインスタンスで置き換える。\r\n     */\r\n    replaceLogger() {\r\n        const logger = this.lexer.logger = this.parser.logger = this.logger = new NakoLogger();\r\n        return logger;\r\n    }\r\n    /**\r\n     * ファイル内のrequire文の位置を列挙する。出力の配列はstartでソートされている。\r\n     * @param {Token[]} tokens rawtokenizeの出力\r\n     */\r\n    static listRequireStatements(tokens) {\r\n        const requireStatements = [];\r\n        for (let i = 0; i + 2 < tokens.length; i++) {\r\n            // not (string|string_ex) '取り込み'\r\n            if (!(tokens[i].type === 'not' &&\r\n                (tokens[i + 1].type === 'string' || tokens[i + 1].type === 'string_ex') &&\r\n                tokens[i + 2].value === '取込')) {\r\n                continue;\r\n            }\r\n            requireStatements.push({\r\n                ...tokens[i],\r\n                start: i,\r\n                end: i + 3,\r\n                value: tokens[i + 1].value + '',\r\n                firstToken: tokens[i],\r\n                lastToken: tokens[i + 2]\r\n            });\r\n            i += 2;\r\n        }\r\n        return requireStatements;\r\n    }\r\n    /**\r\n     * プログラムが依存するファイルを再帰的に取得する。\r\n     * - 依存するファイルがJavaScriptファイルの場合、そのファイルを実行して評価結果をthis.addPluginFileに渡す。\r\n     * - 依存するファイルがなでしこ言語の場合、ファイルの中身を取得して変数に保存し、再帰する。\r\n     *\r\n     * @param {string} code\r\n     * @param {string} filename\r\n     * @param {string} preCode\r\n     * @param {LoaderTool} tools 実行環境 (ブラウザ or Node.js) によって外部ファイルの取得・実行方法は異なるため、引数でそれらを行う関数を受け取る。\r\n     *  - resolvePath は指定した名前をもつファイルを検索し、正規化されたファイル名を返す関数。返されたファイル名はreadNako3かreadJsの引数になる。\r\n     *  - readNako3は指定されたファイルの中身を返す関数。\r\n     *  - readJsは指定したファイルをJavaScriptのプログラムとして実行し、`export default` でエクスポートされた値を返す関数。\r\n     * @returns {Promise<unknown> | void}\r\n     * @protected\r\n     */\r\n    _loadDependencies(code, filename, preCode, tools) {\r\n        const dependencies = {};\r\n        const compiler = new NakoCompiler({ useBasicPlugin: true });\r\n        /**\r\n         * @param {any} item\r\n         * @param {any} tasks\r\n         */\r\n        const loadJS = (item, tasks) => {\r\n            // jsならプラグインとして読み込む。(ESMでは必ず動的に読む)\r\n            const obj = tools.readJs(item.filePath, item.firstToken);\r\n            tasks.push(obj.task.then((res) => {\r\n                const pluginFuncs = res();\r\n                this.addPluginFile(item.value, item.filePath, pluginFuncs, false);\r\n                dependencies[item.filePath].funclist = pluginFuncs;\r\n                dependencies[item.filePath].addPluginFile = () => { this.addPluginFile(item.value, item.filePath, pluginFuncs, false); };\r\n            }));\r\n        };\r\n        const loadNako3 = (item, tasks) => {\r\n            // nako3ならファイルを読んでdependenciesに保存する。\r\n            const content = tools.readNako3(item.filePath, item.firstToken);\r\n            const registerFile = (code) => {\r\n                // シンタックスハイライトの高速化のために、事前にファイルが定義する関数名のリストを取り出しておく。\r\n                // preDefineFuncはトークン列に変更を加えるため、事前にクローンしておく。\r\n                // 「プラグイン名設定」を行う (#956)\r\n                const modName = NakoLexer.filenameToModName(item.filePath);\r\n                code = `『${modName}』に名前空間設定;『${modName}』にプラグイン名設定;` + code + ';名前空間ポップ;';\r\n                const tokens = this.rawtokenize(code, 0, item.filePath);\r\n                dependencies[item.filePath].tokens = tokens;\r\n                const funclist = {};\r\n                NakoLexer.preDefineFunc(cloneAsJSON(tokens), this.logger, funclist);\r\n                dependencies[item.filePath].funclist = funclist;\r\n                // 再帰\r\n                return loadRec(code, item.filePath, '');\r\n            };\r\n            // 取り込み構文における問題を減らすため、必ず非同期でプログラムを読み込む仕様とした #1219\r\n            tasks.push(content.task.then((res) => registerFile(res)));\r\n        };\r\n        const loadRec = (code, filename, preCode) => {\r\n            const tasks = [];\r\n            // 取り込みが必要な情報一覧を調べる(トークン分割して、取り込みタグを得る)\r\n            const tags = NakoCompiler.listRequireStatements(compiler.rawtokenize(code, 0, filename, preCode));\r\n            // パスを解決する\r\n            const tagsResolvePath = tags.map((v) => ({ ...v, ...tools.resolvePath(v.value, v.firstToken, filename) }));\r\n            // 取り込み開始\r\n            for (const item of tagsResolvePath) {\r\n                // 2回目以降の読み込み\r\n                // eslint-disable-next-line no-prototype-builtins\r\n                if (dependencies.hasOwnProperty(item.filePath)) {\r\n                    dependencies[item.filePath].alias.add(item.value);\r\n                    continue;\r\n                }\r\n                // 初回の読み込み\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                dependencies[item.filePath] = { tokens: [], alias: new Set([item.value]), addPluginFile: () => { }, funclist: {} };\r\n                if (item.type === 'js' || item.type === 'mjs') {\r\n                    loadJS(item, tasks);\r\n                }\r\n                else if (item.type === 'nako3') {\r\n                    loadNako3(item, tasks);\r\n                }\r\n                else {\r\n                    throw new NakoImportError(`ファイル『${item.value}』を読み込めません。ファイルが存在しないか未対応の拡張子です。`, item.firstToken.file, item.firstToken.line);\r\n                }\r\n            }\r\n            if (tasks.length > 0) {\r\n                return Promise.all(tasks);\r\n            }\r\n            return undefined;\r\n        };\r\n        try {\r\n            const result = loadRec(code, filename, preCode);\r\n            // 非同期な場合のエラーハンドリング\r\n            if (result !== undefined) {\r\n                result.catch((err) => {\r\n                    // 読み込みに失敗したら処理を中断する\r\n                    this.logger.error(err.msg);\r\n                    this.numFailures++;\r\n                });\r\n            }\r\n            // すべてが終わってからthis.dependenciesに代入する。そうしないと、「実行」ボタンを連打した場合など、\r\n            // loadDependencies() が並列実行されるときに正しく動作しない。\r\n            this.dependencies = dependencies;\r\n            return result;\r\n        }\r\n        catch (err) {\r\n            // 同期処理では素直に例外を投げる\r\n            this.logger.error('' + err);\r\n            throw err;\r\n        }\r\n    }\r\n    /**\r\n     * コードを単語に分割する\r\n     * @param code なでしこのプログラム\r\n     * @param line なでしこのプログラムの行番号\r\n     * @param filename\r\n     * @param preCode\r\n     * @returns トークンのリスト\r\n     */\r\n    rawtokenize(code, line, filename, preCode = '') {\r\n        if (!code.startsWith(preCode)) {\r\n            throw new Error('codeの先頭にはpreCodeを含める必要があります。');\r\n        }\r\n        // 名前空間のモジュールリストに自身を追加\r\n        const modName = NakoLexer.filenameToModName(filename);\r\n        const modList = this.getModList();\r\n        if (modList.indexOf(modName) < 0) {\r\n            modList.unshift(modName);\r\n        }\r\n        // 全角半角の統一処理\r\n        const preprocessed = this.prepare.convert(code);\r\n        const tokenizationSourceMapping = new SourceMappingOfTokenization(code.length, preprocessed);\r\n        const indentationSyntaxSourceMapping = new SourceMappingOfIndentSyntax(code, [], []);\r\n        const offsetToLineColumn = new OffsetToLineColumn(code);\r\n        // トークン分割\r\n        let tokens;\r\n        try {\r\n            tokens = this.lexer.tokenize(preprocessed.map((v) => v.text).join(''), line, filename);\r\n        }\r\n        catch (err) {\r\n            if (!(err instanceof InternalLexerError)) {\r\n                throw err;\r\n            }\r\n            // エラー位置をソースコード上の位置に変換して返す\r\n            const dest = indentationSyntaxSourceMapping.map(tokenizationSourceMapping.map(err.preprocessedCodeStartOffset), tokenizationSourceMapping.map(err.preprocessedCodeEndOffset));\r\n            const line = dest.startOffset === null ? err.line : offsetToLineColumn.map(dest.startOffset, false).line;\r\n            const map = subtractSourceMapByPreCodeLength({ ...dest, line }, preCode);\r\n            throw new NakoLexerError(err.msg, map.startOffset, map.endOffset, map.line, filename);\r\n        }\r\n        // DNCL ver2 (core #41)\r\n        tokens = convertDNCL2(tokens);\r\n        // DNCL ver1 (#1140)\r\n        tokens = convertDNCL(tokens);\r\n        // インデント構文を変換 #596\r\n        tokens = convertIndentSyntax(tokens);\r\n        // インラインインデントを変換 #1215\r\n        tokens = convertInlineIndent(tokens);\r\n        // ソースコード上の位置に変換\r\n        tokens = tokens.map((token) => {\r\n            const dest = indentationSyntaxSourceMapping.map(tokenizationSourceMapping.map(token.preprocessedCodeOffset || 0), tokenizationSourceMapping.map((token.preprocessedCodeOffset || 0) + (token.preprocessedCodeLength || 0)));\r\n            let line = token.line;\r\n            let column = 0;\r\n            if (token.type === 'eol' && dest.endOffset !== null) {\r\n                // eolはnako_genで `line = ${eolToken.line};` に変換されるため、\r\n                // 行末のeolのlineは次の行の行数を表す必要がある。\r\n                const out = offsetToLineColumn.map(dest.endOffset, false);\r\n                line = out.line;\r\n                column = out.column;\r\n            }\r\n            else if (dest.startOffset !== null) {\r\n                const out = offsetToLineColumn.map(dest.startOffset, false);\r\n                line = out.line;\r\n                column = out.column;\r\n            }\r\n            return {\r\n                ...token,\r\n                ...subtractSourceMapByPreCodeLength({ line, column, startOffset: dest.startOffset, endOffset: dest.endOffset }, preCode),\r\n                rawJosi: token.josi\r\n            };\r\n        });\r\n        return tokens;\r\n    }\r\n    /**\r\n     * 単語の属性を構文解析に先立ち補正する\r\n     * @param {Token[]} tokens トークンのリスト\r\n     * @param {boolean} isFirst 最初の呼び出しかどうか\r\n     * @param {string} filename\r\n     * @returns コード (なでしこ)\r\n     */\r\n    converttoken(tokens, isFirst, filename) {\r\n        const tok = this.lexer.replaceTokens(tokens, isFirst, filename);\r\n        return tok;\r\n    }\r\n    /**\r\n     * 環境のリセット\r\n     * {NakoResetOption|undefined}\r\n     */\r\n    reset(options = undefined) {\r\n        if (!options || options.needToClearPlugin) {\r\n            // (メモ) #1245\r\n            // 通常、リセット処理では、プラグインの!クリアを呼ぶ。\r\n            // しかし、エディタではクリアイベントを呼ぶと、時計などのコンテンツが止まってしまう\r\n            // そのため、例外的にオプションを指定すると、プラグインのクリアイベントを呼ばない\r\n            this.clearPlugins();\r\n        }\r\n        /**\r\n         * なでしこのローカル変数をスタックで管理\r\n         * __varslist[0] プラグイン領域\r\n         * __varslist[1] なでしこグローバル領域\r\n         * __varslist[2] 最初のローカル変数 ( == __vars }\r\n         */\r\n        this.__varslist = [this.__varslist[0], {}, {}];\r\n        this.__v0 = this.__varslist[0];\r\n        this.__v1 = this.__varslist[1];\r\n        this.__vars = this.__varslist[2];\r\n        this.__locals = {};\r\n        // プラグイン命令以外を削除する。\r\n        this.funclist = {};\r\n        for (const name of Object.keys(this.__v0)) {\r\n            const original = this.pluginFunclist[name];\r\n            if (!original) {\r\n                continue;\r\n            }\r\n            this.funclist[name] = JSON.parse(JSON.stringify(original));\r\n        }\r\n        this.lexer.setFuncList(this.funclist);\r\n        this.logger.clear();\r\n    }\r\n    /**\r\n     * typeがcodeのトークンを単語に分割するための処理\r\n     * @param {string} code\r\n     * @param {number} line\r\n     * @param {string} filename\r\n     * @param {number | null} startOffset\r\n     * @returns\r\n     * @private\r\n     */\r\n    lexCodeToken(code, line, filename, startOffset) {\r\n        // 単語に分割\r\n        let tokens = this.rawtokenize(code, line, filename, '');\r\n        // 文字列内位置からファイル内位置へ変換\r\n        if (startOffset === null) {\r\n            for (const token of tokens) {\r\n                token.startOffset = undefined;\r\n                token.endOffset = undefined;\r\n            }\r\n        }\r\n        else {\r\n            for (const token of tokens) {\r\n                if (token.startOffset !== undefined) {\r\n                    token.startOffset += startOffset;\r\n                }\r\n                if (token.endOffset !== undefined) {\r\n                    token.endOffset += startOffset;\r\n                }\r\n            }\r\n        }\r\n        // convertTokenで消されるコメントのトークンを残す\r\n        const commentTokens = tokens.filter((t) => t.type === 'line_comment' || t.type === 'range_comment')\r\n            .map((v) => ({ ...v })); // clone\r\n        tokens = this.converttoken(tokens, false, filename);\r\n        return { tokens, commentTokens };\r\n    }\r\n    /**\r\n     * 再帰的にrequire文を置換する。\r\n     * .jsであれば削除し、.nako3であればそのファイルのトークン列で置換する。\r\n     * @param {TokenWithSourceMap[]} tokens\r\n     * @param {Set<string>} [includeGuard]\r\n     * @returns {Token[]} 削除された取り込み文のトークン\r\n     */\r\n    replaceRequireStatements(tokens, includeGuard = new Set()) {\r\n        /** @type {TokenWithSourceMap[]} */\r\n        const deletedTokens = [];\r\n        for (const r of NakoCompiler.listRequireStatements(tokens).reverse()) {\r\n            // C言語のinclude guardと同じ仕組みで無限ループを防ぐ。\r\n            if (includeGuard.has(r.value)) {\r\n                deletedTokens.push(...tokens.splice((r.start || 0), (r.end || 0) - (r.start || 0)));\r\n                continue;\r\n            }\r\n            const filePath = Object.keys(this.dependencies).find((key) => this.dependencies[key].alias.has(r.value));\r\n            if (filePath === undefined) {\r\n                if (!r.firstToken) {\r\n                    throw new Error(`ファイル『${r.value}』が読み込まれていません。`);\r\n                }\r\n                throw new NakoLexerError(`ファイル『${r.value}』が読み込まれていません。`, r.firstToken.startOffset || 0, r.firstToken.endOffset || 0, r.firstToken.line, r.firstToken.file);\r\n            }\r\n            this.dependencies[filePath].addPluginFile();\r\n            const children = cloneAsJSON(this.dependencies[filePath].tokens);\r\n            includeGuard.add(r.value);\r\n            deletedTokens.push(...this.replaceRequireStatements(children, includeGuard));\r\n            deletedTokens.push(...tokens.splice(r.start || 0, (r.end || 0) - (r.start || 0), ...children));\r\n        }\r\n        return deletedTokens;\r\n    }\r\n    /**\r\n     * replaceRequireStatementsのシンタックスハイライト用の実装。\r\n     * @param {TokenWithSourceMap[]} tokens\r\n     * @returns {TokenWithSourceMap[]} 削除された取り込み文のトークン\r\n     */\r\n    removeRequireStatements(tokens) {\r\n        /** @type {TokenWithSourceMap[]} */\r\n        const deletedTokens = [];\r\n        for (const r of NakoCompiler.listRequireStatements(tokens).reverse()) {\r\n            // プラグイン命令のシンタックスハイライトのために、addPluginFileを呼んで関数のリストをthis.dependencies[filePath].funclistに保存させる。\r\n            const filePath = Object.keys(this.dependencies).find((key) => this.dependencies[key].alias.has(r.value));\r\n            if (filePath !== undefined) {\r\n                this.dependencies[filePath].addPluginFile();\r\n            }\r\n            // 全ての取り込み文を削除する。そうしないとトークン化に時間がかかりすぎる。\r\n            deletedTokens.push(...tokens.splice(r.start || 0, (r.end || 0) - (r.start || 0)));\r\n        }\r\n        return deletedTokens;\r\n    }\r\n    /** 字句解析を行う */\r\n    lex(code, filename = 'main.nako3', preCode = '', syntaxHighlighting = false) {\r\n        // 単語に分割\r\n        let tokens = this.rawtokenize(code, 0, filename, preCode);\r\n        // require文を再帰的に置換する\r\n        const requireStatementTokens = syntaxHighlighting ? this.removeRequireStatements(tokens) : this.replaceRequireStatements(tokens, undefined);\r\n        for (const t of requireStatementTokens) {\r\n            if (t.type === 'word' || t.type === 'not') {\r\n                t.type = 'require';\r\n            }\r\n        }\r\n        if (requireStatementTokens.length >= 3) {\r\n            // modList を更新\r\n            for (let i = 0; i < requireStatementTokens.length; i += 3) {\r\n                let modName = requireStatementTokens[i + 1].value;\r\n                modName = NakoLexer.filenameToModName(modName);\r\n                if (this.lexer.modList.indexOf(modName) < 0) {\r\n                    this.lexer.modList.push(modName);\r\n                }\r\n            }\r\n        }\r\n        // convertTokenで消されるコメントのトークンを残す\r\n        const commentTokens = tokens.filter((t) => t.type === 'line_comment' || t.type === 'range_comment')\r\n            .map((v) => ({ ...v })); // clone\r\n        tokens = this.converttoken(tokens, true, filename);\r\n        for (let i = 0; i < tokens.length; i++) {\r\n            if (tokens[i] && tokens[i].type === 'code') {\r\n                const children = this.lexCodeToken(tokens[i].value, tokens[i].line, filename, tokens[i].startOffset || 0);\r\n                commentTokens.push(...children.commentTokens);\r\n                tokens.splice(i, 1, ...children.tokens);\r\n                i--;\r\n            }\r\n        }\r\n        this.logger.trace('--- lex ---\\n' + JSON.stringify(tokens, null, 2));\r\n        return { commentTokens, tokens, requireTokens: requireStatementTokens };\r\n    }\r\n    /**\r\n     * コードをパースしてASTにする\r\n     */\r\n    parse(code, filename, preCode = '') {\r\n        // 関数リストを字句解析と構文解析に登録\r\n        this.lexer.setFuncList(this.funclist);\r\n        this.parser.setFuncList(this.funclist);\r\n        // 字句解析を行う\r\n        const lexerOutput = this.lex(code, filename, preCode);\r\n        // 構文木を作成\r\n        let ast;\r\n        try {\r\n            this.parser.genMode = 'sync'; // set default\r\n            ast = this.parser.parse(lexerOutput.tokens, filename);\r\n        }\r\n        catch (err) {\r\n            if (typeof err.startOffset !== 'number') {\r\n                throw NakoSyntaxError.fromNode(err.message, lexerOutput.tokens[this.parser.getIndex()]);\r\n            }\r\n            throw err;\r\n        }\r\n        // 使用したシステム関数の一覧を this.usedFuns に入れる(エディタなどで利用される)\r\n        this.usedFuncs = this.parser.usedFuncs; // 全ての関数呼び出し\r\n        this.deleteUnNakoFuncs(); // システム関数以外を削除\r\n        this.logger.trace('--- ast ---\\n' + JSON.stringify(ast, null, 2));\r\n        return ast;\r\n    }\r\n    getUsedFuncs(ast) {\r\n        const queue = [ast];\r\n        this.usedFuncs = new Set();\r\n        while (queue.length > 0) {\r\n            const ast_ = queue.pop();\r\n            if (ast_ !== null && ast_ !== undefined && ast_.block !== null && ast_.block !== undefined) {\r\n                this.getUsedAndDefFuncs(queue, JSON.parse(JSON.stringify(ast_.block)));\r\n            }\r\n        }\r\n        return this.deleteUnNakoFuncs();\r\n    }\r\n    getUsedAndDefFuncs(astQueue, blockQueue) {\r\n        while (blockQueue.length > 0) {\r\n            const block = blockQueue.pop();\r\n            if (block !== null && block !== undefined) {\r\n                this.getUsedAndDefFunc(block, astQueue, blockQueue);\r\n            }\r\n        }\r\n    }\r\n    getUsedAndDefFunc(block, astQueue, blockQueue) {\r\n        if (['func', 'func_pointer'].includes(block.type) && block.name !== null && block.name !== undefined) {\r\n            this.usedFuncs.add(block.name);\r\n        }\r\n        astQueue.push([block, block.block]);\r\n        // eslint-disable-next-line prefer-spread\r\n        blockQueue.push.apply(blockQueue, [block.value].concat(block.args));\r\n    }\r\n    deleteUnNakoFuncs() {\r\n        for (const func of this.usedFuncs) {\r\n            if (!this.commandlist.has(func)) {\r\n                this.usedFuncs.delete(func);\r\n            }\r\n        }\r\n        return this.usedFuncs;\r\n    }\r\n    /**\r\n     * プログラムをコンパイルしてランタイム用のJavaScriptのコードを返す\r\n     * @param code コード (なでしこ)\r\n     * @param filename\r\n     * @param isTest テストかどうか\r\n     * @param preCode\r\n     */\r\n    compile(code, filename, isTest = false, preCode = '') {\r\n        const opt = newCompilerOptions();\r\n        opt.testOnly = isTest;\r\n        opt.preCode = preCode;\r\n        const res = this.compileFromCode(code, filename, opt);\r\n        return res.runtimeEnv;\r\n    }\r\n    /** parse & generate  */\r\n    compileFromCode(code, filename, options = undefined) {\r\n        if (filename === '') {\r\n            filename = 'main.nako3';\r\n        }\r\n        if (options === undefined) {\r\n            options = newCompilerOptions();\r\n        }\r\n        try {\r\n            if (options.resetEnv) {\r\n                this.reset();\r\n            }\r\n            if (options.resetAll) {\r\n                this.clearPlugins();\r\n            }\r\n            // onBeforeParse\r\n            this.eventList.filter(o => o.eventName === 'beforeParse').map(e => e.callback(code));\r\n            // parse\r\n            const ast = this.parse(code, filename, options.preCode);\r\n            // onBeforeGenerate\r\n            this.eventList.filter(o => o.eventName === 'beforeGenerate').map(e => e.callback(ast));\r\n            // generate\r\n            const outCode = this.generateCode(ast, new NakoGenOptions(options.testOnly));\r\n            // onAfterGenerate\r\n            this.eventList.filter(o => o.eventName === 'afterGenerate').map(e => e.callback(outCode));\r\n            return outCode;\r\n        }\r\n        catch (e) {\r\n            this.logger.error(e);\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * プログラムをコンパイルしてJavaScriptのコードオブジェクトを返す\r\n     * @param ast\r\n     * @param opt テストかどうか\r\n     */\r\n    generateCode(ast, opt) {\r\n        // Select Code Generator #637\r\n        const mode = ast.genMode || '';\r\n        // normal mode\r\n        if (mode === 'sync') {\r\n            return generateJS(this, ast, opt);\r\n        }\r\n        // 非推奨の非同期モード #1164\r\n        if (mode === '非同期モード') {\r\n            this.logger.warn('『!非同期モード』の利用は非推奨です。[詳細](https://github.com/kujirahand/nadesiko3/issues/1164)');\r\n            return NakoGenASync.generate(this, ast, opt.isTest);\r\n        }\r\n        // その他のコードジェネレータ(PHPなど)\r\n        const genObj = this.codeGenerateor[mode];\r\n        if (!genObj) {\r\n            throw new Error(`コードジェネレータの「${mode}」はサポートされていません。`);\r\n        }\r\n        return genObj.generate(this, ast, opt.isTest);\r\n    }\r\n    /** コードジェネレータを追加する */\r\n    addCodeGenerator(mode, obj) {\r\n        this.codeGenerateor[mode] = obj;\r\n    }\r\n    /** (非推奨)\r\n     * @param code\r\n     * @param fname\r\n     * @param isReset\r\n     * @param isTest テストかどうか。stringの場合は1つのテストのみ。\r\n     * @param [preCode]\r\n     * @deprecated 代わりにrunAsyncメソッドを使ってください。(core #52)\r\n     */\r\n    async _run(code, fname, isReset, isTest, preCode = '') {\r\n        const opts = newCompilerOptions({\r\n            resetEnv: isReset,\r\n            resetAll: isReset,\r\n            testOnly: isTest,\r\n            preCode\r\n        });\r\n        return this._runEx(code, fname, opts);\r\n    }\r\n    /** 各プラグインをリセットする */\r\n    clearPlugins() {\r\n        // 他に実行している「なでしこ」があればクリアする\r\n        this.__globals.forEach((sys) => {\r\n            sys.__varslist[0].forceClose = true; // core #56\r\n            sys.reset();\r\n        });\r\n        this.__globals = []; // clear\r\n    }\r\n    /**\r\n     * 環境を指定してJavaScriptのコードを実行する\r\n     * @param code JavaScriptのコード\r\n     * @param nakoGlobal 実行環境\r\n     */\r\n    evalJS(code, nakoGlobal) {\r\n        // 実行前に環境を初期化するイベントを実行(beforeRun)\r\n        this.eventList.filter(o => o.eventName === 'beforeRun').map(e => e.callback(nakoGlobal));\r\n        this.__globalObj = nakoGlobal; // 現在のnakoGlobalを記録\r\n        this.__globalObj.lastJSCode = code;\r\n        try {\r\n            // eslint-disable-next-line no-new-func\r\n            const f = new Function(code);\r\n            f.apply(nakoGlobal);\r\n        }\r\n        catch (err) {\r\n            // なでしこコードのエラーは抑止してログにのみ記録\r\n            nakoGlobal.numFailures++;\r\n            this.getLogger().error(err);\r\n            throw err;\r\n        }\r\n        // 実行後に終了イベントを実行(finish)\r\n        this.eventList.filter(o => o.eventName === 'finish').map(e => e.callback(nakoGlobal));\r\n    }\r\n    /**\r\n     * 同期的になでしこのプログラムcodeを実行する\r\n     * @param code なでしこのプログラム\r\n     * @param filename ファイル名\r\n     * @param options オプション\r\n     * @returns 実行に利用したグローバルオブジェクト\r\n     * @deprecated 代わりにrunAsyncメソッドを使ってください。(core #52)\r\n     */\r\n    runSync(code, filename, options = undefined) {\r\n        // コンパイル\r\n        options = newCompilerOptions(options);\r\n        const out = this.compileFromCode(code, filename, options);\r\n        // 実行前に環境を生成\r\n        const nakoGlobal = this.getNakoGlobal(options, out.gen, filename);\r\n        // 実行\r\n        this.evalJS(out.runtimeEnv, nakoGlobal);\r\n        return nakoGlobal;\r\n    }\r\n    /**\r\n     * 非同期になでしこのプログラムcodeを実行する\r\n     * @param code なでしこのプログラム\r\n     * @param filename ファイル名\r\n     * @param options オプション\r\n     * @returns 実行に利用したグローバルオブジェクト\r\n     */\r\n    async runAsync(code, filename, options = undefined) {\r\n        // コンパイル\r\n        options = newCompilerOptions(options);\r\n        const out = this.compileFromCode(code, filename, options);\r\n        // 実行前に環境を生成\r\n        const nakoGlobal = this.getNakoGlobal(options, out.gen, filename);\r\n        // 実行\r\n        this.evalJS(out.runtimeEnv, nakoGlobal);\r\n        return nakoGlobal;\r\n    }\r\n    getNakoGlobal(options, gen, filename) {\r\n        // オプションを参照\r\n        let g = options.nakoGlobal;\r\n        if (!g) {\r\n            // 空ならば前回の値を参照(リセットするなら新規で作成する)\r\n            if (this.__globals.length > 0 && options.resetAll === false && options.resetEnv === false) {\r\n                g = this.__globals[this.__globals.length - 1];\r\n            }\r\n            else {\r\n                g = new NakoGlobal(this, gen, (this.__globals.length + 1));\r\n            }\r\n            // 名前空間を設定\r\n            g.__varslist[0]['名前空間'] = NakoLexer.filenameToModName(filename);\r\n        }\r\n        if (this.__globals.indexOf(g) < 0) {\r\n            this.__globals.push(g);\r\n        }\r\n        return g;\r\n    }\r\n    /**\r\n     * イベントを登録する\r\n     * @param eventName イベント名\r\n     * @param callback コールバック関数\r\n     */\r\n    addListener(eventName, callback) {\r\n        this.eventList.push({ eventName, callback });\r\n    }\r\n    /**\r\n     * テストを実行する\r\n     * @param code\r\n     * @param fname\r\n     * @param preCode\r\n     * @param testOnly\r\n     */\r\n    test(code, fname, preCode = '', testOnly = false) {\r\n        const options = newCompilerOptions();\r\n        options.preCode = preCode;\r\n        options.testOnly = testOnly;\r\n        return this.runSync(code, fname, options);\r\n    }\r\n    /**\r\n     * なでしこのプログラムを実行（他に実行しているインスタンスはそのまま）\r\n     * @param code\r\n     * @param fname\r\n     * @param [preCode]\r\n     * @deprecated 代わりに runAsync を使ってください。\r\n     */\r\n    run(code, fname = 'main.nako3', preCode = '') {\r\n        const options = newCompilerOptions();\r\n        options.preCode = preCode;\r\n        return this.runSync(code, fname, options);\r\n    }\r\n    /**\r\n     * JavaScriptのみで動くコードを取得する場合\r\n     * @param code\r\n     * @param filename\r\n     * @param opt\r\n     */\r\n    compileStandalone(code, filename, opt = null) {\r\n        if (opt === null) {\r\n            opt = new NakoGenOptions();\r\n        }\r\n        const ast = this.parse(code, filename);\r\n        return this.generateCode(ast, opt).standalone;\r\n    }\r\n    /**\r\n     * プラグイン・オブジェクトを追加\r\n     * @param po プラグイン・オブジェクト\r\n     * @param persistent falseのとき、次以降の実行では使えない\r\n     */\r\n    addPlugin(po, persistent = true) {\r\n        // 変数のメタ情報を確認\r\n        const __v0 = this.__varslist[0];\r\n        if (__v0.meta === undefined) {\r\n            __v0.meta = {};\r\n        }\r\n        // プラグインの値をオブジェクトにコピー\r\n        for (const key in po) {\r\n            const v = po[key];\r\n            this.funclist[key] = v;\r\n            if (persistent) {\r\n                this.pluginFunclist[key] = JSON.parse(JSON.stringify(v));\r\n            }\r\n            if (v.type === 'func') {\r\n                __v0[key] = v.fn;\r\n            }\r\n            else if (v.type === 'const' || v.type === 'var') {\r\n                __v0[key] = v.value;\r\n                __v0.meta[key] = {\r\n                    readonly: (v.type === 'const')\r\n                };\r\n            }\r\n            else {\r\n                console.error('[プラグイン追加エラー]', v);\r\n                throw new Error('プラグインの追加でエラー。');\r\n            }\r\n            // コマンドを登録するか?\r\n            if (key === '初期化' || key.substring(0, 1) === '!') { // 登録しない関数名\r\n                continue;\r\n            }\r\n            this.commandlist.add(key);\r\n        }\r\n    }\r\n    /**\r\n     * プラグイン・オブジェクトを追加(ブラウザ向け)\r\n     * @param objName オブジェクト名\r\n     * @param po 関数リスト\r\n     * @param persistent falseのとき、次以降の実行では使えない\r\n     */\r\n    addPluginObject(objName, po, persistent = true) {\r\n        this.__module[objName] = po;\r\n        this.pluginfiles[objName] = '*';\r\n        // 初期化をチェック\r\n        if (typeof (po['初期化']) === 'object') {\r\n            const def = po['初期化'];\r\n            delete po['初期化'];\r\n            const initKey = `!${objName}:初期化`;\r\n            po[initKey] = def;\r\n        }\r\n        // メタ情報をチェック (#1034)\r\n        if (po.meta && po.meta.value && typeof (po.meta) === 'object') {\r\n            const meta = po.meta;\r\n            delete po.meta;\r\n            const pluginName = meta.value.pluginName || objName;\r\n            const metaKey = `__${pluginName}`.replace('-', '__');\r\n            po[metaKey] = meta;\r\n        }\r\n        this.addPlugin(po, persistent);\r\n    }\r\n    /**\r\n     * プラグイン・ファイルを追加(Node.js向け)\r\n     * @param objName オブジェクト名\r\n     * @param fpath ファイルパス\r\n     * @param po 登録するオブジェクト\r\n     * @param persistent falseのとき、次以降の実行では使えない\r\n     */\r\n    addPluginFile(objName, fpath, po, persistent = true) {\r\n        // Windowsのパスがあると、JSファイル書き出しでエラーになるので、置換する\r\n        if (objName.indexOf('\\\\') >= 0) {\r\n            objName = objName.replace(/\\\\/g, '/');\r\n        }\r\n        this.addPluginObject(objName, po, persistent);\r\n        if (this.pluginfiles[objName] === undefined) {\r\n            this.pluginfiles[objName] = fpath;\r\n        }\r\n    }\r\n    /**\r\n     * 関数を追加する\r\n     * @param {string} key 関数名\r\n     * @param {string[][]} josi 助詞\r\n     * @param {Function} fn 関数\r\n     * @param {boolean} returnNone 値を返す関数の場合はfalseを指定\r\n     * @param {boolean} asyncFn Promiseを返す関数かを指定\r\n     */\r\n    addFunc(key, josi, fn, returnNone = true, asyncFn = false) {\r\n        this.funclist[key] = { josi, fn, type: 'func', return_none: returnNone, asyncFn };\r\n        this.pluginFunclist[key] = cloneAsJSON(this.funclist[key]);\r\n        this.__varslist[0][key] = fn;\r\n    }\r\n    /** (非推奨) 互換性のため ... 関数を追加する\r\n     * @deprecated 代わりにaddFuncを使ってください\r\n    */\r\n    setFunc(key, josi, fn, returnNone = true, asyncFn = false) {\r\n        this.addFunc(key, josi, fn, returnNone, asyncFn);\r\n    }\r\n    /**\r\n     * プラグイン関数を参照する\r\n     * @param key プラグイン関数の関数名\r\n     * @returns プラグイン・オブジェクト\r\n     */\r\n    getFunc(key) {\r\n        return this.funclist[key];\r\n    }\r\n    /** 同期的になでしこのプログラムcodeを実行する\r\n     * @deprecated 代わりにrunAsyncメソッドを使ってください。(core #52)\r\n     */\r\n    _runEx(code, filename, opts, preCode = '', nakoGlobal = undefined) {\r\n        // コンパイル\r\n        opts.preCode = preCode;\r\n        if (nakoGlobal) {\r\n            opts.nakoGlobal = nakoGlobal;\r\n        }\r\n        return this.runSync(code, filename, opts);\r\n    }\r\n    /** 同期的になでしこのプログラムcodeを実行する\r\n     * @param code\r\n     * @param fname\r\n     * @param opts\r\n     * @param [preCode]\r\n     * @deprecated 代わりにrunAsyncメソッドを使ってください。(core #52)\r\n     */\r\n    runEx(code, fname, opts, preCode = '') {\r\n        return this._runEx(code, fname, opts, preCode);\r\n    }\r\n    /**\r\n     * (非推奨) なでしこのプログラムを実行（他に実行しているインスタンスもリセットする)\r\n     * @param code\r\n     * @param fname\r\n     * @param [preCode]\r\n     */\r\n    async runReset(code, fname = 'main.nako3', preCode = '') {\r\n        const opts = newCompilerOptions({ resetAll: true, resetEnv: true });\r\n        return this._runEx(code, fname, opts, preCode);\r\n    }\r\n}\r\n","// @ts-nocheck\r\nexport default {\r\n    // @色定数\r\n    '水色': { type: 'const', value: 'aqua' },\r\n    '紫色': { type: 'const', value: 'fuchsia' },\r\n    '緑色': { type: 'const', value: 'lime' },\r\n    '青色': { type: 'const', value: 'blue' },\r\n    '赤色': { type: 'const', value: 'red' },\r\n    '黄色': { type: 'const', value: 'yellow' },\r\n    '黒色': { type: 'const', value: 'black' },\r\n    '白色': { type: 'const', value: 'white' },\r\n    '茶色': { type: 'const', value: 'maroon' },\r\n    '灰色': { type: 'const', value: 'gray' },\r\n    '金色': { type: 'const', value: 'gold' },\r\n    '黄金色': { type: 'const', value: 'gold' },\r\n    '銀色': { type: 'const', value: 'silver' },\r\n    '白金色': { type: 'const', value: 'silver' },\r\n    'オリーブ色': { type: 'const', value: 'olive' },\r\n    'ベージュ色': { type: 'const', value: 'beige' },\r\n    'アリスブルー色': { type: 'const', value: 'aliceblue' },\r\n    'RGB': {\r\n        type: 'func',\r\n        josi: [['と'], ['と'], ['で', 'の']],\r\n        pure: true,\r\n        fn: function (r, g, b) {\r\n            const z2 = (v) => {\r\n                const v2 = '00' + v.toString(16);\r\n                return v2.substr(v2.length - 2, 2);\r\n            };\r\n            return '#' + z2(r) + z2(g) + z2(b);\r\n        },\r\n        return_none: false\r\n    },\r\n    '色混': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (a) {\r\n            const z2 = (v) => {\r\n                const v2 = '00' + v.toString(16);\r\n                return v2.substr(v2.length - 2, 2);\r\n            };\r\n            if (!a) {\r\n                throw new Error('『色混ぜる』の引数には配列を指定します');\r\n            }\r\n            if (a.length < 3) {\r\n                throw new Error('『色混ぜる』の引数には[RR,GG,BB]形式の配列を指定します');\r\n            }\r\n            return '#' + z2(a[0]) + z2(a[1]) + z2(a[2]);\r\n        },\r\n        return_none: false\r\n    }\r\n};\r\n","export default {\r\n    // @HTTPとAJAX\r\n    'HTTP取得': {\r\n        type: 'func',\r\n        josi: [['の', 'から', 'を']],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: async function (url, sys) {\r\n            return sys.__exec('AJAXテキスト取得', [url, sys]);\r\n        }\r\n    },\r\n    'AJAX受信': {\r\n        type: 'func',\r\n        josi: [['から', 'を']],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: async function (url, sys) {\r\n            return sys.__exec('AJAXテキスト取得', [url, sys]);\r\n        }\r\n    },\r\n    'AJAX受信時': {\r\n        type: 'func',\r\n        josi: [['で'], ['から', 'を']],\r\n        pure: true,\r\n        fn: function (callback, url, sys) {\r\n            sys.__exec('AJAX送信時', [callback, url, sys]);\r\n        },\r\n        return_none: true\r\n    },\r\n    'AJAX送信': {\r\n        type: 'func',\r\n        josi: [['まで', 'へ', 'に']],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: async function (url, sys) {\r\n            return sys.__exec('AJAXテキスト取得', [url, sys]);\r\n        }\r\n    },\r\n    'AJAX送信時': {\r\n        type: 'func',\r\n        josi: [['の'], ['まで', 'へ', 'に']],\r\n        pure: true,\r\n        fn: function (callback, url, sys) {\r\n            let options = sys.__v0['AJAXオプション'];\r\n            if (options === '') {\r\n                options = { method: 'GET' };\r\n            }\r\n            fetch(url, options).then(res => {\r\n                // もし301であれば自動でリダイレクトするため,200だけをチェックすれば良い\r\n                if (res.status !== 200) {\r\n                    return sys.__v0['AJAX:ONERROR'](res.status);\r\n                }\r\n                return res.text();\r\n            }).then(text => {\r\n                sys.__v0['対象'] = text;\r\n                callback(text, sys);\r\n            }).catch(err => {\r\n                sys.__v0['AJAX:ONERROR'](err);\r\n            });\r\n        },\r\n        return_none: true\r\n    },\r\n    'AJAXオプション': { type: 'const', value: '' },\r\n    'AJAXオプション設定': {\r\n        type: 'func',\r\n        josi: [['に', 'へ', 'と']],\r\n        pure: true,\r\n        fn: function (option, sys) {\r\n            sys.__v0['AJAXオプション'] = option;\r\n        },\r\n        return_none: true\r\n    },\r\n    'AJAXオプションPOST設定': {\r\n        type: 'func',\r\n        josi: [['を', 'で']],\r\n        pure: true,\r\n        fn: function (params, sys) {\r\n            const bodyData = sys.__exec('POSTデータ生成', [params, sys]);\r\n            const options = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                },\r\n                body: bodyData\r\n            };\r\n            sys.__v0['AJAXオプション'] = options;\r\n        },\r\n        return_none: true\r\n    },\r\n    'AJAX失敗時': {\r\n        type: 'func',\r\n        josi: [['の']],\r\n        pure: true,\r\n        fn: function (callback, sys) {\r\n            sys.__v0['AJAX:ONERROR'] = callback;\r\n        }\r\n    },\r\n    'AJAXテキスト取得': {\r\n        type: 'func',\r\n        josi: [['から', 'を']],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: async function (url, sys) {\r\n            let options = sys.__v0['AJAXオプション'];\r\n            if (options === '') {\r\n                options = { method: 'GET' };\r\n            }\r\n            const res = await fetch(url, options);\r\n            const txt = await res.text();\r\n            return txt;\r\n        },\r\n        return_none: false\r\n    },\r\n    'AJAX_JSON取得': {\r\n        type: 'func',\r\n        josi: [['から']],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: async function (url, sys) {\r\n            let options = sys.__v0['AJAXオプション'];\r\n            if (options === '') {\r\n                options = { method: 'GET' };\r\n            }\r\n            const res = await fetch(url, options);\r\n            const txt = await res.json();\r\n            return txt;\r\n        },\r\n        return_none: false\r\n    },\r\n    'AJAXバイナリ取得': {\r\n        type: 'func',\r\n        josi: [['から']],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: async function (url, sys) {\r\n            let options = sys.__v0['AJAXオプション'];\r\n            if (options === '') {\r\n                options = { method: 'GET' };\r\n            }\r\n            const res = await fetch(url, options);\r\n            const bin = await res.blob();\r\n            return bin;\r\n        },\r\n        return_none: false\r\n    },\r\n    // @GETとPOST\r\n    'GET送信時': {\r\n        type: 'func',\r\n        josi: [['の'], ['まで', 'へ', 'に']],\r\n        pure: false,\r\n        fn: function (callback, url, sys) {\r\n            sys.__exec('AJAX送信時', [callback, url, sys]);\r\n        },\r\n        return_none: true\r\n    },\r\n    'POST送信時': {\r\n        type: 'func',\r\n        josi: [['の'], ['まで', 'へ', 'に'], ['を']],\r\n        pure: false,\r\n        fn: function (callback, url, params, sys) {\r\n            const bodyData = sys.__exec('POSTデータ生成', [params, sys]);\r\n            const options = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                },\r\n                body: bodyData\r\n            };\r\n            fetch(url, options).then(res => {\r\n                return res.text();\r\n            }).then(text => {\r\n                sys.__v0['対象'] = text;\r\n                callback(text);\r\n            }).catch(err => {\r\n                sys.__v0['AJAX:ONERROR'](err);\r\n            });\r\n        }\r\n    },\r\n    'POSTフォーム送信時': {\r\n        type: 'func',\r\n        josi: [['の'], ['まで', 'へ', 'に'], ['を']],\r\n        pure: true,\r\n        fn: function (callback, url, params, sys) {\r\n            const fd = new FormData();\r\n            for (const key in params) {\r\n                fd.set(key, params[key]);\r\n            }\r\n            const options = {\r\n                method: 'POST',\r\n                body: fd\r\n            };\r\n            fetch(url, options).then(res => {\r\n                return res.text();\r\n            }).then(text => {\r\n                sys.__v0['対象'] = text;\r\n                callback(text);\r\n            }).catch(err => {\r\n                sys.__v0['AJAX:ONERROR'](err);\r\n            });\r\n        }\r\n    },\r\n    'POSTデータ生成': {\r\n        type: 'func',\r\n        josi: [['の', 'を']],\r\n        pure: true,\r\n        fn: function (params, sys) {\r\n            const flist = [];\r\n            for (const key in params) {\r\n                const v = params[key];\r\n                const kv = encodeURIComponent(key) + '=' + encodeURIComponent(v);\r\n                flist.push(kv);\r\n            }\r\n            return flist.join('&');\r\n        }\r\n    },\r\n    'POST送信': {\r\n        type: 'func',\r\n        josi: [['まで', 'へ', 'に'], ['を']],\r\n        pure: false,\r\n        asyncFn: true,\r\n        fn: function (url, params, sys) {\r\n            return new Promise((resolve, reject) => {\r\n                const bodyData = sys.__exec('POSTデータ生成', [params, sys]);\r\n                const options = {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/x-www-form-urlencoded'\r\n                    },\r\n                    body: bodyData\r\n                };\r\n                fetch(url, options).then(res => {\r\n                    return res.text();\r\n                }).then(text => {\r\n                    resolve(text);\r\n                }).catch(err => {\r\n                    reject(err.message);\r\n                });\r\n            });\r\n        }\r\n    },\r\n    'POSTフォーム送信': {\r\n        type: 'func',\r\n        josi: [['まで', 'へ', 'に'], ['を']],\r\n        pure: false,\r\n        asyncFn: true,\r\n        fn: function (url, params, sys) {\r\n            return new Promise((resolve, reject) => {\r\n                const fd = new FormData();\r\n                for (const key in params) {\r\n                    fd.set(key, params[key]);\r\n                }\r\n                const options = {\r\n                    method: 'POST',\r\n                    body: fd\r\n                };\r\n                fetch(url, options).then(res => {\r\n                    return res.text();\r\n                }).then(text => {\r\n                    resolve(text);\r\n                }).catch(err => {\r\n                    reject(err.message);\r\n                });\r\n            });\r\n        }\r\n    },\r\n    // @HTTPとAJAX(保証)\r\n    'AJAX保障送信': {\r\n        type: 'func',\r\n        josi: [['まで', 'へ', 'に']],\r\n        pure: true,\r\n        fn: function (url, sys) {\r\n            let options = sys.__v0['AJAXオプション'];\r\n            if (options === '') {\r\n                options = { method: 'GET' };\r\n            }\r\n            return fetch(url, options);\r\n        },\r\n        return_none: false\r\n    },\r\n    'HTTP保障取得': {\r\n        type: 'func',\r\n        josi: [['の', 'から', 'を']],\r\n        pure: true,\r\n        fn: function (url, sys) {\r\n            return sys.__exec('AJAX保障送信', [url, sys]);\r\n        },\r\n        return_none: false\r\n    },\r\n    'POST保障送信': {\r\n        type: 'func',\r\n        josi: [['まで', 'へ', 'に'], ['を']],\r\n        pure: true,\r\n        fn: function (url, params, sys) {\r\n            const bodyData = sys.__exec('POSTデータ生成', [params, sys]);\r\n            const options = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                },\r\n                body: bodyData\r\n            };\r\n            return fetch(url, options);\r\n        },\r\n        return_none: false\r\n    },\r\n    'POSTフォーム保障送信': {\r\n        type: 'func',\r\n        josi: [['まで', 'へ', 'に'], ['を']],\r\n        pure: true,\r\n        fn: function (url, params, sys) {\r\n            const fd = new FormData();\r\n            for (const key in params) {\r\n                fd.set(key, params[key]);\r\n            }\r\n            const options = {\r\n                method: 'POST',\r\n                body: fd\r\n            };\r\n            return fetch(url, options);\r\n        },\r\n        return_none: false\r\n    },\r\n    'AJAX内容取得': {\r\n        type: 'func',\r\n        josi: [['から'], ['で']],\r\n        pure: true,\r\n        fn: function (res, type, sys) {\r\n            type = type.toString().toUpperCase();\r\n            if (type === 'TEXT' || type === 'テキスト') {\r\n                return res.text();\r\n            }\r\n            else if (type === 'JSON') {\r\n                return res.json();\r\n            }\r\n            else if (type === 'BLOB') {\r\n                return res.blob();\r\n            }\r\n            else if (type === 'ARRAY' || type === '配列') {\r\n                return res.arrayBuffer();\r\n            }\r\n            else if (type === 'BODY' || type === '本体') {\r\n                return res.body;\r\n            }\r\n            return res.body();\r\n        },\r\n        return_none: false\r\n    },\r\n    // @Blob\r\n    'BLOB作成': {\r\n        type: 'func',\r\n        josi: [['を', 'から'], ['で']],\r\n        pure: true,\r\n        fn: function (data, options) {\r\n            if (!(data instanceof Array)) {\r\n                data = [data];\r\n            }\r\n            return new Blob(data, options);\r\n        }\r\n    },\r\n    // @HTTPとAJAX(非推奨)\r\n    'AJAX逐次送信': {\r\n        type: 'func',\r\n        josi: [['まで', 'へ', 'に']],\r\n        pure: true,\r\n        fn: function (url, sys) {\r\n            if (!sys.resolve) {\r\n                throw new Error('『AJAX逐次送信』は『逐次実行』構文内で利用する必要があります。');\r\n            }\r\n            sys.resolveCount++;\r\n            const resolve = sys.resolve;\r\n            const reject = sys.reject;\r\n            let options = sys.__v0['AJAXオプション'];\r\n            if (options === '') {\r\n                options = { method: 'GET' };\r\n            }\r\n            fetch(url, options).then(res => {\r\n                return res.text();\r\n            }).then(text => {\r\n                sys.__v0['対象'] = text;\r\n                resolve();\r\n            }).catch(err => {\r\n                reject(err.message);\r\n            });\r\n        },\r\n        return_none: true\r\n    },\r\n    'HTTP逐次取得': {\r\n        type: 'func',\r\n        josi: [['の', 'から', 'を']],\r\n        pure: false,\r\n        fn: function (url, sys) {\r\n            if (!sys.resolve) {\r\n                throw new Error('『HTTP逐次取得』は『逐次実行』構文内で利用する必要があります。');\r\n            }\r\n            sys.__exec('AJAX逐次送信', [url, sys]);\r\n        },\r\n        return_none: true\r\n    },\r\n    'POST逐次送信': {\r\n        type: 'func',\r\n        josi: [['まで', 'へ', 'に'], ['を']],\r\n        pure: false,\r\n        fn: function (url, params, sys) {\r\n            if (!sys.resolve) {\r\n                throw new Error('『POST送信』は『逐次実行』構文内で利用する必要があります。');\r\n            }\r\n            sys.resolveCount++;\r\n            const resolve = sys.resolve;\r\n            const reject = sys.reject;\r\n            const bodyData = sys.__exec('POSTデータ生成', [params, sys]);\r\n            const options = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                },\r\n                body: bodyData\r\n            };\r\n            fetch(url, options).then(res => {\r\n                return res.text();\r\n            }).then(text => {\r\n                sys.__v0['対象'] = text;\r\n                resolve(text);\r\n            }).catch(err => {\r\n                reject(err.message);\r\n            });\r\n        },\r\n        return_none: true\r\n    },\r\n    'POSTフォーム逐次送信': {\r\n        type: 'func',\r\n        josi: [['まで', 'へ', 'に'], ['を']],\r\n        pure: true,\r\n        fn: function (url, params, sys) {\r\n            if (!sys.resolve) {\r\n                throw new Error('『POSTフォーム逐次送信』は『逐次実行』構文内で利用する必要があります。');\r\n            }\r\n            sys.resolveCount++;\r\n            const resolve = sys.resolve;\r\n            const reject = sys.reject;\r\n            const fd = new FormData();\r\n            for (const key in params) {\r\n                fd.set(key, params[key]);\r\n            }\r\n            const options = {\r\n                method: 'POST',\r\n                body: fd\r\n            };\r\n            fetch(url, options).then(res => {\r\n                return res.text();\r\n            }).then(text => {\r\n                sys.__v0['対象'] = text;\r\n                resolve(text);\r\n            }).catch(err => {\r\n                reject(err.message);\r\n            });\r\n        },\r\n        return_none: true\r\n    }\r\n};\r\n","// @ts-nocheck\r\n// plugin_browser_in_worker.js\r\nimport PartBrowserColor from './plugin_browser_color.mjs';\r\nimport PartBrowserAjax from './plugin_browser_ajax.mjs';\r\nimport PartBrowserHtml from './plugin_browser_html.mjs';\r\nimport PartBrowserWebsocket from './plugin_browser_websocket.mjs';\r\nconst BrowserParts = [\r\n    PartBrowserColor,\r\n    PartBrowserAjax,\r\n    PartBrowserHtml,\r\n    PartBrowserWebsocket\r\n];\r\nconst PluginBrowserInWorker = {\r\n    '初期化': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            /* eslint no-global-assign: 0 */\r\n            if (typeof self === 'undefined') {\r\n                self = {};\r\n            }\r\n            if (typeof navigator === 'undefined') {\r\n                navigator = {};\r\n            }\r\n            // 定数を初期化\r\n            sys.__v0['AJAX:ONERROR'] = (err) => { console.log(err); };\r\n            // オブジェクトを初期化\r\n            sys.__v0.SELF = self;\r\n            sys.__v0.NAVIGATOR = navigator;\r\n        }\r\n    }\r\n};\r\nBrowserParts.forEach((a) => {\r\n    const b = {};\r\n    Object.assign(b, a);\r\n    if (typeof b['初期化'] !== 'undefined') {\r\n        delete b['初期化'];\r\n    }\r\n    Object.assign(PluginBrowserInWorker, b);\r\n});\r\nexport default PluginBrowserInWorker;\r\n","// @ts-nocheck\r\nexport default {\r\n    // @HTML操作\r\n    'HTML変換': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (text) {\r\n            return String(text)\r\n                .replace(/&/g, '&amp;')\r\n                .replace(/>/g, '&gt;')\r\n                .replace(/</g, '&lt;');\r\n        }\r\n    },\r\n    // @クリップボード\r\n    'クリップボード設定': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: async function (text) {\r\n            // Clipboard APIをサポートしているか\r\n            if (navigator.clipboard) {\r\n                await navigator.clipboard.writeText(text);\r\n                return;\r\n            }\r\n            // Clipboard APIをサポートしていない場合\r\n            const tmp = document.createElement('div');\r\n            const pre = document.createElement('pre');\r\n            pre.style.webkitUserSelect = 'auto';\r\n            pre.style.userSelect = 'auto';\r\n            tmp.appendChild(pre).textContent = text;\r\n            // 画面外へ表示する\r\n            tmp.style.position = 'fixed';\r\n            tmp.right = '200%';\r\n            document.body.appendChild(tmp);\r\n            document.getSelection().selectAllChildren(tmp);\r\n            document.execCommand('copy');\r\n            document.body.removeChild(tmp);\r\n        },\r\n        return_none: true\r\n    },\r\n    'クリップボード取得時': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (f, sys) {\r\n            // Clipboard APIをサポートしているか\r\n            if (navigator.clipboard) {\r\n                if (typeof (f) === 'string') {\r\n                    f = sys.__findFunc(f, 'クリップボード取得時');\r\n                }\r\n                const pm = navigator.clipboard.readText();\r\n                pm.then(text => {\r\n                    sys.__v0['対象'] = text;\r\n                    f(sys);\r\n                });\r\n            }\r\n            else {\r\n                throw new Error('Clipbard APIが利用できません。');\r\n            }\r\n        }\r\n    },\r\n    'クリップボード取得': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        asyncFn: true,\r\n        fn: async function (sys) {\r\n            // Clipboard APIをサポートしているか\r\n            if (navigator.clipboard) {\r\n                const result = await navigator.clipboard.readText();\r\n                return result;\r\n            }\r\n            else {\r\n                throw new Error('Clipbard APIが利用できません。');\r\n            }\r\n        }\r\n    }\r\n};\r\n","// @ts-nocheck\r\nexport default {\r\n    // @WebSocket\r\n    'WS接続完了時': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (callback, sys) {\r\n            sys.__v0['WS:ONOPEN'] = callback;\r\n        },\r\n        return_none: true\r\n    },\r\n    'WS受信時': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (callback, sys) {\r\n            sys.__v0['WS:ONMESSAGE'] = callback;\r\n        },\r\n        return_none: true\r\n    },\r\n    'WSエラー発生時': {\r\n        type: 'func',\r\n        josi: [['を']],\r\n        pure: true,\r\n        fn: function (callback, sys) {\r\n            sys.__v0['WS:ONERROR'] = callback;\r\n        },\r\n        return_none: true\r\n    },\r\n    'WS接続': {\r\n        type: 'func',\r\n        josi: [['に', 'へ', 'の']],\r\n        pure: true,\r\n        fn: function (s, sys) {\r\n            const ws = new WebSocket(s);\r\n            ws.onopen = () => {\r\n                const cbOpen = sys.__v0['WS:ONOPEN'];\r\n                if (cbOpen) {\r\n                    cbOpen(sys);\r\n                }\r\n            };\r\n            ws.onerror = (err) => {\r\n                const cbError = sys.__v0['WS:ONERROR'];\r\n                if (cbError) {\r\n                    cbError(err, sys);\r\n                }\r\n                console.log('WSエラー', err);\r\n            };\r\n            ws.onmessage = (e) => {\r\n                sys.__v0['対象'] = e.data;\r\n                const cbMsg = sys.__v0['WS:ONMESSAGE'];\r\n                if (cbMsg) {\r\n                    cbMsg(sys);\r\n                }\r\n            };\r\n            sys.__v0['WS:SOCKET'] = ws;\r\n            return ws;\r\n        }\r\n    },\r\n    'WS送信': {\r\n        type: 'func',\r\n        josi: [['を', 'と']],\r\n        pure: true,\r\n        fn: function (s, sys) {\r\n            const ws = sys.__v0['WS:SOCKET'];\r\n            ws.send(s);\r\n        }\r\n    },\r\n    'WS切断': {\r\n        type: 'func',\r\n        josi: [],\r\n        pure: true,\r\n        fn: function (sys) {\r\n            const ws = sys.__v0['WS:SOCKET'];\r\n            ws.close();\r\n        }\r\n    }\r\n};\r\n","// @ts-nocheck\r\nconst PluginWorker = {\r\n  '初期化': {\r\n    type: 'func',\r\n    josi: [],\r\n    pure: true,\r\n    fn: function (sys) {\r\n      sys.__v0.SELF = self || {}\r\n      sys.__v0['依頼主'] = self || {}\r\n    }\r\n  },\r\n\r\n  '対象イベント': { type: 'const', value: '' }, // @たいしょういべんと\r\n  '受信データ': { type: 'const', value: '' }, // @たいしょういべんと\r\n  'SELF': { type: 'const', value: '' }, // @SELF\r\n  '依頼主': { type: 'const', value: '' }, // @SELF\r\n\r\n  'NAKOワーカーデータ受信時': { // @無名関数Fでなでしこv3エンジンに対してワーカーメッセージによりデータを受信した時に実行するイベントを設定。『受信データ』に受信したデータM。『対象イベント』にイベント引数。 // @NAKOわーかーでーたじゅしんしたとき\r\n    type: 'func',\r\n    josi: [['で']],\r\n    pure: false,\r\n    fn: function (func, sys) {\r\n      func = sys.__findVar(func, null) // 文字列指定なら関数に変換\r\n      sys.__varslist[0]['PluginWorker:ondata'] = (data, e) => {\r\n        sys.__v0['受信データ'] = data\r\n        sys.__v0['対象イベント'] = e\r\n        return func(e, sys)\r\n      }\r\n    },\r\n    return_none: true\r\n  },\r\n  'ワーカーメッセージ受信時': { // @無名関数Fでselfに対してメッセージを受信した時に実行するイベントを設定。『受信データ』に受信したデータ。『対象イベント』にイベント引数。 // @わーかーめっせーじじゅしんしたとき\r\n    type: 'func',\r\n    josi: [['で']],\r\n    pure: false,\r\n    fn: function (func, sys) {\r\n      func = sys.__findVar(func, null) // 文字列指定なら関数に変換\r\n      self.onmessage = (e) => {\r\n        sys.__v0['受信データ'] = e.data\r\n        sys.__v0['対象イベント'] = e\r\n        return func(e, sys)\r\n      }\r\n    },\r\n    return_none: true\r\n  },\r\n  'NAKOワーカーデータ送信': { // @起動もとに固有の形式でデータを送信する。 // @NAKOわーかーでーたへんしん\r\n    type: 'func',\r\n    josi: [['を']],\r\n    pure: true,\r\n    fn: function (data, sys) {\r\n      const msg = {\r\n        type: 'data',\r\n        data: data\r\n      }\r\n      postMessage(msg)\r\n    },\r\n    return_none: true\r\n  },\r\n  'ワーカーメッセージ送信': { // @起動もとにメッセージを送信する。 // @わーかーめっせーじへんしん\r\n    type: 'func',\r\n    josi: [['を']],\r\n    pure: true,\r\n    fn: function (msg, sys) {\r\n      postMessage(msg)\r\n    },\r\n    return_none: true\r\n  },\r\n  '表示': { // @メインスレッドに固有の形式で表示データを送信する。 // @ひょうじ\r\n    type: 'func',\r\n    josi: [['を']],\r\n    pure: true,\r\n    fn: function (data, sys) {\r\n      const msg = {\r\n        type: 'output',\r\n        data: data\r\n      }\r\n      postMessage(msg)\r\n    },\r\n    return_none: true\r\n  },\r\n  '終了': { // @ワーカーを終了する。 // @しゅうりょう\r\n    type: 'func',\r\n    josi: [],\r\n    pure: true,\r\n    fn: function (sys) {\r\n      close()\r\n    },\r\n    return_none: true\r\n  }\r\n}\r\n\r\n// module.exports = PluginWorker\r\nexport default PluginWorker\r\n\r\n\r\n","// nadesiko for web browser worker\r\n// wwnako3.js\r\nimport { NakoCompiler } from '../core/src/nako3.mjs'\r\nimport PluginBrowserInWorker from './plugin_browser_in_worker.mjs'\r\nimport PluginWorker from './plugin_worker.mjs'\r\n\r\nclass WebWorkerNakoCompiler extends NakoCompiler {\r\n  constructor () {\r\n    super()\r\n    this.__varslist[0]['ナデシコ種類'] = 'wwnako3'\r\n    this.__varslist[0]['PluginWorker:ondata'] = (data, event) => {\r\n      throw new Error('『NAKOワーカーデータ受信時』が呼ばれていません。')\r\n    }\r\n  }\r\n}\r\n\r\n// ブラウザワーカーなら navigator.nako3 になでしこを登録\r\n// eslint-disable-next-line no-undef\r\nif (typeof (navigator) === 'object' && self && self instanceof WorkerGlobalScope) {\r\n  /** @type {WebWorkerNakoCompiler} */\r\n  const nako3Compiler = navigator.nako3 = new WebWorkerNakoCompiler()\r\n  /** @type {WebWorkerNakoCompiler | import('./nako_global')} */\r\n  let nako3Global = nako3Compiler\r\n  \r\n  nako3Compiler.addPluginObject('PluginBrowserInWorker', PluginBrowserInWorker)\r\n  nako3Compiler.addPluginObject('PluginWorker', PluginWorker)\r\n\r\n  nako3Compiler.getLogger().addListener('error', function (obj) {\r\n    self.postMessage({\r\n      type: 'error',\r\n      data: obj\r\n    })\r\n  }, false)\r\n\r\n  self.onmessage = (event) => {\r\n    const data = event.data || { type: '', data: '' }\r\n    const type = data.type || ''\r\n    const value = data.data || ''\r\n    switch (type) {\r\n      case 'reset':\r\n        nako3Compiler.reset()\r\n        break\r\n      case 'close':\r\n        self.close()\r\n        break\r\n      case 'run':\r\n        nako3Global = nako3Global.runEx(value, '_webworker.nako3', { resetEnv: false, resetLog: false })\r\n        break\r\n      case 'trans':\r\n        value.forEach(o => {\r\n          if (o.type === 'func') {\r\n            nako3Compiler.nakoFuncList[o.name] = o.content.meta\r\n            nako3Compiler.funclist[o.name] = o.content.func\r\n            nako3Compiler.__varslist[1][o.name] = () => {}\r\n          } else if (o.type === 'val') {\r\n            nako3Compiler.__varslist[2][o.name] = o.content\r\n          }\r\n        })\r\n        break\r\n      case 'data':\r\n        if (nako3Global.__varslist[0]['PluginWorker:ondata']) {\r\n          nako3Global.__varslist[0]['PluginWorker:ondata'].apply(nako3Global, [value, event])\r\n        }\r\n        break\r\n    }\r\n  }\r\n}\r\n\r\n"],"names":["version","major","minor","patch","NakoError","Error","constructor","tag","msg","file","undefined","line","positionJa","super","replace","this","name","type","NakoIndentError","InternalLexerError","preprocessedCodeStartOffset","preprocessedCodeEndOffset","NakoLexerError","startOffset","endOffset","NakoSyntaxError","static","first","last","NakoRuntimeError","error","lineNo","matches","message","exec","parseInt","NakoImportError","NakoGenOptions","isTest","importFiles","codeStandalone","convEnv","codeEnv","fname","push","NakoGen","com","nakoFuncList","getNakoFuncList","nakoTestFuncs","usedFuncSet","Set","loopId","numAsyncFn","usedAsyncFn","flagLoop","__self","genMode","lastLineNo","varslistSet","__varslist","map","v","isFunction","names","Object","keys","readonly","varsSet","speedMode","lineNumbers","implicitTypeCasting","invalidSore","forcePure","performanceMonitor","userFunction","systemFunction","systemFunctionBody","mumeiId","warnUndefinedVar","constPools","warnUndefinedReturnUserFunc","warnUndefinedCallingUserFunc","warnUndefinedCallingSystemFunc","warnUndefinedCalledUserFuncArgs","debugOption","test","convLineno","node","forceUpdate","incLine","lineNoStr","lineDataJSON","JSON","stringify","debugCode","useDebug","messageAction","waitTime","varname","length","isValidIdentifier","indexOf","a","split","getFuncName","name2","convRequire","moduleName","value","getDefFuncCode","opt","code","getModList","nakoFuncCode","key","f","fn","asyncFn","testCode","addPlugin","po","addPluginObject","addPluginFile","objName","path","addFunc","josi","getFunc","registerFunction","ast","funcList","registFunc","block","blockList","Array","i","t","add","meta","initialNames","convGen","result","_convGen","isExpression","n","blocks","b","convComment","convCheckLoop","convString","convDefLocalVar","convDefLocalVarlist","convLet","convInc","convGetVar","convOp","convRenbun","convCallFunc","convIf","convTikuji","convFor","convForeach","convRepeatTimes","convSpeedMode","convPerformanceMonitor","convWhile","convAtohantei","convSwitch","convLetArray","convRefArray","convJsonArray","convJsonObj","convFuncObj","convDefTest","convDefFunc","convReturn","convTryExcept","findVar","has","isTop","js","genVar","position","res","lno","dispName","getLogger","warn","pv","getNakoFunc","commentSrc","String","poolIndex","cmd","cmdj","convDefFuncCommon","performanceMonitorInjectAtStart","performanceMonitorInjectAtEnd","variableDeclarations","varsDeclared","from","values","varnames","word","oldUsedAsyncFn","join","includes","pop","e","list","index","codeInit","codeArray","checkInit","arrayDefCode","convGenLoop","tmpflag","varName","idLoop","varI","kara","made","to","flagDown","inc","varFrom","varTo","sorePrefex","target","nameS","id","options","prev","cond","varId","cases","body","cvalue","cblock","expr","falseBlock","false_block","curName","errorCode","errorBlock","convFuncGetArgsCalcType","_funcName","_func","args","opts","nodeArgs","arg","sore","getPluginList","r","__module","funcName","func","return_none","argsInfo","argsOpts","funcDef","funcBegin","funcEnd","setter","pure","localVars","str","indent","text","repeat","noCheckFuncs","argsCode","argsA","forEach","argStr","funcCall","right","left","OP_TBL","eq","noteq","gt","lt","gteq","lteq","and","or","shift_l","shift_r","shift_r0","op","operator","jsName","nodeName","vtype","vartype","mode","rf","errBlock","getUsedFuncSet","getPluginInitCode","pluginCode","initkey","generateJS","gen","jsInit","funcID","Date","getTime","Math","floor","random","asyncMain","syncMain","trace","codeImportFiles","importNames","ff","standaloneJSCode","coreVersion","initCode","runtimeEnv","standalone","NakoCodeNop","NakoCodeLabel","NakoCodeEOL","NakoCodeJump","NakoCodeJumpIfTrue","NakoCodeJumpIfFalse","NakoCodeCall","NakoCodeCallObj","NakoCodeReturn","NakoCodeTry","NakoCodeCode","NakoCode","no","NakoGenASync","nakoTestList","codeId","labelContinue","labelBreak","labels","getVarsCode","toString","needToFixAddr","codes","filter","usedLabels","splice","s","addCode","addCodeStr","convFunc","codeStr","a2","row","c","makeLabel","uniqLabel","makeLabelDirectly","labelName","makeJump","label","makeJumpIfTrue","makeJumpIfFalse","labelBegin","labelEnd","labelIfFalse","loopVar","loopCount","labelCheck","o","isMumeiFunc","codeCall","size","labelInc","taisyo","taisyoKey","targetArray","targetKeys","setTarget","_node","_isExpression","varValue","nextLabel","isJSFunc","arcCount","nameObj","vname","labelExcept","navigator","nako3","addCodeGenerator","josiList","tararebaJosiList","removeJosiList","tararebaMap","removeJosiMap","sort","josiRE","RegExp","pluginName","pluginVersion","nakoRuntime","nakoVersion","sys","isDebug","__v0","__namespaceList","__findVar","nameStr","def","__locals","varScope","modList","__modList","__modName","modName","gname","scope","__findFunc","parentFunc","__exec","params","f0","apply","__timeout","__interval","z2","__zero2","substring","__zero","keta","zeroS","__formatDate","getFullYear","getMonth","getDate","__formatTime","getHours","getSeconds","getMinutes","__formatDateTime","fmt","dateStr","timeStr","match","__str2date","parseFloat","__printPool","chk","constId","cp","logger","__genMode","__stopAsync","PI","NaN","Infinity","send","isVariableJosi","console","log","aa","pow","reduce","p","__reisetu","src","eval","async","Function","obj","m","runEx","resetEnv","resetLog","out","resetAll","tf","performance","now","t1","forceClose","isNaN","Number","g","v2","fromCodePoint","fromCharCode","prototype","codePointAt","charCodeAt","ss","cnt","toUpperCase","toLowerCase","chr","zen1","han1","zen2","han2","c2","n2","charAt","j","parse","re","sa","global","z","ufunc","reverse","tmp","old","concat","x","y","max","min","nn","ns","ms","col","cols","rows","k","idx","nr","slice","sum","Promise","resolve","reject","timerId","setTimeout","err","newenv","unshift","setInterval","clearInterval","clearTimeout","d","getDay","tm","getMilliseconds","era","gengo","d2","t2","ceil","unit","sec","rd","opc","addY","addM","addD","setFullYear","setMonth","setDate","curLine","breakpoints","forceLine","vars","hasOwnProperty","call","pluginfiles","then","mod","assign","catch","w","default","encodeURIComponent","decodeURIComponent","url","kv","window","btoa","u8a","TextEncoder","encode","utf8str","Buffer","atob","decodedUtf8str","dec","decodedArray","Uint8Array","TextDecoder","decode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","definition","defineProperty","enumerable","get","prop","Symbol","toStringTag","opPriority","RenbunJosi","operatorList","NewEmptyToken","column","NakoParserBase","stackList","tokens","usedFuncs","stack","namespaceStack","funclist","funcLevel","localvars","arrayIndexFrom","flagReverseArrayIndex","flagCheckArrayInit","recentlyCalledFunc","init","reset","setFuncList","popStack","saveStack","loadStack","info","gnameSelf","pushStack","item","isEOF","getIndex","check","ttype","check2","checkTypes","accept","types","tmpIndex","rollback","bind","token","getCur","unget","peek","peekDef","peekSourceMap","nodeToStr","debugMode","depth","typeName","debug","subNode","node2","table","not","isIndentChars","ch","kanakanji","hira","allHiragana","wordHasIjoIka","wordSpecial","errorRead","unitRE","rules","pattern","cbParser","numEOL","readJosi","cb","parseNumber","cbString","isTrimOkurigana","substr","ii","trimOkurigana","beginTag","closeTag","NakoLexer","listObj","replaceTokens","isFirst","filename","filenameToModName","preDefineFunc","_replaceWord","eof","rawJosi","isFuncPointer","readArgs","funcPointer","funcPointers","already","kai","isMumei","prevToken","defToken","funcNameToken","splitStringEx","arr","end","comment","modSelf","gname1","gfo1","gfo","fo","ltype","countIndent","tokenize","srcLength","columnCurrent","lineCurrent","isDefTest","ia","ok","rule","rp","offset","preprocessedCodeOffset","preprocessedCodeLength","srcOffset","um","sep","NakoParser","startParser","ySentenceList","ySentence","makeStackBalanceReport","words","desc","descFunc","chA","josiA","yEOL","eol","report","yIF","yAtohantei","yTryExcept","yTikuji","yRequire","yASyncMode","yDNCLMode","ySetGenMode","ySpeedMode","yPerformanceMonitor","yLet","yDefTest","yDefFunc","yCall","c1","ver","shift","yBlock","yDefFuncReadArgs","yDef","defArgs","multiline","backupLocalvars","fnName","yIFCond","yGetArg","tmpI","naraba","smap","mosi","trueBlock","tanbun","optionNode","val","tikuji","tugini","tuginiType","yGetArgOperator","firstValue","yValue","infixToAST","value1","infixToPolish","priority","polish","sTop","tpop","ans","yGetArgParen","isClose","si","yRepeatTime","num","yWhile","bUntil","yFor","kurikaesu","incdec","vInc","vTo","vFrom","yReturn","yForEach","ySwitch","joukenbunki","isDefaultClause","skippedKokomade","condToken","condBlock","kokomade","yMumeiFunc","yDainyu","dainyu","getVarName","ySadameru","sadameru","createVar","yIncDec","action","cur","yCallFunc","msgDebug","d0","d1","funcObj","nullCount","valueCount","popArg","funcNode","space","threw","yCalc","nameToken","la","yLetArrayAt","lb","yLetArrayBracket","wordToken","yJSONArray","createVarList","checkArrayIndex","checkArrayReverse","ary","yValueKakko","closeParent","yJSONObject","splitType","tt","getVarNameRef","yValueWord","yValueWordGetIndex","isConst","yJSONObjectValue","firstToken","yJSONArrayValue","v1","kansi","ReplaceHistory","ConvertResult","sourcePosition","Replace","history","getText","replaceAll","getSourcePosition","NakoPrepare","convertTable","Map","_instance","convert1ch","convert","flagStr","flagStr2","endOfStr","ch2","debugTokens","ftype","fvalue","makeIndent","lastTokenInfo","newToken","templateToken","IS_DEBUG","isSkipWord","joinTokenLines","lines","getLastTokenWithoutEOL","len","splitTokens","delimiter","kakko","IsEmptyLine","ty","GetLeftTokens","INDENT_MODE_KEYWORDS","convertIndentSyntax","useIndentSynax","jsonObjLevel","jsonArrayLevel","checkJsonSyntax","blockIndents","lastI","leftToken","curI","blockIndentTopLast","DNCL_KEYWORDS","DNCL_SIMPLES","convertDNCL","useDNCLmode","fi","findTokens","replaceAtohantei","fi2","nai","ni","sou","nakumosi","nakumosiTudukiStr","nakumosiToken","fu","replaceAllElementV","begin","times","mul","wo","ga","findTypeValue","findA","flag","DNCL_ARRAY_INIT_COUNT","DNCL2_KEYWORDS","convertDNCL2","useDNCL2mode","tokenEq","varToken","valToken","typeValues","fromIndex","pat","SourceMappingOfTokenization","sourceCodeLength","preprocessed","cumulativeSum","el","lastIndex","lastPreprocessedCodePosition","preprocessedCodePosition","findIndex","SourceMappingOfIndentSyntax","codeAfterProcessingIndentationSyntax","linesInsertedByIndentationSyntax","linesDeletedByIndentationSyntax","lastLineNumber","lastOffset","tokenLine","getLineNumber","insertedLine","deletedLine","lineNumber","OffsetToLineColumn","lineOffsets","oneBasedLineNumber","subtractSourceMapByPreCodeLength","sourceMap","preCode","colorNames","NakoColors","noColor","browserConsoleStyles","consoleColor","consoleFontWeight","browserConsoleText","_","m1str","m1","htmlColor","htmlFontWeight","nodeConsole","html","browserConsole","bold","black","red","green","yellow","blue","magenta","cyan","white","LogLevel","levelStr","level","all","stdout","stringifyPosition","NakoLogger","listeners","logs","getErrorLogs","clear","addListener","callback","fromS","removeListener","l","sendI","pos","runtimeError","posStr","makeData","formats","style","data","NakoGlobal","compiler","guid","lastJSCode","numFailures","nextIndex","__code","__callstack","__stack","__labels","getPluginfiles","clearLog","nakoGlobal","runSync","runAsync","_runTests","tests","pass","clearPlugins","clearName","pname","destroy","sin","cos","tan","asin","acos","atan","atan2","XY","abs","exp","hypot","LOG2E","LOG10E","trunc","sqrt","round","base","txt","reToDelim","convType","search","cells","valueConv","fQuot","genValueConverter","__promise","setLastPromise","promise","cbFunc","reason","finally","cloneAsJSON","newCompilerOptions","initObj","testOnly","NakoCompiler","useBasicPlugin","__vars","__v1","__globals","__globalObj","pluginFunclist","commandlist","eventList","codeGenerateor","dependencies","addBasicPlugins","prepare","getInstance","parser","lexer","replaceLogger","requireStatements","start","lastToken","_loadDependencies","tools","loadJS","tasks","readJs","filePath","task","pluginFuncs","loadNako3","content","readNako3","registerFile","rawtokenize","loadRec","tagsResolvePath","listRequireStatements","resolvePath","alias","startsWith","tokenizationSourceMapping","indentationSyntaxSourceMapping","offsetToLineColumn","dest","checkICount","lineICount","tFirst","tLast","convertInlineIndent","converttoken","needToClearPlugin","original","lexCodeToken","commentTokens","replaceRequireStatements","includeGuard","deletedTokens","find","children","removeRequireStatements","lex","syntaxHighlighting","requireStatementTokens","requireTokens","lexerOutput","deleteUnNakoFuncs","getUsedFuncs","queue","ast_","getUsedAndDefFuncs","astQueue","blockQueue","getUsedAndDefFunc","delete","compile","compileFromCode","eventName","outCode","generateCode","genObj","generate","isReset","_runEx","evalJS","getNakoGlobal","run","compileStandalone","persistent","fpath","returnNone","setFunc","method","fetch","status","option","headers","json","blob","bodyData","fd","FormData","set","flist","arrayBuffer","Blob","resolveCount","PluginBrowserInWorker","self","SELF","NAVIGATOR","clipboard","writeText","document","createElement","pre","webkitUserSelect","userSelect","appendChild","textContent","getSelection","selectAllChildren","execCommand","removeChild","readText","ws","WebSocket","onopen","cbOpen","onerror","cbError","onmessage","cbMsg","close","postMessage","WebWorkerNakoCompiler","event","WorkerGlobalScope","nako3Compiler","nako3Global"],"sourceRoot":""}