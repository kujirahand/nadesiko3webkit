{"version":3,"file":"plugin_kansuji.js","mappings":"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","sources":["webpack://nadesiko3/./src/plugin_kansuji.mjs"],"sourcesContent":["// @ts-nocheck\nconst PluginKansuji = {\n\n  '初期化': {\n    type: 'func',\n    josi: [],\n    pure: true,\n    fn: function (sys) {\n    }\n  },\n\n  // @漢数字関連\n  '漢数字': { // @引数を数字と解釈して漢数字の文字列を返す // @かんすうじ\n    type: 'func',\n    josi: [['を', 'の']],\n    pure: true,\n    fn: function (input) {\n      function preprocesser (input) {\n        // eslint-disable-next-line camelcase\n        function if_number_is_exponent (input) {\n          const match = input.match(/[0-9]*\\.?[0-9]+[eE][-+]?[0-9]+/)\n          if (match && match[0] === input) {\n            const base = input.match(/[0-9]*\\.?[0-9]+[eE]/)[0].slice(0, -1)\n            const exponent = input.match(/[eE][-+]?[0-9]+/)[0].slice(1)\n            // eslint-disable-next-line no-inner-declarations\n            function movepoint (base, exponent) {\n              const sign = exponent[0]\n              const curpointidx = base.includes('.') ? base.indexOf('.') : base.length\n              const idx = sign === '-' ? curpointidx - parseInt(exponent.slice(1)) : curpointidx + parseInt(exponent.match(/[0-9]+$/)[0])\n              function strIns (str, idx, val) {\n                return str.slice(0, idx) + val + str.slice(idx)\n              }\n              if (idx > 0) {\n                if (base.length - curpointidx > idx) {\n                  return strIns(base.replace('.', ''), idx, '.')\n                } else {\n                  if (base.includes('.')) {\n                    return base.replace('.', '') + '0'.repeat(idx - base.length + curpointidx)\n                  } else {\n                    return base + '0'.repeat(idx - base.length + curpointidx - 1)\n                  }\n                }\n              } else {\n                return '0.' + '0'.repeat(-idx) + base.replace('.', '')\n              }\n            }\n            input = movepoint(base, exponent)\n          }\n          return input\n        }\n        function asciify (input) { // 全角数字を半角数字に\n          return input.replace(/[０-９]/g, s => {\n            return String.fromCharCode(s.charCodeAt(0) - 65248)\n          })\n        }\n        input = asciify(input)\n        if (Number.isNaN(Number(input))) { throw new Error('『漢数字』命令の中に無効な文字が含まれています。') }\n        const output = if_number_is_exponent(input.toString())\n        // eslint-disable-next-line no-loss-of-precision\n        if (output > BigInt(999999999999999999999999999999999999999999999999999999999999999999999999)) { throw new Error('『漢数字』命令の中に含められる数の大きさを超えています。') }\n        return output\n      }\n      input = preprocesser(String(input))\n      function separater (str) {\n        let isminus = str.includes('.')\n        return str.split('').reverse().reduce((acc, cur) => {\n          if (cur === '.') {\n            isminus = false\n            acc.splice(1, 0, '.')\n            return acc\n          } else if (isminus) {\n            acc.splice(1, 0, cur)\n            return acc\n          }\n          if (acc[0].length === 軸数字.length) {\n            acc.unshift([])\n          }\n          acc[0].unshift(cur)\n          return acc\n        }, [[]])\n      }\n      function converter (arr) {\n        function replacer (str) {\n          return 基本漢数字[基本算用数字.indexOf(str)]\n        }\n        let adjuster = 0\n        const result = arr.reverse().reduce((acc, cur, idx) => {\n          if (typeof cur === 'string') {\n            if (cur === '.') {\n              acc = '・' + acc\n              adjuster = idx + 1\n            } else {\n              acc = replacer(cur) + acc\n            }\n          } else {\n            const unit = cur.reduce((acc, cur, idx, src) => {\n              if (cur === '0') {\n                return acc\n              } else if (cur === '1' && 軸数字[src.length - 1 - idx] !== '') {\n                return acc + 軸数字[src.length - 1 - idx]\n              } else {\n                return acc + replacer(cur) + 軸数字[src.length - 1 - idx]\n              }\n            }, '')\n            acc = (unit ? unit + 単位数字[idx - adjuster] : '') + acc\n          }\n          return acc\n        }, '')\n        return result[0] === '・' ? '零' + result : result\n      }\n      // フラグを覚えておく #874\n      let flag = ''\n      if (input.charAt(0) === '+' || input.charAt(0) === '-') {\n        flag = input.charAt(0)\n        input = input.substr(1)\n      }\n      let res = converter(separater(input))\n      if (res === '') { res = '零' }\n      return flag + res\n    }\n  },\n  '算用数字': { // @U引数を漢数字と解釈して数値を返す // @さんようすうじ\n    type: 'func',\n    josi: [['を', 'の']],\n    pure: true,\n    fn: function (input) {\n      function converter (src) {\n        const multibytes = 単位数字.filter(a => a.length > 1)\n        const result = []\n        for (let idx = 0; idx < src.length; idx++) {\n          const cur = src.slice(idx, idx + 1)\n          const 指数 = 単位数字.includes(cur) ? cur : multibytes.find(v => v === src.slice(idx, idx + v.length))\n          const 位 = 軸数字.includes(cur) ? cur : null\n          const 底 = 基本漢数字.includes(cur) ? cur : null\n          if (指数) {\n            if (指数.length > 1) {\n              idx += 指数.length - 1\n            }\n            result.push(BigInt('1' + '0'.repeat(4 * 単位数字.indexOf(指数))))\n          } else if (位) {\n            result.push(10 ** (軸数字.indexOf(位)))\n          } else if (底) {\n            result.push(基本漢数字.indexOf(底))\n          } else if (cur === '・') {\n            result.push('.')\n          } else if (cur === '零') {\n            result.push('0')\n          } else {\n            throw new Error('『算用数字』命令の中に無効な文字が含まれています。')\n          }\n        }\n        return result\n      }\n      function separater (arr) {\n        let base = []\n        let unit = []\n        let isminus = false\n        return arr.reduce((acc, cur, idx) => {\n          if (cur === '.') {\n            if (base.length === 0) { base.push(0, 1) }\n            if (base.length === 1) { base.push(1) }\n            unit.push(base)\n            base = []\n            acc.push(unit)\n            acc.push('.')\n            unit = []\n            isminus = true\n          } else if (isminus) {\n            acc.push(String(cur))\n          } else if (cur > 1000) {\n            if (base.length === 0) { base.push(0, 1) }\n            if (base.length === 1) { base.push(1) }\n            unit.push(base)\n            base = []\n            unit.push(cur)\n            acc.push(unit)\n            unit = []\n          } else if (cur >= 10 && cur <= 1000) {\n            if (base.length === 0) { base.push(1) }\n            base.push(cur)\n            unit.push(base)\n            base = []\n          } else if (cur < 10) {\n            base.push(cur)\n          }\n          if (idx + 1 === arr.length && isminus === false) {\n            if (base.length === 1) {\n              base.push(1)\n              unit.push(base)\n            }\n            acc.push(unit)\n          }\n          return acc\n        }, [])\n      }\n      function calculator (arr) {\n        return arr.reduce((acc, cur, idx) => {\n          return typeof cur === 'string'\n            ? acc + cur\n            : acc + cur.reduce((acc, cur, idx) => {\n              return cur > 1000 ? acc * cur : acc + BigInt(cur[0] * cur[1])\n            }, BigInt(0))\n        }, BigInt(0))\n      }\n      const tmp = calculator(separater(converter(input.toString())))\n      return tmp > Number.MAX_SAFE_INTEGER ? tmp : Number(tmp)\n    }\n  }\n}\n\nconst 単位数字 = [\n  '', '万', '億', '兆', '京', '垓', '𥝱', '穣', '溝', '澗', '正',\n  '載', '極', '恒河沙', '阿僧祇', '那由他', '不可思議', '無量大数'\n]\nconst 軸数字 = [\n  '', '十', '百', '千'\n]\nconst 基本算用数字 = '0123456789'.split('')\nconst 基本漢数字 = '〇一二三四五六七八九'.split('')\n\nexport default PluginKansuji\n\n// scriptタグで取り込んだ時、自動で登録する\nif (typeof (navigator) === 'object' && typeof (navigator.nako3) === 'object') { navigator.nako3.addPluginObject('PluginKansuji', PluginKansuji) }\n"],"names":["PluginKansuji","type","josi","pure","fn","sys","input","flag","replace","s","String","fromCharCode","charCodeAt","asciify","Number","isNaN","Error","output","match","base","slice","exponent","movepoint","sign","curpointidx","includes","indexOf","length","idx","parseInt","str","val","strIns","repeat","if_number_is_exponent","toString","BigInt","preprocesser","charAt","substr","res","arr","replacer","adjuster","result","reverse","reduce","acc","cur","unit","src","converter","isminus","split","splice","unshift","separater","tmp","push","multibytes","filter","a","find","v","MAX_SAFE_INTEGER","navigator","nako3","addPluginObject"],"sourceRoot":""}