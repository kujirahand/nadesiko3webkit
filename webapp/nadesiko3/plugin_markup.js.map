{"version":3,"file":"plugin_markup.js","mappings":"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","sources":["webpack://nadesiko3/./node_modules/html/lib/html.js","webpack://nadesiko3/webpack/bootstrap","webpack://nadesiko3/./node_modules/marked/lib/marked.esm.js","webpack://nadesiko3/./src/plugin_markup.mjs"],"sourcesContent":["/*\n\n Style HTML\n---------------\n\n  Written by Nochum Sossonko, (nsossonko@hotmail.com)\n\n  Based on code initially developed by: Einar Lielmanis, <elfz@laacz.lv>\n    http://jsbeautifier.org/\n\n\n  You are free to use this in any way you want, in case you find this useful or working for you.\n\n  Usage:\n    style_html(html_source);\n\n    style_html(html_source, options);\n\n  The options are:\n    indent_size (default 4)          — indentation size,\n    indent_char (default space)      — character to indent with,\n    max_char (default 70)            -  maximum amount of characters per line,\n    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line.\n    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted\n    indent_scripts (default normal)  - \"keep\"|\"separate\"|\"normal\"\n\n    e.g.\n\n    style_html(html_source, {\n      'indent_size': 2,\n      'indent_char': ' ',\n      'max_char': 78,\n      'brace_style': 'expand',\n      'unformatted': ['a', 'sub', 'sup', 'b', 'i', 'u']\n    });\n*/\n\nfunction style_html(html_source, options) {\n//Wrapper function to invoke all the necessary constructors and deal with the output.\n\n  var multi_parser,\n      indent_size,\n      indent_character,\n      max_char,\n      brace_style,\n      unformatted;\n\n  options = options || {};\n  indent_size = options.indent_size || 4;\n  indent_character = options.indent_char || ' ';\n  brace_style = options.brace_style || 'collapse';\n  max_char = options.max_char == 0 ? Infinity : options.max_char || 70;\n  unformatted = options.unformatted || ['a', 'span', 'bdo', 'em', 'strong', 'dfn', 'code', 'samp', 'kbd', 'var', 'cite', 'abbr', 'acronym', 'q', 'sub', 'sup', 'tt', 'i', 'b', 'big', 'small', 'u', 's', 'strike', 'font', 'ins', 'del', 'pre', 'address', 'dt', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\n  function Parser() {\n\n    this.pos = 0; //Parser position\n    this.token = '';\n    this.current_mode = 'CONTENT'; //reflects the current Parser mode: TAG/CONTENT\n    this.tags = { //An object to hold tags, their position, and their parent-tags, initiated with default values\n      parent: 'parent1',\n      parentcount: 1,\n      parent1: ''\n    };\n    this.tag_type = '';\n    this.token_text = this.last_token = this.last_text = this.token_type = '';\n\n    this.Utils = { //Uilities made available to the various functions\n      whitespace: \"\\n\\r\\t \".split(''),\n      single_token: 'br,input,link,meta,!doctype,basefont,base,area,hr,wbr,param,img,isindex,?xml,embed,?php,?,?='.split(','), //all the single tags for HTML\n      extra_liners: 'head,body,/html'.split(','), //for tags that need a line of whitespace before them\n      in_array: function (what, arr) {\n        for (var i=0; i<arr.length; i++) {\n          if (what === arr[i]) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n\n    this.get_content = function () { //function to capture regular content between tags\n\n      var input_char = '',\n          content = [],\n          space = false; //if a space is needed\n\n      while (this.input.charAt(this.pos) !== '<') {\n        if (this.pos >= this.input.length) {\n          return content.length?content.join(''):['', 'TK_EOF'];\n        }\n\n        input_char = this.input.charAt(this.pos);\n        this.pos++;\n        this.line_char_count++;\n\n        if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n          if (content.length) {\n            space = true;\n          }\n          this.line_char_count--;\n          continue; //don't want to insert unnecessary space\n        }\n        else if (space) {\n          if (this.line_char_count >= this.max_char) { //insert a line when the max_char is reached\n            content.push('\\n');\n            for (var i=0; i<this.indent_level; i++) {\n              content.push(this.indent_string);\n            }\n            this.line_char_count = 0;\n          }\n          else{\n            content.push(' ');\n            this.line_char_count++;\n          }\n          space = false;\n        }\n        content.push(input_char); //letter at-a-time (or string) inserted to an array\n      }\n      return content.length?content.join(''):'';\n    }\n\n    this.get_contents_to = function (name) { //get the full content of a script or style to pass to js_beautify\n      if (this.pos == this.input.length) {\n        return ['', 'TK_EOF'];\n      }\n      var input_char = '';\n      var content = '';\n      var reg_match = new RegExp('\\<\\/' + name + '\\\\s*\\>', 'igm');\n      reg_match.lastIndex = this.pos;\n      var reg_array = reg_match.exec(this.input);\n      var end_script = reg_array?reg_array.index:this.input.length; //absolute end of script\n      if(this.pos < end_script) { //get everything in between the script tags\n        content = this.input.substring(this.pos, end_script);\n        this.pos = end_script;\n      }\n      return content;\n    }\n\n    this.record_tag = function (tag){ //function to record a tag and its parent in this.tags Object\n      if (this.tags[tag + 'count']) { //check for the existence of this tag type\n        this.tags[tag + 'count']++;\n        this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n      }\n      else { //otherwise initialize this tag type\n        this.tags[tag + 'count'] = 1;\n        this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n      }\n      this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent; //set the parent (i.e. in the case of a div this.tags.div1parent)\n      this.tags.parent = tag + this.tags[tag + 'count']; //and make this the current parent (i.e. in the case of a div 'div1')\n    }\n\n    this.retrieve_tag = function (tag) { //function to retrieve the opening tag to the corresponding closer\n      if (this.tags[tag + 'count']) { //if the openener is not in the Object we ignore it\n        var temp_parent = this.tags.parent; //check to see if it's a closable tag.\n        while (temp_parent) { //till we reach '' (the initial value);\n          if (tag + this.tags[tag + 'count'] === temp_parent) { //if this is it use it\n            break;\n          }\n          temp_parent = this.tags[temp_parent + 'parent']; //otherwise keep on climbing up the DOM Tree\n        }\n        if (temp_parent) { //if we caught something\n          this.indent_level = this.tags[tag + this.tags[tag + 'count']]; //set the indent_level accordingly\n          this.tags.parent = this.tags[temp_parent + 'parent']; //and set the current parent\n        }\n        delete this.tags[tag + this.tags[tag + 'count'] + 'parent']; //delete the closed tags parent reference...\n        delete this.tags[tag + this.tags[tag + 'count']]; //...and the tag itself\n        if (this.tags[tag + 'count'] == 1) {\n          delete this.tags[tag + 'count'];\n        }\n        else {\n          this.tags[tag + 'count']--;\n        }\n      }\n    }\n\n    this.get_tag = function () { //function to get a full tag and parse its type\n      var input_char = '',\n          content = [],\n          space = false,\n          tag_start, tag_end;\n\n      do {\n        if (this.pos >= this.input.length) {\n          return content.length?content.join(''):['', 'TK_EOF'];\n        }\n\n        input_char = this.input.charAt(this.pos);\n        this.pos++;\n        this.line_char_count++;\n\n        if (this.Utils.in_array(input_char, this.Utils.whitespace)) { //don't want to insert unnecessary space\n          space = true;\n          this.line_char_count--;\n          continue;\n        }\n\n        if (input_char === \"'\" || input_char === '\"') {\n          if (!content[1] || content[1] !== '!') { //if we're in a comment strings don't get treated specially\n            input_char += this.get_unformatted(input_char);\n            space = true;\n          }\n        }\n\n        if (input_char === '=') { //no space before =\n          space = false;\n        }\n\n        if (content.length && content[content.length-1] !== '=' && input_char !== '>'\n            && space) { //no space after = or before >\n          if (this.line_char_count >= this.max_char) {\n            this.print_newline(false, content);\n            this.line_char_count = 0;\n          }\n          else {\n            content.push(' ');\n            this.line_char_count++;\n          }\n          space = false;\n        }\n        if (input_char === '<') {\n            tag_start = this.pos - 1;\n        }\n        content.push(input_char); //inserts character at-a-time (or string)\n      } while (input_char !== '>');\n\n      var tag_complete = content.join('');\n      var tag_index;\n      if (tag_complete.indexOf(' ') != -1) { //if there's whitespace, thats where the tag name ends\n        tag_index = tag_complete.indexOf(' ');\n      }\n      else { //otherwise go with the tag ending\n        tag_index = tag_complete.indexOf('>');\n      }\n      var tag_check = tag_complete.substring(1, tag_index).toLowerCase();\n      if (tag_complete.charAt(tag_complete.length-2) === '/' ||\n          this.Utils.in_array(tag_check, this.Utils.single_token)) { //if this tag name is a single tag type (either in the list or has a closing /)\n        this.tag_type = 'SINGLE';\n      }\n      else if (tag_check === 'script') { //for later script handling\n        this.record_tag(tag_check);\n        this.tag_type = 'SCRIPT';\n      }\n      else if (tag_check === 'style') { //for future style handling (for now it justs uses get_content)\n        this.record_tag(tag_check);\n        this.tag_type = 'STYLE';\n      }\n      else if (this.Utils.in_array(tag_check, unformatted)) { // do not reformat the \"unformatted\" tags\n        var comment = this.get_unformatted('</'+tag_check+'>', tag_complete); //...delegate to get_unformatted function\n        content.push(comment);\n        // Preserve collapsed whitespace either before or after this tag.\n        if (tag_start > 0 && this.Utils.in_array(this.input.charAt(tag_start - 1), this.Utils.whitespace)){\n            content.splice(0, 0, this.input.charAt(tag_start - 1));\n        }\n        tag_end = this.pos - 1;\n        if (this.Utils.in_array(this.input.charAt(tag_end + 1), this.Utils.whitespace)){\n            content.push(this.input.charAt(tag_end + 1));\n        }\n        this.tag_type = 'SINGLE';\n      }\n      else if (tag_check.charAt(0) === '!') { //peek for <!-- comment\n        if (tag_check.indexOf('[if') != -1) { //peek for <!--[if conditional comment\n          if (tag_complete.indexOf('!IE') != -1) { //this type needs a closing --> so...\n            var comment = this.get_unformatted('-->', tag_complete); //...delegate to get_unformatted\n            content.push(comment);\n          }\n          this.tag_type = 'START';\n        }\n        else if (tag_check.indexOf('[endif') != -1) {//peek for <!--[endif end conditional comment\n          this.tag_type = 'END';\n          this.unindent();\n        }\n        else if (tag_check.indexOf('[cdata[') != -1) { //if it's a <[cdata[ comment...\n          var comment = this.get_unformatted(']]>', tag_complete); //...delegate to get_unformatted function\n          content.push(comment);\n          this.tag_type = 'SINGLE'; //<![CDATA[ comments are treated like single tags\n        }\n        else {\n          var comment = this.get_unformatted('-->', tag_complete);\n          content.push(comment);\n          this.tag_type = 'SINGLE';\n        }\n      }\n      else {\n        if (tag_check.charAt(0) === '/') { //this tag is a double tag so check for tag-ending\n          this.retrieve_tag(tag_check.substring(1)); //remove it and all ancestors\n          this.tag_type = 'END';\n        }\n        else { //otherwise it's a start-tag\n          this.record_tag(tag_check); //push it on the tag stack\n          this.tag_type = 'START';\n        }\n        if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) { //check if this double needs an extra line\n          this.print_newline(true, this.output);\n        }\n      }\n      return content.join(''); //returns fully formatted tag\n    }\n\n    this.get_unformatted = function (delimiter, orig_tag) { //function to return unformatted content in its entirety\n\n      if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) != -1) {\n        return '';\n      }\n      var input_char = '';\n      var content = '';\n      var space = true;\n      do {\n\n        if (this.pos >= this.input.length) {\n          return content;\n        }\n\n        input_char = this.input.charAt(this.pos);\n        this.pos++\n\n        if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n          if (!space) {\n            this.line_char_count--;\n            continue;\n          }\n          if (input_char === '\\n' || input_char === '\\r') {\n            content += '\\n';\n            /*  Don't change tab indention for unformatted blocks.  If using code for html editing, this will greatly affect <pre> tags if they are specified in the 'unformatted array'\n            for (var i=0; i<this.indent_level; i++) {\n              content += this.indent_string;\n            }\n            space = false; //...and make sure other indentation is erased\n            */\n            this.line_char_count = 0;\n            continue;\n          }\n        }\n        content += input_char;\n        this.line_char_count++;\n        space = true;\n\n\n      } while (content.toLowerCase().indexOf(delimiter) == -1);\n      return content;\n    }\n\n    this.get_token = function () { //initial handler for token-retrieval\n      var token;\n\n      if (this.last_token === 'TK_TAG_SCRIPT' || this.last_token === 'TK_TAG_STYLE') { //check if we need to format javascript\n       var type = this.last_token.substr(7)\n       token = this.get_contents_to(type);\n        if (typeof token !== 'string') {\n          return token;\n        }\n        return [token, 'TK_' + type];\n      }\n      if (this.current_mode === 'CONTENT') {\n        token = this.get_content();\n        if (typeof token !== 'string') {\n          return token;\n        }\n        else {\n          return [token, 'TK_CONTENT'];\n        }\n      }\n\n      if (this.current_mode === 'TAG') {\n        token = this.get_tag();\n        if (typeof token !== 'string') {\n          return token;\n        }\n        else {\n          var tag_name_type = 'TK_TAG_' + this.tag_type;\n          return [token, tag_name_type];\n        }\n      }\n    }\n\n    this.get_full_indent = function (level) {\n      level = this.indent_level + level || 0;\n      if (level < 1)\n        return '';\n\n      return Array(level + 1).join(this.indent_string);\n    }\n\n\n    this.printer = function (js_source, indent_character, indent_size, max_char, brace_style) { //handles input/output and some other printing functions\n\n      this.input = js_source || ''; //gets the input for the Parser\n      this.output = [];\n      this.indent_character = indent_character;\n      this.indent_string = '';\n      this.indent_size = indent_size;\n      this.brace_style = brace_style;\n      this.indent_level = 0;\n      this.max_char = max_char;\n      this.line_char_count = 0; //count to see if max_char was exceeded\n\n      for (var i=0; i<this.indent_size; i++) {\n        this.indent_string += this.indent_character;\n      }\n\n      this.print_newline = function (ignore, arr) {\n        this.line_char_count = 0;\n        if (!arr || !arr.length) {\n          return;\n        }\n        if (!ignore) { //we might want the extra line\n          while (this.Utils.in_array(arr[arr.length-1], this.Utils.whitespace)) {\n            arr.pop();\n          }\n        }\n        arr.push('\\n');\n        for (var i=0; i<this.indent_level; i++) {\n          arr.push(this.indent_string);\n        }\n      }\n\n      this.print_token = function (text) {\n        this.output.push(text);\n      }\n\n      this.indent = function () {\n        this.indent_level++;\n      }\n\n      this.unindent = function () {\n        if (this.indent_level > 0) {\n          this.indent_level--;\n        }\n      }\n    }\n    return this;\n  }\n\n  /*_____________________--------------------_____________________*/\n\n  multi_parser = new Parser(); //wrapping functions Parser\n  multi_parser.printer(html_source, indent_character, indent_size, max_char, brace_style); //initialize starting values\n\n  while (true) {\n      var t = multi_parser.get_token();\n      multi_parser.token_text = t[0];\n      multi_parser.token_type = t[1];\n\n    if (multi_parser.token_type === 'TK_EOF') {\n      break;\n    }\n\n    switch (multi_parser.token_type) {\n      case 'TK_TAG_START':\n        multi_parser.print_newline(false, multi_parser.output);\n        multi_parser.print_token(multi_parser.token_text);\n        multi_parser.indent();\n        multi_parser.current_mode = 'CONTENT';\n        break;\n      case 'TK_TAG_STYLE':\n      case 'TK_TAG_SCRIPT':\n        multi_parser.print_newline(false, multi_parser.output);\n        multi_parser.print_token(multi_parser.token_text);\n        multi_parser.current_mode = 'CONTENT';\n        break;\n      case 'TK_TAG_END':\n        //Print new line only if the tag has no content and has child\n        if (multi_parser.last_token === 'TK_CONTENT' && multi_parser.last_text === '') {\n            var tag_name = multi_parser.token_text.match(/\\w+/)[0];\n            var tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length -1].match(/<\\s*(\\w+)/);\n            if (tag_extracted_from_last_output === null || tag_extracted_from_last_output[1] !== tag_name)\n                multi_parser.print_newline(true, multi_parser.output);\n        }\n        multi_parser.print_token(multi_parser.token_text);\n        multi_parser.current_mode = 'CONTENT';\n        break;\n      case 'TK_TAG_SINGLE':\n        // Don't add a newline before elements that should remain unformatted.\n        var tag_check = multi_parser.token_text.match(/^\\s*<([a-z]+)/i);\n        if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)){\n            multi_parser.print_newline(false, multi_parser.output);\n        }\n        multi_parser.print_token(multi_parser.token_text);\n        multi_parser.current_mode = 'CONTENT';\n        break;\n      case 'TK_CONTENT':\n        if (multi_parser.token_text !== '') {\n          multi_parser.print_token(multi_parser.token_text);\n        }\n        multi_parser.current_mode = 'TAG';\n        break;\n      case 'TK_STYLE':\n      case 'TK_SCRIPT':\n        if (multi_parser.token_text !== '') {\n          multi_parser.output.push('\\n');\n          var text = multi_parser.token_text;\n          if (multi_parser.token_type == 'TK_SCRIPT') {\n            var _beautifier = typeof js_beautify == 'function' && js_beautify;\n          } else if (multi_parser.token_type == 'TK_STYLE') {\n            var _beautifier = typeof css_beautify == 'function' && css_beautify;\n          }\n\n          if (options.indent_scripts == \"keep\") {\n            var script_indent_level = 0;\n          } else if (options.indent_scripts == \"separate\") {\n            var script_indent_level = -multi_parser.indent_level;\n          } else {\n            var script_indent_level = 1;\n          }\n\n          var indentation = multi_parser.get_full_indent(script_indent_level);\n          if (_beautifier) {\n            // call the Beautifier if avaliable\n            text = _beautifier(text.replace(/^\\s*/, indentation), options);\n          } else {\n            // simply indent the string otherwise\n            var white = text.match(/^\\s*/)[0];\n            var _level = white.match(/[^\\n\\r]*$/)[0].split(multi_parser.indent_string).length - 1;\n            var reindent = multi_parser.get_full_indent(script_indent_level -_level);\n            text = text.replace(/^\\s*/, indentation)\n                   .replace(/\\r\\n|\\r|\\n/g, '\\n' + reindent)\n                   .replace(/\\s*$/, '');\n          }\n          if (text) {\n            multi_parser.print_token(text);\n            multi_parser.print_newline(true, multi_parser.output);\n          }\n        }\n        multi_parser.current_mode = 'TAG';\n        break;\n    }\n    multi_parser.last_token = multi_parser.token_type;\n    multi_parser.last_text = multi_parser.token_text;\n  }\n  return multi_parser.output.join('');\n}\n\nmodule.exports = {\n  prettyPrint: style_html\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text, [])\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?: [^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) { // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) { // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else { // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        token.type = 'paragraph';\n        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.tokens = [];\n        this.lexer.inline(token.text, token.tokens);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href: cap[2],\n        title: cap[3]\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = [];\n          this.lexer.inline(item.header[j].text, item.header[j].tokens);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = [];\n            this.lexer.inline(row[k].text, row[k].tokens);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const token = {\n        type: 'paragraph',\n        raw: cap[0],\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      const token = {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = src.slice(1, lLength + match.index + rLength);\n          return {\n            type: 'em',\n            raw: src.slice(0, lLength + match.index + rLength + 1),\n            text,\n            tokens: this.lexer.inlineTokens(text, [])\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = src.slice(2, lLength + match.index + rLength - 1);\n        return {\n          type: 'strong',\n          raw: src.slice(0, lLength + match.index + rLength + 1),\n          text,\n          tokens: this.lexer.inlineTokens(text, [])\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2], [])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong  () Consume to delim (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[^*]+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\ninline.escapedEmSt = /\\\\\\*|\\\\_/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens) {\n    this.inlineQueue.push({ src, tokens });\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang, true)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const opts = merge({}, ...args);\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n  let hasExtensions;\n\n  args.forEach((pack) => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        pack.walkTokens.call(this, token);\n        if (walkTokens) {\n          walkTokens.call(this, token);\n        }\n      };\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  for (const token of tokens) {\n    callback.call(marked, token);\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          marked.walkTokens(cell.tokens, callback);\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            marked.walkTokens(cell.tokens, callback);\n          }\n        }\n        break;\n      }\n      case 'list': {\n        marked.walkTokens(token.items, callback);\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            marked.walkTokens(token[childTokens], callback);\n          });\n        } else if (token.tokens) {\n          marked.walkTokens(token.tokens, callback);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n","// @ts-nocheck\n/**\n * file: plugin_markup.js\n * マークアップ言語関連のプラグイン\n */\n\nimport { parse as parseMD } from 'marked'\nimport html from 'html'\n\nconst PluginMarkup = {\n  // @マークアップ\n  'マークダウンHTML変換': { // @マークダウン形式で記述された文字列SをHTML形式に変換する // @まーくだうんHTMLへんかん\n    type: 'func',\n    josi: [['を']],\n    pure: true,\n    fn: function (s) {\n      const html = parseMD(s)\n      return html\n    }\n  },\n  'HTML整形': { // @HTML形式で記述された文字列Sを整形する // @HTMLせいけい\n    type: 'func',\n    josi: [['を']],\n    pure: true,\n    fn: function (s) {\n      return html.prettyPrint(s, { indent_size: 2 })\n    }\n  }\n}\nexport default PluginMarkup\n// scriptタグで取り込んだ時、自動で登録する\nif (typeof (navigator) === 'object') { navigator.nako3.addPluginObject('PluginMarkup', PluginMarkup) }\n"],"names":["module","exports","prettyPrint","html_source","options","multi_parser","indent_size","indent_character","max_char","brace_style","unformatted","indent_char","Infinity","this","pos","token","current_mode","tags","parent","parentcount","parent1","tag_type","token_text","last_token","last_text","token_type","Utils","whitespace","split","single_token","extra_liners","in_array","what","arr","i","length","get_content","input_char","content","space","input","charAt","join","line_char_count","push","indent_level","indent_string","get_contents_to","name","reg_match","RegExp","lastIndex","reg_array","exec","end_script","index","substring","record_tag","tag","retrieve_tag","temp_parent","get_tag","tag_start","tag_end","get_unformatted","print_newline","tag_index","tag_complete","indexOf","tag_check","toLowerCase","comment","splice","unindent","output","delimiter","orig_tag","get_token","type","substr","get_full_indent","level","Array","printer","js_source","ignore","pop","print_token","text","indent","t","tag_name","match","tag_extracted_from_last_output","_beautifier","js_beautify","css_beautify","indent_scripts","script_indent_level","indentation","replace","_level","reindent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","getDefaults","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartLists","smartypants","tokenizer","walkTokens","xhtml","defaults","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","html","encode","test","unescapeTest","_","n","String","fromCharCode","parseInt","caret","edit","regex","opt","source","obj","val","getRegex","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","baseUrls","justDomain","rtrim","relativeBase","protocol","domain","resolveUrl","encodeURI","noopTest","merge","target","key","arguments","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","cells","offset","str","escaped","curr","trim","shift","c","invert","l","suffLen","currChar","slice","checkSanitizeDeprecation","console","warn","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","state","inLink","tokens","inlineTokens","Tokenizer","constructor","src","rules","block","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","indentCodeCompensation","lang","heading","trimmed","depth","inline","hr","blockquote","blockTokens","list","istask","ischecked","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","trimLeft","search","nextBulletRegex","Math","min","hrRegex","task","checked","trimRight","top","spacers","filter","hasMultipleLineBreaks","every","chars","lineBreaks","char","pre","def","table","item","header","align","rows","j","k","row","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","findClosingBracket","linkLen","_escapes","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","out","charCodeAt","random","toString","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","Lexer","create","inlineQueue","static","lex","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","repeat","some","extTokenizer","startBlock","startIndex","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","Renderer","infostring","quote","slugger","slug","body","listitem","checkbox","tablerow","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","value","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","dryrun","Parser","textRenderer","parse","parseInline","l2","l3","cell","itemBody","ret","renderers","parser","unshift","marked","callback","done","err","pending","setTimeout","message","setOptions","newDefaults","use","args","opts","childTokens","hasExtensions","pack","ext","prevRenderer","apply","prop","prevTokenizer","lexInline","PluginMarkup","josi","pure","fn","s","navigator","nako3","addPluginObject"],"sourceRoot":""}