{"version":3,"file":"plugin_markup.js","mappings":"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","sources":["webpack://nadesiko3/./node_modules/html/lib/html.js","webpack://nadesiko3/webpack/bootstrap","webpack://nadesiko3/./node_modules/marked/lib/marked.esm.js","webpack://nadesiko3/./src/plugin_markup.mjs"],"sourcesContent":["/*\n\n Style HTML\n---------------\n\n  Written by Nochum Sossonko, (nsossonko@hotmail.com)\n\n  Based on code initially developed by: Einar Lielmanis, <elfz@laacz.lv>\n    http://jsbeautifier.org/\n\n\n  You are free to use this in any way you want, in case you find this useful or working for you.\n\n  Usage:\n    style_html(html_source);\n\n    style_html(html_source, options);\n\n  The options are:\n    indent_size (default 4)          — indentation size,\n    indent_char (default space)      — character to indent with,\n    max_char (default 70)            -  maximum amount of characters per line,\n    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line.\n    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted\n    indent_scripts (default normal)  - \"keep\"|\"separate\"|\"normal\"\n\n    e.g.\n\n    style_html(html_source, {\n      'indent_size': 2,\n      'indent_char': ' ',\n      'max_char': 78,\n      'brace_style': 'expand',\n      'unformatted': ['a', 'sub', 'sup', 'b', 'i', 'u']\n    });\n*/\n\nfunction style_html(html_source, options) {\n//Wrapper function to invoke all the necessary constructors and deal with the output.\n\n  var multi_parser,\n      indent_size,\n      indent_character,\n      max_char,\n      brace_style,\n      unformatted;\n\n  options = options || {};\n  indent_size = options.indent_size || 4;\n  indent_character = options.indent_char || ' ';\n  brace_style = options.brace_style || 'collapse';\n  max_char = options.max_char == 0 ? Infinity : options.max_char || 70;\n  unformatted = options.unformatted || ['a', 'span', 'bdo', 'em', 'strong', 'dfn', 'code', 'samp', 'kbd', 'var', 'cite', 'abbr', 'acronym', 'q', 'sub', 'sup', 'tt', 'i', 'b', 'big', 'small', 'u', 's', 'strike', 'font', 'ins', 'del', 'pre', 'address', 'dt', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\n  function Parser() {\n\n    this.pos = 0; //Parser position\n    this.token = '';\n    this.current_mode = 'CONTENT'; //reflects the current Parser mode: TAG/CONTENT\n    this.tags = { //An object to hold tags, their position, and their parent-tags, initiated with default values\n      parent: 'parent1',\n      parentcount: 1,\n      parent1: ''\n    };\n    this.tag_type = '';\n    this.token_text = this.last_token = this.last_text = this.token_type = '';\n\n    this.Utils = { //Uilities made available to the various functions\n      whitespace: \"\\n\\r\\t \".split(''),\n      single_token: 'br,input,link,meta,!doctype,basefont,base,area,hr,wbr,param,img,isindex,?xml,embed,?php,?,?='.split(','), //all the single tags for HTML\n      extra_liners: 'head,body,/html'.split(','), //for tags that need a line of whitespace before them\n      in_array: function (what, arr) {\n        for (var i=0; i<arr.length; i++) {\n          if (what === arr[i]) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n\n    this.get_content = function () { //function to capture regular content between tags\n\n      var input_char = '',\n          content = [],\n          space = false; //if a space is needed\n\n      while (this.input.charAt(this.pos) !== '<') {\n        if (this.pos >= this.input.length) {\n          return content.length?content.join(''):['', 'TK_EOF'];\n        }\n\n        input_char = this.input.charAt(this.pos);\n        this.pos++;\n        this.line_char_count++;\n\n        if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n          if (content.length) {\n            space = true;\n          }\n          this.line_char_count--;\n          continue; //don't want to insert unnecessary space\n        }\n        else if (space) {\n          if (this.line_char_count >= this.max_char) { //insert a line when the max_char is reached\n            content.push('\\n');\n            for (var i=0; i<this.indent_level; i++) {\n              content.push(this.indent_string);\n            }\n            this.line_char_count = 0;\n          }\n          else{\n            content.push(' ');\n            this.line_char_count++;\n          }\n          space = false;\n        }\n        content.push(input_char); //letter at-a-time (or string) inserted to an array\n      }\n      return content.length?content.join(''):'';\n    }\n\n    this.get_contents_to = function (name) { //get the full content of a script or style to pass to js_beautify\n      if (this.pos == this.input.length) {\n        return ['', 'TK_EOF'];\n      }\n      var input_char = '';\n      var content = '';\n      var reg_match = new RegExp('\\<\\/' + name + '\\\\s*\\>', 'igm');\n      reg_match.lastIndex = this.pos;\n      var reg_array = reg_match.exec(this.input);\n      var end_script = reg_array?reg_array.index:this.input.length; //absolute end of script\n      if(this.pos < end_script) { //get everything in between the script tags\n        content = this.input.substring(this.pos, end_script);\n        this.pos = end_script;\n      }\n      return content;\n    }\n\n    this.record_tag = function (tag){ //function to record a tag and its parent in this.tags Object\n      if (this.tags[tag + 'count']) { //check for the existence of this tag type\n        this.tags[tag + 'count']++;\n        this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n      }\n      else { //otherwise initialize this tag type\n        this.tags[tag + 'count'] = 1;\n        this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n      }\n      this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent; //set the parent (i.e. in the case of a div this.tags.div1parent)\n      this.tags.parent = tag + this.tags[tag + 'count']; //and make this the current parent (i.e. in the case of a div 'div1')\n    }\n\n    this.retrieve_tag = function (tag) { //function to retrieve the opening tag to the corresponding closer\n      if (this.tags[tag + 'count']) { //if the openener is not in the Object we ignore it\n        var temp_parent = this.tags.parent; //check to see if it's a closable tag.\n        while (temp_parent) { //till we reach '' (the initial value);\n          if (tag + this.tags[tag + 'count'] === temp_parent) { //if this is it use it\n            break;\n          }\n          temp_parent = this.tags[temp_parent + 'parent']; //otherwise keep on climbing up the DOM Tree\n        }\n        if (temp_parent) { //if we caught something\n          this.indent_level = this.tags[tag + this.tags[tag + 'count']]; //set the indent_level accordingly\n          this.tags.parent = this.tags[temp_parent + 'parent']; //and set the current parent\n        }\n        delete this.tags[tag + this.tags[tag + 'count'] + 'parent']; //delete the closed tags parent reference...\n        delete this.tags[tag + this.tags[tag + 'count']]; //...and the tag itself\n        if (this.tags[tag + 'count'] == 1) {\n          delete this.tags[tag + 'count'];\n        }\n        else {\n          this.tags[tag + 'count']--;\n        }\n      }\n    }\n\n    this.get_tag = function () { //function to get a full tag and parse its type\n      var input_char = '',\n          content = [],\n          space = false,\n          tag_start, tag_end;\n\n      do {\n        if (this.pos >= this.input.length) {\n          return content.length?content.join(''):['', 'TK_EOF'];\n        }\n\n        input_char = this.input.charAt(this.pos);\n        this.pos++;\n        this.line_char_count++;\n\n        if (this.Utils.in_array(input_char, this.Utils.whitespace)) { //don't want to insert unnecessary space\n          space = true;\n          this.line_char_count--;\n          continue;\n        }\n\n        if (input_char === \"'\" || input_char === '\"') {\n          if (!content[1] || content[1] !== '!') { //if we're in a comment strings don't get treated specially\n            input_char += this.get_unformatted(input_char);\n            space = true;\n          }\n        }\n\n        if (input_char === '=') { //no space before =\n          space = false;\n        }\n\n        if (content.length && content[content.length-1] !== '=' && input_char !== '>'\n            && space) { //no space after = or before >\n          if (this.line_char_count >= this.max_char) {\n            this.print_newline(false, content);\n            this.line_char_count = 0;\n          }\n          else {\n            content.push(' ');\n            this.line_char_count++;\n          }\n          space = false;\n        }\n        if (input_char === '<') {\n            tag_start = this.pos - 1;\n        }\n        content.push(input_char); //inserts character at-a-time (or string)\n      } while (input_char !== '>');\n\n      var tag_complete = content.join('');\n      var tag_index;\n      if (tag_complete.indexOf(' ') != -1) { //if there's whitespace, thats where the tag name ends\n        tag_index = tag_complete.indexOf(' ');\n      }\n      else { //otherwise go with the tag ending\n        tag_index = tag_complete.indexOf('>');\n      }\n      var tag_check = tag_complete.substring(1, tag_index).toLowerCase();\n      if (tag_complete.charAt(tag_complete.length-2) === '/' ||\n          this.Utils.in_array(tag_check, this.Utils.single_token)) { //if this tag name is a single tag type (either in the list or has a closing /)\n        this.tag_type = 'SINGLE';\n      }\n      else if (tag_check === 'script') { //for later script handling\n        this.record_tag(tag_check);\n        this.tag_type = 'SCRIPT';\n      }\n      else if (tag_check === 'style') { //for future style handling (for now it justs uses get_content)\n        this.record_tag(tag_check);\n        this.tag_type = 'STYLE';\n      }\n      else if (this.Utils.in_array(tag_check, unformatted)) { // do not reformat the \"unformatted\" tags\n        var comment = this.get_unformatted('</'+tag_check+'>', tag_complete); //...delegate to get_unformatted function\n        content.push(comment);\n        // Preserve collapsed whitespace either before or after this tag.\n        if (tag_start > 0 && this.Utils.in_array(this.input.charAt(tag_start - 1), this.Utils.whitespace)){\n            content.splice(0, 0, this.input.charAt(tag_start - 1));\n        }\n        tag_end = this.pos - 1;\n        if (this.Utils.in_array(this.input.charAt(tag_end + 1), this.Utils.whitespace)){\n            content.push(this.input.charAt(tag_end + 1));\n        }\n        this.tag_type = 'SINGLE';\n      }\n      else if (tag_check.charAt(0) === '!') { //peek for <!-- comment\n        if (tag_check.indexOf('[if') != -1) { //peek for <!--[if conditional comment\n          if (tag_complete.indexOf('!IE') != -1) { //this type needs a closing --> so...\n            var comment = this.get_unformatted('-->', tag_complete); //...delegate to get_unformatted\n            content.push(comment);\n          }\n          this.tag_type = 'START';\n        }\n        else if (tag_check.indexOf('[endif') != -1) {//peek for <!--[endif end conditional comment\n          this.tag_type = 'END';\n          this.unindent();\n        }\n        else if (tag_check.indexOf('[cdata[') != -1) { //if it's a <[cdata[ comment...\n          var comment = this.get_unformatted(']]>', tag_complete); //...delegate to get_unformatted function\n          content.push(comment);\n          this.tag_type = 'SINGLE'; //<![CDATA[ comments are treated like single tags\n        }\n        else {\n          var comment = this.get_unformatted('-->', tag_complete);\n          content.push(comment);\n          this.tag_type = 'SINGLE';\n        }\n      }\n      else {\n        if (tag_check.charAt(0) === '/') { //this tag is a double tag so check for tag-ending\n          this.retrieve_tag(tag_check.substring(1)); //remove it and all ancestors\n          this.tag_type = 'END';\n        }\n        else { //otherwise it's a start-tag\n          this.record_tag(tag_check); //push it on the tag stack\n          this.tag_type = 'START';\n        }\n        if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) { //check if this double needs an extra line\n          this.print_newline(true, this.output);\n        }\n      }\n      return content.join(''); //returns fully formatted tag\n    }\n\n    this.get_unformatted = function (delimiter, orig_tag) { //function to return unformatted content in its entirety\n\n      if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) != -1) {\n        return '';\n      }\n      var input_char = '';\n      var content = '';\n      var space = true;\n      do {\n\n        if (this.pos >= this.input.length) {\n          return content;\n        }\n\n        input_char = this.input.charAt(this.pos);\n        this.pos++\n\n        if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n          if (!space) {\n            this.line_char_count--;\n            continue;\n          }\n          if (input_char === '\\n' || input_char === '\\r') {\n            content += '\\n';\n            /*  Don't change tab indention for unformatted blocks.  If using code for html editing, this will greatly affect <pre> tags if they are specified in the 'unformatted array'\n            for (var i=0; i<this.indent_level; i++) {\n              content += this.indent_string;\n            }\n            space = false; //...and make sure other indentation is erased\n            */\n            this.line_char_count = 0;\n            continue;\n          }\n        }\n        content += input_char;\n        this.line_char_count++;\n        space = true;\n\n\n      } while (content.toLowerCase().indexOf(delimiter) == -1);\n      return content;\n    }\n\n    this.get_token = function () { //initial handler for token-retrieval\n      var token;\n\n      if (this.last_token === 'TK_TAG_SCRIPT' || this.last_token === 'TK_TAG_STYLE') { //check if we need to format javascript\n       var type = this.last_token.substr(7)\n       token = this.get_contents_to(type);\n        if (typeof token !== 'string') {\n          return token;\n        }\n        return [token, 'TK_' + type];\n      }\n      if (this.current_mode === 'CONTENT') {\n        token = this.get_content();\n        if (typeof token !== 'string') {\n          return token;\n        }\n        else {\n          return [token, 'TK_CONTENT'];\n        }\n      }\n\n      if (this.current_mode === 'TAG') {\n        token = this.get_tag();\n        if (typeof token !== 'string') {\n          return token;\n        }\n        else {\n          var tag_name_type = 'TK_TAG_' + this.tag_type;\n          return [token, tag_name_type];\n        }\n      }\n    }\n\n    this.get_full_indent = function (level) {\n      level = this.indent_level + level || 0;\n      if (level < 1)\n        return '';\n\n      return Array(level + 1).join(this.indent_string);\n    }\n\n\n    this.printer = function (js_source, indent_character, indent_size, max_char, brace_style) { //handles input/output and some other printing functions\n\n      this.input = js_source || ''; //gets the input for the Parser\n      this.output = [];\n      this.indent_character = indent_character;\n      this.indent_string = '';\n      this.indent_size = indent_size;\n      this.brace_style = brace_style;\n      this.indent_level = 0;\n      this.max_char = max_char;\n      this.line_char_count = 0; //count to see if max_char was exceeded\n\n      for (var i=0; i<this.indent_size; i++) {\n        this.indent_string += this.indent_character;\n      }\n\n      this.print_newline = function (ignore, arr) {\n        this.line_char_count = 0;\n        if (!arr || !arr.length) {\n          return;\n        }\n        if (!ignore) { //we might want the extra line\n          while (this.Utils.in_array(arr[arr.length-1], this.Utils.whitespace)) {\n            arr.pop();\n          }\n        }\n        arr.push('\\n');\n        for (var i=0; i<this.indent_level; i++) {\n          arr.push(this.indent_string);\n        }\n      }\n\n      this.print_token = function (text) {\n        this.output.push(text);\n      }\n\n      this.indent = function () {\n        this.indent_level++;\n      }\n\n      this.unindent = function () {\n        if (this.indent_level > 0) {\n          this.indent_level--;\n        }\n      }\n    }\n    return this;\n  }\n\n  /*_____________________--------------------_____________________*/\n\n  multi_parser = new Parser(); //wrapping functions Parser\n  multi_parser.printer(html_source, indent_character, indent_size, max_char, brace_style); //initialize starting values\n\n  while (true) {\n      var t = multi_parser.get_token();\n      multi_parser.token_text = t[0];\n      multi_parser.token_type = t[1];\n\n    if (multi_parser.token_type === 'TK_EOF') {\n      break;\n    }\n\n    switch (multi_parser.token_type) {\n      case 'TK_TAG_START':\n        multi_parser.print_newline(false, multi_parser.output);\n        multi_parser.print_token(multi_parser.token_text);\n        multi_parser.indent();\n        multi_parser.current_mode = 'CONTENT';\n        break;\n      case 'TK_TAG_STYLE':\n      case 'TK_TAG_SCRIPT':\n        multi_parser.print_newline(false, multi_parser.output);\n        multi_parser.print_token(multi_parser.token_text);\n        multi_parser.current_mode = 'CONTENT';\n        break;\n      case 'TK_TAG_END':\n        //Print new line only if the tag has no content and has child\n        if (multi_parser.last_token === 'TK_CONTENT' && multi_parser.last_text === '') {\n            var tag_name = multi_parser.token_text.match(/\\w+/)[0];\n            var tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length -1].match(/<\\s*(\\w+)/);\n            if (tag_extracted_from_last_output === null || tag_extracted_from_last_output[1] !== tag_name)\n                multi_parser.print_newline(true, multi_parser.output);\n        }\n        multi_parser.print_token(multi_parser.token_text);\n        multi_parser.current_mode = 'CONTENT';\n        break;\n      case 'TK_TAG_SINGLE':\n        // Don't add a newline before elements that should remain unformatted.\n        var tag_check = multi_parser.token_text.match(/^\\s*<([a-z]+)/i);\n        if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)){\n            multi_parser.print_newline(false, multi_parser.output);\n        }\n        multi_parser.print_token(multi_parser.token_text);\n        multi_parser.current_mode = 'CONTENT';\n        break;\n      case 'TK_CONTENT':\n        if (multi_parser.token_text !== '') {\n          multi_parser.print_token(multi_parser.token_text);\n        }\n        multi_parser.current_mode = 'TAG';\n        break;\n      case 'TK_STYLE':\n      case 'TK_SCRIPT':\n        if (multi_parser.token_text !== '') {\n          multi_parser.output.push('\\n');\n          var text = multi_parser.token_text;\n          if (multi_parser.token_type == 'TK_SCRIPT') {\n            var _beautifier = typeof js_beautify == 'function' && js_beautify;\n          } else if (multi_parser.token_type == 'TK_STYLE') {\n            var _beautifier = typeof css_beautify == 'function' && css_beautify;\n          }\n\n          if (options.indent_scripts == \"keep\") {\n            var script_indent_level = 0;\n          } else if (options.indent_scripts == \"separate\") {\n            var script_indent_level = -multi_parser.indent_level;\n          } else {\n            var script_indent_level = 1;\n          }\n\n          var indentation = multi_parser.get_full_indent(script_indent_level);\n          if (_beautifier) {\n            // call the Beautifier if avaliable\n            text = _beautifier(text.replace(/^\\s*/, indentation), options);\n          } else {\n            // simply indent the string otherwise\n            var white = text.match(/^\\s*/)[0];\n            var _level = white.match(/[^\\n\\r]*$/)[0].split(multi_parser.indent_string).length - 1;\n            var reindent = multi_parser.get_full_indent(script_indent_level -_level);\n            text = text.replace(/^\\s*/, indentation)\n                   .replace(/\\r\\n|\\r|\\n/g, '\\n' + reindent)\n                   .replace(/\\s*$/, '');\n          }\n          if (text) {\n            multi_parser.print_token(text);\n            multi_parser.print_newline(true, multi_parser.output);\n          }\n        }\n        multi_parser.current_mode = 'TAG';\n        break;\n    }\n    multi_parser.last_token = multi_parser.token_type;\n    multi_parser.last_text = multi_parser.token_text;\n  }\n  return multi_parser.output.join('');\n}\n\nmodule.exports = {\n  prettyPrint: style_html\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * marked v12.0.2 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            // precede setext continuation with 4 spaces so it isn't a setext\n            let text = cap[0].replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1');\n            text = rtrim(text.replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            (list.items[list.items.length - 1]).text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (const header of headers) {\n            item.header.push({\n                text: header,\n                tokens: this.lexer.inline(header)\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map(cell => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell)\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(lang)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","// @ts-nocheck\n/**\n * file: plugin_markup.js\n * マークアップ言語関連のプラグイン\n */\n\nimport { parse as parseMD } from 'marked'\nimport html from 'html'\n\nconst PluginMarkup = {\n  'meta': {\n    type: 'const',\n    value: {\n      pluginName: 'plugin_markup', // プラグインの名前\n      description: 'HTML整形やマークダウン変換などの命令を提供するプラグイン', // プラグインの説明\n      pluginVersion: '3.6.0', // プラグインのバージョン\n      nakoRuntime: ['wnako', 'cnako'], // 対象ランタイム\n      nakoVersion: '3.6.0' // 要求なでしこバージョン\n    }\n  },\n  // @マークアップ\n  'マークダウンHTML変換': { // @マークダウン形式で記述された文字列SをHTML形式に変換する // @まーくだうんHTMLへんかん\n    type: 'func',\n    josi: [['を']],\n    pure: true,\n    fn: function (s) {\n      const html = parseMD(s)\n      return html\n    }\n  },\n  'HTML整形': { // @HTML形式で記述された文字列Sを整形する // @HTMLせいけい\n    type: 'func',\n    josi: [['を']],\n    pure: true,\n    fn: function (s) {\n      return html.prettyPrint(s, { indent_size: 2 })\n    }\n  }\n}\nexport default PluginMarkup\n// scriptタグで取り込んだ時、自動で登録する\nif (typeof (navigator) === 'object') { navigator.nako3.addPluginObject('PluginMarkup', PluginMarkup) }\n"],"names":["module","exports","prettyPrint","html_source","options","multi_parser","indent_size","indent_character","max_char","brace_style","unformatted","indent_char","Infinity","this","pos","token","current_mode","tags","parent","parentcount","parent1","tag_type","token_text","last_token","last_text","token_type","Utils","whitespace","split","single_token","extra_liners","in_array","what","arr","i","length","get_content","input_char","content","space","input","charAt","join","line_char_count","push","indent_level","indent_string","get_contents_to","name","reg_match","RegExp","lastIndex","reg_array","exec","end_script","index","substring","record_tag","tag","retrieve_tag","temp_parent","get_tag","tag_start","tag_end","get_unformatted","print_newline","tag_index","tag_complete","indexOf","tag_check","toLowerCase","comment","splice","unindent","output","delimiter","orig_tag","get_token","type","substr","get_full_indent","level","Array","printer","js_source","ignore","pop","print_token","text","indent","t","tag_name","match","tag_extracted_from_last_output","_beautifier","js_beautify","css_beautify","indent_scripts","script_indent_level","indentation","replace","_level","reindent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","test","unescapeTest","_","n","String","fromCharCode","parseInt","caret","edit","regex","opt","obj","val","valSource","getRegex","cleanUrl","href","encodeURI","e","noopTest","splitCells","tableRow","count","cells","offset","str","escaped","curr","trim","shift","rtrim","c","invert","l","suffLen","currChar","slice","outputLink","cap","link","raw","lexer","title","state","inLink","tokens","inlineTokens","_Tokenizer","rules","constructor","src","block","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","indentCodeCompensation","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","items","itemRegex","itemContents","endsWithBlankLine","endEarly","line","repeat","nextLine","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","ischecked","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","table","headers","aligns","rows","item","header","align","row","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","findClosingBracket","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","emStrongLDelim","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastCharLength","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","bullet","_paragraph","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","_punctuation","_inlineComment","_inlineLabel","inlineNormal","blockSkip","reflinkSearch","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","extTokenizer","call","startBlock","startIndex","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","infostring","quote","body","listitem","checkbox","tablerow","tablecell","flags","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parse","parseInline","renderers","genericToken","ret","parser","headingToken","codeToken","tableToken","j","k","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","markedInstance","defaults","setOptions","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","warn","throwError","prototype","toString","all","catch","message","msg","reject","marked","getDefaults","PluginMarkup","value","pluginName","description","pluginVersion","nakoRuntime","nakoVersion","josi","pure","fn","s","navigator","nako3","addPluginObject"],"sourceRoot":""}